
login_system_for_smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00005a5c  00005af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001fe  008001fe  00005c8e  2**0
                  ALLOC
  3 .stab         00005ab4  00000000  00000000  00005c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000195d  00000000  00000000  0000b744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000fa87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00012747  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_10>
      2c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <main>
      8a:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 2d 	jmp	0x5a22	; 0x5a22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 2d 	jmp	0x5a22	; 0x5a22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ed       	ldi	r22, 0xDA	; 218
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 1a 2d 	jmp	0x5a34	; 0x5a34 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 51       	subi	r30, 0x1E	; 30
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_voidEnable>:
#include "../../LIB/BIT_Math.h"
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "WDT.h"

void WDT_voidEnable(u8 Copt_u8WaitingTime){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01

	/* enable watchdog */
	SET_BIT(WDTCR, WDE);
     ef6:	a1 e4       	ldi	r26, 0x41	; 65
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e4       	ldi	r30, 0x41	; 65
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	8c 93       	st	X, r24

	/* select prescaler */
	WDTCR &= 0b11111000;
     f04:	a1 e4       	ldi	r26, 0x41	; 65
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e1 e4       	ldi	r30, 0x41	; 65
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	8c 93       	st	X, r24
	WDTCR |= Copt_u8WaitingTime;
     f12:	a1 e4       	ldi	r26, 0x41	; 65
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e1 e4       	ldi	r30, 0x41	; 65
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	90 81       	ld	r25, Z
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	89 2b       	or	r24, r25
     f20:	8c 93       	st	X, r24

}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <WDT_voidDisable>:


void WDT_voidDisable(void){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDTCR |= (1<<WDTOE) | (1<<WDE);
     f32:	a1 e4       	ldi	r26, 0x41	; 65
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e4       	ldi	r30, 0x41	; 65
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 61       	ori	r24, 0x18	; 24
     f3e:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     f40:	e1 e4       	ldi	r30, 0x41	; 65
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	10 82       	st	Z, r1
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <UART_voidInit>:
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <UART_voidInit+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
     f58:	83 e3       	ldi	r24, 0x33	; 51
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9b 83       	std	Y+3, r25	; 0x03
     f5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
     f64:	e9 e2       	ldi	r30, 0x29	; 41
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
     f6c:	e0 e4       	ldi	r30, 0x40	; 64
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	89 2f       	mov	r24, r25
     f76:	99 27       	eor	r25, r25
     f78:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
     f7a:	ab e2       	ldi	r26, 0x2B	; 43
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e2       	ldi	r30, 0x2B	; 43
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
     f88:	ab e2       	ldi	r26, 0x2B	; 43
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	eb e2       	ldi	r30, 0x2B	; 43
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
     f96:	aa e2       	ldi	r26, 0x2A	; 42
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ea e2       	ldi	r30, 0x2A	; 42
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     fa4:	aa e2       	ldi	r26, 0x2A	; 42
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea e2       	ldi	r30, 0x2A	; 42
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 60       	ori	r24, 0x08	; 8
     fb0:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
     fb2:	aa e2       	ldi	r26, 0x2A	; 42
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e2       	ldi	r30, 0x2A	; 42
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	84 60       	ori	r24, 0x04	; 4
     fc4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 7b       	andi	r24, 0xBF	; 191
     fd0:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
     fea:	e0 e4       	ldi	r30, 0x40	; 64
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	80 83       	st	Z, r24

}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
    100a:	eb e2       	ldi	r30, 0x2B	; 43
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	82 95       	swap	r24
    1012:	86 95       	lsr	r24
    1014:	87 70       	andi	r24, 0x07	; 7
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	90 70       	andi	r25, 0x00	; 0
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	a1 f3       	breq	.-24     	; 0x100a <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
    1022:	ec e2       	ldi	r30, 0x2C	; 44
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 83       	st	Z, r24
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 23       	and	r24, r24
    1042:	dc f7       	brge	.-10     	; 0x103a <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
    1044:	ec e2       	ldi	r30, 0x2C	; 44
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#else
	SET_BIT(TCCR0, WGM00);
    1058:	a3 e5       	ldi	r26, 0x53	; 83
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e3 e5       	ldi	r30, 0x53	; 83
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	8c 93       	st	X, r24
#endif

}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
    1086:	e2 e5       	ldi	r30, 0x52	; 82
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 83       	st	Z, r24

}
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
    10a2:	a3 e5       	ldi	r26, 0x53	; 83
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	88 7f       	andi	r24, 0xF8	; 248
    10ae:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
    10b0:	a3 e5       	ldi	r26, 0x53	; 83
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e3 e5       	ldi	r30, 0x53	; 83
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	90 81       	ld	r25, Z
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	89 2b       	or	r24, r25
    10be:	8c 93       	st	X, r24

}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	41 f4       	brne	.+16     	; 0x10ea <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
    10da:	a9 e5       	ldi	r26, 0x59	; 89
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e9 e5       	ldi	r30, 0x59	; 89
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
    10ea:	a9 e5       	ldi	r26, 0x59	; 89
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e9 e5       	ldi	r30, 0x59	; 89
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	8c 93       	st	X, r24

}
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <TIM0_voidSetCompareMat+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <TIM0_voidSetCompareMat+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3c 83       	std	Y+4, r19	; 0x04
    1118:	2b 83       	std	Y+3, r18	; 0x03
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	c9 f0       	breq	.+50     	; 0x1156 <TIM0_voidSetCompareMat+0x56>
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	3c 81       	ldd	r19, Y+4	; 0x04
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	19 f1       	breq	.+70     	; 0x1174 <TIM0_voidSetCompareMat+0x74>
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	69 f5       	brne	.+90     	; 0x1192 <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 61       	ori	r24, 0x10	; 16
    1144:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8c 93       	st	X, r24
    1154:	2c c0       	rjmp	.+88     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 62       	ori	r24, 0x20	; 32
    1162:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7d       	andi	r24, 0xDF	; 223
    11ac:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    11ae:	ec e5       	ldi	r30, 0x5C	; 92
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	80 83       	st	Z, r24

}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <TIM0_voidPWMGenerator+0xa>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <TIM0_voidPWMGenerator+0x1a>
    11dc:	44 c0       	rjmp	.+136    	; 0x1266 <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
    11fa:	0c e5       	ldi	r16, 0x5C	; 92
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	aa 27       	eor	r26, r26
    1206:	97 fd       	sbrc	r25, 7
    1208:	a0 95       	com	r26
    120a:	ba 2f       	mov	r27, r26
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	48 ec       	ldi	r20, 0xC8	; 200
    1222:	52 e4       	ldi	r21, 0x42	; 66
    1224:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	53 ec       	ldi	r21, 0xC3	; 195
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	f8 01       	movw	r30, r16
    1262:	80 83       	st	Z, r24
    1264:	39 c0       	rjmp	.+114    	; 0x12d8 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 62       	ori	r24, 0x20	; 32
    1272:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7e       	andi	r24, 0xEF	; 239
    1280:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    1282:	0c e5       	ldi	r16, 0x5C	; 92
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	aa 27       	eor	r26, r26
    128e:	97 fd       	sbrc	r25, 7
    1290:	a0 95       	com	r26
    1292:	ba 2f       	mov	r27, r26
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	48 ec       	ldi	r20, 0xC8	; 200
    12aa:	52 e4       	ldi	r21, 0x42	; 66
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	53 e4       	ldi	r21, 0x43	; 67
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 83       	st	Z, r24
	}

#endif


}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    12f2:	ec e5       	ldi	r30, 0x5C	; 92
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	80 83       	st	Z, r24

}
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	41 f4       	brne	.+16     	; 0x1324 <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    1314:	a9 e5       	ldi	r26, 0x59	; 89
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e9 e5       	ldi	r30, 0x59	; 89
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	8c 93       	st	X, r24
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    1324:	a9 e5       	ldi	r26, 0x59	; 89
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e9 e5       	ldi	r30, 0x59	; 89
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8d 7f       	andi	r24, 0xFD	; 253
    1330:	8c 93       	st	X, r24

}
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	88 7f       	andi	r24, 0xF8	; 248
    134e:	8c 93       	st	X, r24

}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <TIM0_voidOvfCallback+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	90 93 03 02 	sts	0x0203, r25
    136c:	80 93 02 02 	sts	0x0202, r24
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <TIM0_voidCmpCallback+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	90 93 01 02 	sts	0x0201, r25
    1390:	80 93 00 02 	sts	0x0200, r24

}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <__vector_11>:


ISR(TIMER0_OVF_vect){
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    13c8:	e0 91 02 02 	lds	r30, 0x0202
    13cc:	f0 91 03 02 	lds	r31, 0x0203
    13d0:	09 95       	icall
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_10>:


ISR(TIMER0_COMP_vect){
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    1422:	e0 91 00 02 	lds	r30, 0x0200
    1426:	f0 91 01 02 	lds	r31, 0x0201
    142a:	09 95       	icall
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <SPI_voidInit>:
/*****************************************************/
#include "SPI.h"



void SPI_voidInit	(void){
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62

#if	SPI_MODE == SPI_MASTER_MODE
	/*1- Select order ==> MSB */
	CLR_BIT(SPCR , DORD);
    145a:	ad e2       	ldi	r26, 0x2D	; 45
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ed e2       	ldi	r30, 0x2D	; 45
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7d       	andi	r24, 0xDF	; 223
    1466:	8c 93       	st	X, r24

	/*2- select Master mode */
	SET_BIT(SPCR, MSTR);
    1468:	ad e2       	ldi	r26, 0x2D	; 45
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ed e2       	ldi	r30, 0x2D	; 45
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 61       	ori	r24, 0x10	; 16
    1474:	8c 93       	st	X, r24

	/*3- Clock Polarity & Phase ==> Rising_Falling ... Setup_Sample */
	CLR_BIT(SPCR , CPOL);
    1476:	ad e2       	ldi	r26, 0x2D	; 45
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ed e2       	ldi	r30, 0x2D	; 45
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPHA);
    1484:	ad e2       	ldi	r26, 0x2D	; 45
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ed e2       	ldi	r30, 0x2D	; 45
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	8c 93       	st	X, r24

	/*4- set clock rate fck/16 */
	SET_BIT(SPCR, SPR0);
    1492:	ad e2       	ldi	r26, 0x2D	; 45
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ed e2       	ldi	r30, 0x2D	; 45
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1);
    14a0:	ad e2       	ldi	r26, 0x2D	; 45
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ed e2       	ldi	r30, 0x2D	; 45
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPI2X);
    14ae:	ae e2       	ldi	r26, 0x2E	; 46
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ee e2       	ldi	r30, 0x2E	; 46
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8e 7f       	andi	r24, 0xFE	; 254
    14ba:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPHA);

#endif

	/* enable SPI */
	SET_BIT(SPCR, SPE);
    14bc:	ad e2       	ldi	r26, 0x2D	; 45
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ed e2       	ldi	r30, 0x2D	; 45
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 64       	ori	r24, 0x40	; 64
    14c8:	8c 93       	st	X, r24

}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <SPI_u8ReceiveData>:


u8   SPI_u8ReceiveData		(void){
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    14d8:	ee e2       	ldi	r30, 0x2E	; 46
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	88 23       	and	r24, r24
    14e0:	dc f7       	brge	.-10     	; 0x14d8 <SPI_u8ReceiveData+0x8>

	/* Return data register */
	return SPDR;
    14e2:	ef e2       	ldi	r30, 0x2F	; 47
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z

}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <SPI_voidMasterSendData>:


void SPI_voidMasterSendData (u8 Copy_u8Data){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01

	/* Start transmission */
	SPDR = Copy_u8Data;
    14fa:	ef e2       	ldi	r30, 0x2F	; 47
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    1502:	ee e2       	ldi	r30, 0x2E	; 46
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 23       	and	r24, r24
    150a:	dc f7       	brge	.-10     	; 0x1502 <SPI_voidMasterSendData+0x14>

}
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <SPI_voidSalveSendData>:


void SPI_voidSalveSendData	(u8 Copy_u8Data){
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01

	SPDR = Copy_u8Data;
    1520:	ef e2       	ldi	r30, 0x2F	; 47
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	80 83       	st	Z, r24

}
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <SPI_u8ReceiveTrans>:


u8   SPI_u8ReceiveTrans		(u8 Copy_u8Data){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01

	/* send data */
	SPDR = Copy_u8Data;
    153c:	ef e2       	ldi	r30, 0x2F	; 47
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    1544:	ee e2       	ldi	r30, 0x2E	; 46
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 23       	and	r24, r24
    154c:	dc f7       	brge	.-10     	; 0x1544 <SPI_u8ReceiveTrans+0x14>

	/* Return data register */
	return SPDR;
    154e:	ef e2       	ldi	r30, 0x2F	; 47
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
}
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <INT_voidEnable>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/interrupt.h>
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTINdex, u8 Copy_u8INTSense){
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	2a 97       	sbiw	r28, 0x0a	; 10
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8INTINdex) {
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3a 87       	std	Y+10, r19	; 0x0a
    157c:	29 87       	std	Y+9, r18	; 0x09
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <INT_voidEnable+0x2e>
    1588:	6d c0       	rjmp	.+218    	; 0x1664 <INT_voidEnable+0x108>
    158a:	29 85       	ldd	r18, Y+9	; 0x09
    158c:	3a 85       	ldd	r19, Y+10	; 0x0a
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <INT_voidEnable+0x3a>
    1594:	c9 c0       	rjmp	.+402    	; 0x1728 <INT_voidEnable+0x1cc>
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <INT_voidEnable+0x44>
    159e:	e9 c0       	rjmp	.+466    	; 0x1772 <INT_voidEnable+0x216>
		case INT_INT0:
			/* Select sense */
			switch (Copy_u8INTSense) {
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	38 87       	std	Y+8, r19	; 0x08
    15a8:	2f 83       	std	Y+7, r18	; 0x07
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	21 f1       	breq	.+72     	; 0x15fc <INT_voidEnable+0xa0>
    15b4:	2f 81       	ldd	r18, Y+7	; 0x07
    15b6:	38 85       	ldd	r19, Y+8	; 0x08
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <INT_voidEnable+0x6c>
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 f0       	breq	.+24     	; 0x15de <INT_voidEnable+0x82>
    15c6:	46 c0       	rjmp	.+140    	; 0x1654 <INT_voidEnable+0xf8>
    15c8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ca:	38 85       	ldd	r19, Y+8	; 0x08
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	21 f1       	breq	.+72     	; 0x161a <INT_voidEnable+0xbe>
    15d2:	8f 81       	ldd	r24, Y+7	; 0x07
    15d4:	98 85       	ldd	r25, Y+8	; 0x08
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	71 f1       	breq	.+92     	; 0x1638 <INT_voidEnable+0xdc>
    15dc:	3b c0       	rjmp	.+118    	; 0x1654 <INT_voidEnable+0xf8>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC00);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8e 7f       	andi	r24, 0xFE	; 254
    15ea:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	82 60       	ori	r24, 0x02	; 2
    15f8:	8c 93       	st	X, r24
    15fa:	2c c0       	rjmp	.+88     	; 0x1654 <INT_voidEnable+0xf8>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC00);
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	82 60       	ori	r24, 0x02	; 2
    1616:	8c 93       	st	X, r24
    1618:	1d c0       	rjmp	.+58     	; 0x1654 <INT_voidEnable+0xf8>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC01);
    161a:	a5 e5       	ldi	r26, 0x55	; 85
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e5       	ldi	r30, 0x55	; 85
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8d 7f       	andi	r24, 0xFD	; 253
    1626:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC00);
    1628:	a5 e5       	ldi	r26, 0x55	; 85
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e5       	ldi	r30, 0x55	; 85
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	8c 93       	st	X, r24
    1636:	0e c0       	rjmp	.+28     	; 0x1654 <INT_voidEnable+0xf8>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC00);
    1638:	a5 e5       	ldi	r26, 0x55	; 85
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e5       	ldi	r30, 0x55	; 85
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8e 7f       	andi	r24, 0xFE	; 254
    1644:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    1646:	a5 e5       	ldi	r26, 0x55	; 85
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e5       	ldi	r30, 0x55	; 85
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8d 7f       	andi	r24, 0xFD	; 253
    1652:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 0 */
			SET_BIT(GICR, INT0);
    1654:	ab e5       	ldi	r26, 0x5B	; 91
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	eb e5       	ldi	r30, 0x5B	; 91
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 64       	ori	r24, 0x40	; 64
    1660:	8c 93       	st	X, r24
    1662:	87 c0       	rjmp	.+270    	; 0x1772 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	3e 83       	std	Y+6, r19	; 0x06
    166c:	2d 83       	std	Y+5, r18	; 0x05
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	91 05       	cpc	r25, r1
    1676:	21 f1       	breq	.+72     	; 0x16c0 <INT_voidEnable+0x164>
    1678:	2d 81       	ldd	r18, Y+5	; 0x05
    167a:	3e 81       	ldd	r19, Y+6	; 0x06
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <INT_voidEnable+0x130>
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	61 f0       	breq	.+24     	; 0x16a2 <INT_voidEnable+0x146>
    168a:	46 c0       	rjmp	.+140    	; 0x1718 <INT_voidEnable+0x1bc>
    168c:	2d 81       	ldd	r18, Y+5	; 0x05
    168e:	3e 81       	ldd	r19, Y+6	; 0x06
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	21 f1       	breq	.+72     	; 0x16de <INT_voidEnable+0x182>
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	71 f1       	breq	.+92     	; 0x16fc <INT_voidEnable+0x1a0>
    16a0:	3b c0       	rjmp	.+118    	; 0x1718 <INT_voidEnable+0x1bc>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC10);
    16a2:	a5 e5       	ldi	r26, 0x55	; 85
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e5       	ldi	r30, 0x55	; 85
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8b 7f       	andi	r24, 0xFB	; 251
    16ae:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    16b0:	a5 e5       	ldi	r26, 0x55	; 85
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e5       	ldi	r30, 0x55	; 85
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 60       	ori	r24, 0x08	; 8
    16bc:	8c 93       	st	X, r24
    16be:	2c c0       	rjmp	.+88     	; 0x1718 <INT_voidEnable+0x1bc>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC10);
    16c0:	a5 e5       	ldi	r26, 0x55	; 85
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e5 e5       	ldi	r30, 0x55	; 85
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	84 60       	ori	r24, 0x04	; 4
    16cc:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    16ce:	a5 e5       	ldi	r26, 0x55	; 85
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e5       	ldi	r30, 0x55	; 85
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 60       	ori	r24, 0x08	; 8
    16da:	8c 93       	st	X, r24
    16dc:	1d c0       	rjmp	.+58     	; 0x1718 <INT_voidEnable+0x1bc>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC11);
    16de:	a5 e5       	ldi	r26, 0x55	; 85
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e5       	ldi	r30, 0x55	; 85
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	87 7f       	andi	r24, 0xF7	; 247
    16ea:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC10);
    16ec:	a5 e5       	ldi	r26, 0x55	; 85
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e5 e5       	ldi	r30, 0x55	; 85
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	84 60       	ori	r24, 0x04	; 4
    16f8:	8c 93       	st	X, r24
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <INT_voidEnable+0x1bc>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC10);
    16fc:	a5 e5       	ldi	r26, 0x55	; 85
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e5       	ldi	r30, 0x55	; 85
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8b 7f       	andi	r24, 0xFB	; 251
    1708:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    170a:	a5 e5       	ldi	r26, 0x55	; 85
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e5       	ldi	r30, 0x55	; 85
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 1 */
			SET_BIT(GICR, INT1);
    1718:	ab e5       	ldi	r26, 0x5B	; 91
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	eb e5       	ldi	r30, 0x5B	; 91
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8c 93       	st	X, r24
    1726:	25 c0       	rjmp	.+74     	; 0x1772 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3c 83       	std	Y+4, r19	; 0x04
    1730:	2b 83       	std	Y+3, r18	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	31 f0       	breq	.+12     	; 0x1746 <INT_voidEnable+0x1ea>
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	3c 81       	ldd	r19, Y+4	; 0x04
    173e:	21 30       	cpi	r18, 0x01	; 1
    1740:	31 05       	cpc	r19, r1
    1742:	49 f0       	breq	.+18     	; 0x1756 <INT_voidEnable+0x1fa>
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <INT_voidEnable+0x208>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCSR, ISC2);
    1746:	a4 e5       	ldi	r26, 0x54	; 84
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e4 e5       	ldi	r30, 0x54	; 84
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8f 7b       	andi	r24, 0xBF	; 191
    1752:	8c 93       	st	X, r24
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <INT_voidEnable+0x208>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCSR, ISC2);
    1756:	a4 e5       	ldi	r26, 0x54	; 84
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e4 e5       	ldi	r30, 0x54	; 84
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 64       	ori	r24, 0x40	; 64
    1762:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 2 */
			SET_BIT(GICR, INT2);
    1764:	ab e5       	ldi	r26, 0x5B	; 91
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e5       	ldi	r30, 0x5B	; 91
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 62       	ori	r24, 0x20	; 32
    1770:	8c 93       	st	X, r24
			break;
	}

}
    1772:	2a 96       	adiw	r28, 0x0a	; 10
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <INT_voidDisable>:



void INT_voidDisable(u8 Copy_u8INTINdex){
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <INT_voidDisable+0x6>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8INTINdex) {
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3b 83       	std	Y+3, r19	; 0x03
    179a:	2a 83       	std	Y+2, r18	; 0x02
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	9b 81       	ldd	r25, Y+3	; 0x03
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	89 f0       	breq	.+34     	; 0x17c8 <INT_voidDisable+0x44>
    17a6:	2a 81       	ldd	r18, Y+2	; 0x02
    17a8:	3b 81       	ldd	r19, Y+3	; 0x03
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	a1 f0       	breq	.+40     	; 0x17d8 <INT_voidDisable+0x54>
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	b9 f4       	brne	.+46     	; 0x17e6 <INT_voidDisable+0x62>
		case INT_INT0:
			CLR_BIT(GICR, INT0);
    17b8:	ab e5       	ldi	r26, 0x5B	; 91
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e5       	ldi	r30, 0x5B	; 91
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 7b       	andi	r24, 0xBF	; 191
    17c4:	8c 93       	st	X, r24
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <INT_voidDisable+0x62>
			break;
		case INT_INT1:
			CLR_BIT(GICR, INT1);
    17c8:	ab e5       	ldi	r26, 0x5B	; 91
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	eb e5       	ldi	r30, 0x5B	; 91
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8f 77       	andi	r24, 0x7F	; 127
    17d4:	8c 93       	st	X, r24
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <INT_voidDisable+0x62>
			break;
		case INT_INT2:
			CLR_BIT(GICR, INT2);
    17d8:	ab e5       	ldi	r26, 0x5B	; 91
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	eb e5       	ldi	r30, 0x5B	; 91
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 7d       	andi	r24, 0xDF	; 223
    17e4:	8c 93       	st	X, r24
			break;
	}

}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <ICU_voidInit>:


void (*ICU_pf) (void);


void ICU_voidInit (void){
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62

	/* Select Timer1 Normal Mode */
	CLR_BIT(TCCR1A, WGM10);
    17fa:	af e4       	ldi	r26, 0x4F	; 79
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ef e4       	ldi	r30, 0x4F	; 79
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8e 7f       	andi	r24, 0xFE	; 254
    1806:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    1808:	af e4       	ldi	r26, 0x4F	; 79
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ef e4       	ldi	r30, 0x4F	; 79
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8d 7f       	andi	r24, 0xFD	; 253
    1814:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    1816:	ae e4       	ldi	r26, 0x4E	; 78
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ee e4       	ldi	r30, 0x4E	; 78
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8f 7e       	andi	r24, 0xEF	; 239
    1830:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 7f       	andi	r24, 0xF8	; 248
    183e:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    1840:	ae e4       	ldi	r26, 0x4E	; 78
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ee e4       	ldi	r30, 0x4E	; 78
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24

	/* enable interrupt */
	SET_BIT(TIMSK, TICIE1);
    184e:	a9 e5       	ldi	r26, 0x59	; 89
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e9 e5       	ldi	r30, 0x59	; 89
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 62       	ori	r24, 0x20	; 32
    185a:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	SET_BIT(TCCR1B, ICES1);
    185c:	ae e4       	ldi	r26, 0x4E	; 78
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ee e4       	ldi	r30, 0x4E	; 78
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 64       	ori	r24, 0x40	; 64
    1868:	8c 93       	st	X, r24

}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <ICU_voidChangeTrigger+0x6>
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8Trigger) {
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3b 83       	std	Y+3, r19	; 0x03
    1886:	2a 83       	std	Y+2, r18	; 0x02
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	31 f0       	breq	.+12     	; 0x189c <ICU_voidChangeTrigger+0x2c>
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    1894:	21 30       	cpi	r18, 0x01	; 1
    1896:	31 05       	cpc	r19, r1
    1898:	49 f0       	breq	.+18     	; 0x18ac <ICU_voidChangeTrigger+0x3c>
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1);	break;
    189c:	ae e4       	ldi	r26, 0x4E	; 78
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ee e4       	ldi	r30, 0x4E	; 78
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8f 7b       	andi	r24, 0xBF	; 191
    18a8:	8c 93       	st	X, r24
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  SET_BIT(TCCR1B, ICES1);	break;
    18ac:	ae e4       	ldi	r26, 0x4E	; 78
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ee e4       	ldi	r30, 0x4E	; 78
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	80 64       	ori	r24, 0x40	; 64
    18b8:	8c 93       	st	X, r24
	}

}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(void (*Copy_pf) (void)){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <ICU_voidSetCallback+0x6>
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01

	ICU_pf = Copy_pf;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	90 93 05 02 	sts	0x0205, r25
    18dc:	80 93 04 02 	sts	0x0204, r24

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    18f2:	e6 e4       	ldi	r30, 0x46	; 70
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	/* disable interrupt */
	CLR_BIT(TIMSK, TICIE1);
    1908:	a9 e5       	ldi	r26, 0x59	; 89
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e9 e5       	ldi	r30, 0x59	; 89
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8f 7d       	andi	r24, 0xDF	; 223
    1914:	8c 93       	st	X, r24

}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <__vector_6>:


ISR(TIMER1_CAPT_vect){
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62

	ICU_pf();
    1946:	e0 91 04 02 	lds	r30, 0x0204
    194a:	f0 91 05 02 	lds	r31, 0x0205
    194e:	09 95       	icall

}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <TWI_voidMasterInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/io.h>
#include "I2C.h"

void TWI_voidMasterInit			(void){
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62

	/* Set prescaler value ==> 1 */
	CLR_BIT(TWSR, TWPS0);
    197e:	a1 e2       	ldi	r26, 0x21	; 33
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e1 e2       	ldi	r30, 0x21	; 33
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWPS1);
    198c:	a1 e2       	ldi	r26, 0x21	; 33
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e1 e2       	ldi	r30, 0x21	; 33
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8d 7f       	andi	r24, 0xFD	; 253
    1998:	8c 93       	st	X, r24

	/* frequency ==> 200 KHZ  >>> from the equation ==> 12 */
	TWBR = 12;
    199a:	e0 e2       	ldi	r30, 0x20	; 32
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8c e0       	ldi	r24, 0x0C	; 12
    19a0:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	84 60       	ori	r24, 0x04	; 4
    19bc:	8c 93       	st	X, r24

}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <TWI_voidSlaveInit>:


void TWI_voidSlaveInit			(u8 Copy_u8Address){
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01

	/* set slave address >> Reg address */
	TWAR = Copy_u8Address<<1;
    19d0:	e2 e2       	ldi	r30, 0x22	; 34
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	88 0f       	add	r24, r24
    19d8:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    19da:	a6 e5       	ldi	r26, 0x56	; 86
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e6 e5       	ldi	r30, 0x56	; 86
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 64       	ori	r24, 0x40	; 64
    19e6:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    19e8:	a6 e5       	ldi	r26, 0x56	; 86
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e6 e5       	ldi	r30, 0x56	; 86
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	84 60       	ori	r24, 0x04	; 4
    19f4:	8c 93       	st	X, r24

}
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <TWI_voidStartCondition>:


void TWI_voidStartCondition		(void){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1a06:	e6 e5       	ldi	r30, 0x56	; 86
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	84 ea       	ldi	r24, 0xA4	; 164
    1a0c:	80 83       	st	Z, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a0e:	e6 e5       	ldi	r30, 0x56	; 86
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 23       	and	r24, r24
    1a16:	dc f7       	brge	.-10     	; 0x1a0e <TWI_voidStartCondition+0x10>

}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <TWI_voidStopCondition>:


void TWI_voidStopCondition		(void){
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	SET_BIT(TWCR, TWSTO);
    1a26:	a6 e5       	ldi	r26, 0x56	; 86
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e6 e5       	ldi	r30, 0x56	; 86
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 61       	ori	r24, 0x10	; 16
    1a32:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);
    1a34:	a6 e5       	ldi	r26, 0x56	; 86
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e6 e5       	ldi	r30, 0x56	; 86
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	8c 93       	st	X, r24
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <TWI_voidSlaveAddressWrite>:


void TWI_voidSlaveAddressWrite	(u8 Copy_u8SlaveAddress){
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1a54:	e3 e2       	ldi	r30, 0x23	; 35
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	88 0f       	add	r24, r24
    1a5c:	80 83       	st	Z, r24
	CLR_BIT(TWDR, 0);
    1a5e:	a3 e2       	ldi	r26, 0x23	; 35
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e3 e2       	ldi	r30, 0x23	; 35
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1a6c:	a6 e5       	ldi	r26, 0x56	; 86
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e6 e5       	ldi	r30, 0x56	; 86
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 7d       	andi	r24, 0xDF	; 223
    1a78:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a7a:	a6 e5       	ldi	r26, 0x56	; 86
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e6 e5       	ldi	r30, 0x56	; 86
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 68       	ori	r24, 0x80	; 128
    1a86:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a88:	e6 e5       	ldi	r30, 0x56	; 86
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	dc f7       	brge	.-10     	; 0x1a88 <TWI_voidSlaveAddressWrite+0x40>

}
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <TWI_voidSlaveAddressRead>:


void TWI_voidSlaveAddressRead	(u8 Copy_u8SlaveAddress){
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1aa6:	e3 e2       	ldi	r30, 0x23	; 35
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	88 0f       	add	r24, r24
    1aae:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0);
    1ab0:	a3 e2       	ldi	r26, 0x23	; 35
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e3 e2       	ldi	r30, 0x23	; 35
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1abe:	a6 e5       	ldi	r26, 0x56	; 86
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e6 e5       	ldi	r30, 0x56	; 86
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 7d       	andi	r24, 0xDF	; 223
    1aca:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1acc:	a6 e5       	ldi	r26, 0x56	; 86
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1ada:	e6 e5       	ldi	r30, 0x56	; 86
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 23       	and	r24, r24
    1ae2:	dc f7       	brge	.-10     	; 0x1ada <TWI_voidSlaveAddressRead+0x40>


}
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <TWI_voidMasterSendData>:


void TWI_voidMasterSendData 	(u8 Copy_u8Data){
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8Data;
    1af8:	e3 e2       	ldi	r30, 0x23	; 35
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	80 83       	st	Z, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1b00:	a6 e5       	ldi	r26, 0x56	; 86
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e6 e5       	ldi	r30, 0x56	; 86
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1b0e:	e6 e5       	ldi	r30, 0x56	; 86
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 23       	and	r24, r24
    1b16:	dc f7       	brge	.-10     	; 0x1b0e <TWI_voidMasterSendData+0x22>

}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TWI_u8MasterReceiveData>:


u8	 TWI_u8MasterReceiveData	(void){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1b28:	a6 e5       	ldi	r26, 0x56	; 86
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e5       	ldi	r30, 0x56	; 86
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1b36:	e6 e5       	ldi	r30, 0x56	; 86
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 23       	and	r24, r24
    1b3e:	dc f7       	brge	.-10     	; 0x1b36 <TWI_u8MasterReceiveData+0x16>

	return TWDR;
    1b40:	e3 e2       	ldi	r30, 0x23	; 35
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z

}
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <TWI_u8SlaveReceiveData>:


u8	 TWI_u8SlaveReceiveData		(void){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62

	while((TWSR & 0xF8) != 0x60);
    1b54:	e1 e2       	ldi	r30, 0x21	; 33
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	88 7f       	andi	r24, 0xF8	; 248
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	80 36       	cpi	r24, 0x60	; 96
    1b64:	91 05       	cpc	r25, r1
    1b66:	b1 f7       	brne	.-20     	; 0x1b54 <TWI_u8SlaveReceiveData+0x8>

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1b68:	a6 e5       	ldi	r26, 0x56	; 86
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e6 e5       	ldi	r30, 0x56	; 86
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 68       	ori	r24, 0x80	; 128
    1b74:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1b76:	e6 e5       	ldi	r30, 0x56	; 86
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 23       	and	r24, r24
    1b7e:	dc f7       	brge	.-10     	; 0x1b76 <TWI_u8SlaveReceiveData+0x2a>

	return TWDR;
    1b80:	e3 e2       	ldi	r30, 0x23	; 35
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z

}
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <DIO_voidSetPortDirection>:
#include "../../LIB/STD_types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <DIO_voidSetPortDirection+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <DIO_voidSetPortDirection+0x8>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	3c 83       	std	Y+4, r19	; 0x04
    1ba4:	2b 83       	std	Y+3, r18	; 0x03
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	91 05       	cpc	r25, r1
    1bae:	d1 f0       	breq	.+52     	; 0x1be4 <DIO_voidSetPortDirection+0x58>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <DIO_voidSetPortDirection+0x38>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	61 f0       	breq	.+24     	; 0x1bda <DIO_voidSetPortDirection+0x4e>
    1bc2:	1e c0       	rjmp	.+60     	; 0x1c00 <DIO_voidSetPortDirection+0x74>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	81 f0       	breq	.+32     	; 0x1bee <DIO_voidSetPortDirection+0x62>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	81 f0       	breq	.+32     	; 0x1bf8 <DIO_voidSetPortDirection+0x6c>
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTA:		DDRA = Copy_u8Direction;	break;
    1bda:	ea e3       	ldi	r30, 0x3A	; 58
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	80 83       	st	Z, r24
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:		DDRB = Copy_u8Direction;	break;
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	80 83       	st	Z, r24
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:		DDRC = Copy_u8Direction;	break;
    1bee:	e4 e3       	ldi	r30, 0x34	; 52
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	80 83       	st	Z, r24
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:		DDRD = Copy_u8Direction;	break;
    1bf8:	e1 e3       	ldi	r30, 0x31	; 49
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 83       	st	Z, r24
	}

}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <DIO_voidSetPortValue>:


void DIO_voidSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <DIO_voidSetPortValue+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <DIO_voidSetPortValue+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	d1 f0       	breq	.+52     	; 0x1c66 <DIO_voidSetPortValue+0x58>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <DIO_voidSetPortValue+0x38>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <DIO_voidSetPortValue+0x4e>
    1c44:	1e c0       	rjmp	.+60     	; 0x1c82 <DIO_voidSetPortValue+0x74>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <DIO_voidSetPortValue+0x62>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <DIO_voidSetPortValue+0x6c>
    1c5a:	13 c0       	rjmp	.+38     	; 0x1c82 <DIO_voidSetPortValue+0x74>
	case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 83       	st	Z, r24
    1c64:	0e c0       	rjmp	.+28     	; 0x1c82 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1c66:	e8 e3       	ldi	r30, 0x38	; 56
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 83       	st	Z, r24
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    1c7a:	e2 e3       	ldi	r30, 0x32	; 50
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	80 83       	st	Z, r24
	}
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	27 97       	sbiw	r28, 0x07	; 7
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	6a 83       	std	Y+2, r22	; 0x02
    1ca8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_OUTPUT){
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <DIO_voidSetPinDirection+0x22>
    1cb0:	6f c0       	rjmp	.+222    	; 0x1d90 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8Port){
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3f 83       	std	Y+7, r19	; 0x07
    1cba:	2e 83       	std	Y+6, r18	; 0x06
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	49 f1       	breq	.+82     	; 0x1d18 <DIO_voidSetPinDirection+0x88>
    1cc6:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc8:	3f 81       	ldd	r19, Y+7	; 0x07
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	2c f4       	brge	.+10     	; 0x1cda <DIO_voidSetPinDirection+0x4a>
    1cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <DIO_voidSetPinDirection+0x60>
    1cd8:	ce c0       	rjmp	.+412    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
    1cda:	2e 81       	ldd	r18, Y+6	; 0x06
    1cdc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	71 f1       	breq	.+92     	; 0x1d40 <DIO_voidSetPinDirection+0xb0>
    1ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	e9 f1       	breq	.+122    	; 0x1d68 <DIO_voidSetPinDirection+0xd8>
    1cee:	c3 c0       	rjmp	.+390    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		SET_BIT(DDRA,Copy_u8Pin);		break;
    1cf0:	aa e3       	ldi	r26, 0x3A	; 58
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ea e3       	ldi	r30, 0x3A	; 58
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_voidSetPinDirection+0x7e>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_voidSetPinDirection+0x7a>
    1d12:	84 2b       	or	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	af c0       	rjmp	.+350    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		SET_BIT(DDRB,Copy_u8Pin);		break;
    1d18:	a7 e3       	ldi	r26, 0x37	; 55
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e7 e3       	ldi	r30, 0x37	; 55
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_voidSetPinDirection+0xa6>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_voidSetPinDirection+0xa2>
    1d3a:	84 2b       	or	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	9b c0       	rjmp	.+310    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		SET_BIT(DDRC,Copy_u8Pin);		break;
    1d40:	a4 e3       	ldi	r26, 0x34	; 52
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e4 e3       	ldi	r30, 0x34	; 52
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_voidSetPinDirection+0xce>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_voidSetPinDirection+0xca>
    1d62:	84 2b       	or	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	87 c0       	rjmp	.+270    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		SET_BIT(DDRD,Copy_u8Pin);		break;
    1d68:	a1 e3       	ldi	r26, 0x31	; 49
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e1 e3       	ldi	r30, 0x31	; 49
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <DIO_voidSetPinDirection+0xf6>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <DIO_voidSetPinDirection+0xf2>
    1d8a:	84 2b       	or	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	73 c0       	rjmp	.+230    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	3d 83       	std	Y+5, r19	; 0x05
    1d98:	2c 83       	std	Y+4, r18	; 0x04
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	59 f1       	breq	.+86     	; 0x1dfa <DIO_voidSetPinDirection+0x16a>
    1da4:	2c 81       	ldd	r18, Y+4	; 0x04
    1da6:	3d 81       	ldd	r19, Y+5	; 0x05
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <DIO_voidSetPinDirection+0x128>
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f0       	breq	.+26     	; 0x1dd0 <DIO_voidSetPinDirection+0x140>
    1db6:	5f c0       	rjmp	.+190    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
    1db8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dba:	3d 81       	ldd	r19, Y+5	; 0x05
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	89 f1       	breq	.+98     	; 0x1e24 <DIO_voidSetPinDirection+0x194>
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	91 05       	cpc	r25, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <DIO_voidSetPinDirection+0x13e>
    1dcc:	40 c0       	rjmp	.+128    	; 0x1e4e <DIO_voidSetPinDirection+0x1be>
    1dce:	53 c0       	rjmp	.+166    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		CLR_BIT(DDRA,Copy_u8Pin);		break;
    1dd0:	aa e3       	ldi	r26, 0x3A	; 58
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ea e3       	ldi	r30, 0x3A	; 58
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_voidSetPinDirection+0x15e>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_voidSetPinDirection+0x15a>
    1df2:	80 95       	com	r24
    1df4:	84 23       	and	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	3e c0       	rjmp	.+124    	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		CLR_BIT(DDRB,Copy_u8Pin);		break;
    1dfa:	a7 e3       	ldi	r26, 0x37	; 55
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e7 e3       	ldi	r30, 0x37	; 55
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_voidSetPinDirection+0x188>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_voidSetPinDirection+0x184>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	29 c0       	rjmp	.+82     	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		CLR_BIT(DDRC,Copy_u8Pin);		break;
    1e24:	a4 e3       	ldi	r26, 0x34	; 52
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e4 e3       	ldi	r30, 0x34	; 52
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_voidSetPinDirection+0x1b2>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_voidSetPinDirection+0x1ae>
    1e46:	80 95       	com	r24
    1e48:	84 23       	and	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		CLR_BIT(DDRD,Copy_u8Pin);		break;
    1e4e:	a1 e3       	ldi	r26, 0x31	; 49
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e1 e3       	ldi	r30, 0x31	; 49
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <DIO_voidSetPinDirection+0x1dc>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <DIO_voidSetPinDirection+0x1d8>
    1e70:	80 95       	com	r24
    1e72:	84 23       	and	r24, r20
    1e74:	8c 93       	st	X, r24
		}
	}
}
    1e76:	27 96       	adiw	r28, 0x07	; 7
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	27 97       	sbiw	r28, 0x07	; 7
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	6a 83       	std	Y+2, r22	; 0x02
    1ea0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH){
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <DIO_voidSetPinValue+0x22>
    1ea8:	6f c0       	rjmp	.+222    	; 0x1f88 <DIO_voidSetPinValue+0x100>
		switch(Copy_u8Port){
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3f 83       	std	Y+7, r19	; 0x07
    1eb2:	2e 83       	std	Y+6, r18	; 0x06
    1eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	49 f1       	breq	.+82     	; 0x1f10 <DIO_voidSetPinValue+0x88>
    1ebe:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <DIO_voidSetPinValue+0x4a>
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	61 f0       	breq	.+24     	; 0x1ee8 <DIO_voidSetPinValue+0x60>
    1ed0:	ce c0       	rjmp	.+412    	; 0x206e <DIO_voidSetPinValue+0x1e6>
    1ed2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	31 05       	cpc	r19, r1
    1eda:	71 f1       	breq	.+92     	; 0x1f38 <DIO_voidSetPinValue+0xb0>
    1edc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ede:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	e9 f1       	breq	.+122    	; 0x1f60 <DIO_voidSetPinValue+0xd8>
    1ee6:	c3 c0       	rjmp	.+390    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		SET_BIT(PORTA,Copy_u8Pin);		break;
    1ee8:	ab e3       	ldi	r26, 0x3B	; 59
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	eb e3       	ldi	r30, 0x3B	; 59
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_voidSetPinValue+0x7e>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_voidSetPinValue+0x7a>
    1f0a:	84 2b       	or	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	af c0       	rjmp	.+350    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		SET_BIT(PORTB,Copy_u8Pin);		break;
    1f10:	a8 e3       	ldi	r26, 0x38	; 56
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e8 e3       	ldi	r30, 0x38	; 56
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_voidSetPinValue+0xa6>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_voidSetPinValue+0xa2>
    1f32:	84 2b       	or	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	9b c0       	rjmp	.+310    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		SET_BIT(PORTC,Copy_u8Pin);		break;
    1f38:	a5 e3       	ldi	r26, 0x35	; 53
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e5 e3       	ldi	r30, 0x35	; 53
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_voidSetPinValue+0xce>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_voidSetPinValue+0xca>
    1f5a:	84 2b       	or	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	87 c0       	rjmp	.+270    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		SET_BIT(PORTD,Copy_u8Pin);		break;
    1f60:	a2 e3       	ldi	r26, 0x32	; 50
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e2 e3       	ldi	r30, 0x32	; 50
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <DIO_voidSetPinValue+0xf6>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <DIO_voidSetPinValue+0xf2>
    1f82:	84 2b       	or	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	73 c0       	rjmp	.+230    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	3d 83       	std	Y+5, r19	; 0x05
    1f90:	2c 83       	std	Y+4, r18	; 0x04
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	59 f1       	breq	.+86     	; 0x1ff2 <DIO_voidSetPinValue+0x16a>
    1f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <DIO_voidSetPinValue+0x128>
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f0       	breq	.+26     	; 0x1fc8 <DIO_voidSetPinValue+0x140>
    1fae:	5f c0       	rjmp	.+190    	; 0x206e <DIO_voidSetPinValue+0x1e6>
    1fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	89 f1       	breq	.+98     	; 0x201c <DIO_voidSetPinValue+0x194>
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <DIO_voidSetPinValue+0x13e>
    1fc4:	40 c0       	rjmp	.+128    	; 0x2046 <DIO_voidSetPinValue+0x1be>
    1fc6:	53 c0       	rjmp	.+166    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		CLR_BIT(PORTA,Copy_u8Pin);		break;
    1fc8:	ab e3       	ldi	r26, 0x3B	; 59
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	eb e3       	ldi	r30, 0x3B	; 59
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_voidSetPinValue+0x15e>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_voidSetPinValue+0x15a>
    1fea:	80 95       	com	r24
    1fec:	84 23       	and	r24, r20
    1fee:	8c 93       	st	X, r24
    1ff0:	3e c0       	rjmp	.+124    	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		CLR_BIT(PORTB,Copy_u8Pin);		break;
    1ff2:	a8 e3       	ldi	r26, 0x38	; 56
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e8 e3       	ldi	r30, 0x38	; 56
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_voidSetPinValue+0x188>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_voidSetPinValue+0x184>
    2014:	80 95       	com	r24
    2016:	84 23       	and	r24, r20
    2018:	8c 93       	st	X, r24
    201a:	29 c0       	rjmp	.+82     	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		CLR_BIT(PORTC,Copy_u8Pin);		break;
    201c:	a5 e3       	ldi	r26, 0x35	; 53
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e3       	ldi	r30, 0x35	; 53
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_voidSetPinValue+0x1b2>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_voidSetPinValue+0x1ae>
    203e:	80 95       	com	r24
    2040:	84 23       	and	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	14 c0       	rjmp	.+40     	; 0x206e <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		CLR_BIT(PORTD,Copy_u8Pin);		break;
    2046:	a2 e3       	ldi	r26, 0x32	; 50
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e2 e3       	ldi	r30, 0x32	; 50
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <DIO_voidSetPinValue+0x1dc>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <DIO_voidSetPinValue+0x1d8>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
		}
	}
}
    206e:	27 96       	adiw	r28, 0x07	; 7
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue       (u8 Copy_u8Port, u8 Copy_u8Pin){
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <DIO_u8GetPinValue+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <DIO_u8GetPinValue+0x8>
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
		switch(Copy_u8Port){
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3d 83       	std	Y+5, r19	; 0x05
    209a:	2c 83       	std	Y+4, r18	; 0x04
    209c:	4c 81       	ldd	r20, Y+4	; 0x04
    209e:	5d 81       	ldd	r21, Y+5	; 0x05
    20a0:	41 30       	cpi	r20, 0x01	; 1
    20a2:	51 05       	cpc	r21, r1
    20a4:	41 f1       	breq	.+80     	; 0x20f6 <DIO_u8GetPinValue+0x76>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	91 05       	cpc	r25, r1
    20ae:	34 f4       	brge	.+12     	; 0x20bc <DIO_u8GetPinValue+0x3c>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	21 15       	cp	r18, r1
    20b6:	31 05       	cpc	r19, r1
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <DIO_u8GetPinValue+0x52>
    20ba:	52 c0       	rjmp	.+164    	; 0x2160 <DIO_u8GetPinValue+0xe0>
    20bc:	4c 81       	ldd	r20, Y+4	; 0x04
    20be:	5d 81       	ldd	r21, Y+5	; 0x05
    20c0:	42 30       	cpi	r20, 0x02	; 2
    20c2:	51 05       	cpc	r21, r1
    20c4:	51 f1       	breq	.+84     	; 0x211a <DIO_u8GetPinValue+0x9a>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	b9 f1       	breq	.+110    	; 0x213e <DIO_u8GetPinValue+0xbe>
    20d0:	47 c0       	rjmp	.+142    	; 0x2160 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTA:		value = GET_BIT(PINA,Copy_u8Pin);		break;
    20d2:	e9 e3       	ldi	r30, 0x39	; 57
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a9 01       	movw	r20, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_u8GetPinValue+0x6a>
    20e6:	55 95       	asr	r21
    20e8:	47 95       	ror	r20
    20ea:	8a 95       	dec	r24
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_u8GetPinValue+0x66>
    20ee:	ca 01       	movw	r24, r20
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	35 c0       	rjmp	.+106    	; 0x2160 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB:		value = GET_BIT(PINB,Copy_u8Pin);		break;
    20f6:	e6 e3       	ldi	r30, 0x36	; 54
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_u8GetPinValue+0x8e>
    210a:	55 95       	asr	r21
    210c:	47 95       	ror	r20
    210e:	8a 95       	dec	r24
    2110:	e2 f7       	brpl	.-8      	; 0x210a <DIO_u8GetPinValue+0x8a>
    2112:	ca 01       	movw	r24, r20
    2114:	81 70       	andi	r24, 0x01	; 1
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	23 c0       	rjmp	.+70     	; 0x2160 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC:		value = GET_BIT(PINC,Copy_u8Pin);		break;
    211a:	e3 e3       	ldi	r30, 0x33	; 51
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a9 01       	movw	r20, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <DIO_u8GetPinValue+0xb2>
    212e:	55 95       	asr	r21
    2130:	47 95       	ror	r20
    2132:	8a 95       	dec	r24
    2134:	e2 f7       	brpl	.-8      	; 0x212e <DIO_u8GetPinValue+0xae>
    2136:	ca 01       	movw	r24, r20
    2138:	81 70       	andi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	11 c0       	rjmp	.+34     	; 0x2160 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD:		value = GET_BIT(PIND,Copy_u8Pin);		break;
    213e:	e0 e3       	ldi	r30, 0x30	; 48
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_u8GetPinValue+0xd6>
    2152:	55 95       	asr	r21
    2154:	47 95       	ror	r20
    2156:	8a 95       	dec	r24
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_u8GetPinValue+0xd2>
    215a:	ca 01       	movw	r24, r20
    215c:	81 70       	andi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
		}
	return value;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <ADC_voidInit>:
#define ADC_AREF		1
#define ADC_2_56_V		2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	89 83       	std	Y+1, r24	; 0x01

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
    217e:	a6 e2       	ldi	r26, 0x26	; 38
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e2       	ldi	r30, 0x26	; 38
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 68       	ori	r24, 0x80	; 128
    218a:	8c 93       	st	X, r24

	/* Select Vref */
#if ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
    218c:	a7 e2       	ldi	r26, 0x27	; 39
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e7 e2       	ldi	r30, 0x27	; 39
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	80 64       	ori	r24, 0x40	; 64
    2198:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    219a:	a7 e2       	ldi	r26, 0x27	; 39
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e7 e2       	ldi	r30, 0x27	; 39
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 77       	andi	r24, 0x7F	; 127
    21a6:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#endif

	/* select right adjust */
	CLR_BIT(ADMUX, ADLAR);
    21a8:	a7 e2       	ldi	r26, 0x27	; 39
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e7 e2       	ldi	r30, 0x27	; 39
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8f 7d       	andi	r24, 0xDF	; 223
    21b4:	8c 93       	st	X, r24

	/* prescaler */
	ADCSRA &= 0b11111000;
    21b6:	a6 e2       	ldi	r26, 0x26	; 38
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e6 e2       	ldi	r30, 0x26	; 38
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 7f       	andi	r24, 0xF8	; 248
    21c2:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler; // 0b00000110
    21c4:	a6 e2       	ldi	r26, 0x26	; 38
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e6 e2       	ldi	r30, 0x26	; 38
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	90 81       	ld	r25, Z
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	89 2b       	or	r24, r25
    21d2:	8c 93       	st	X, r24

}
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <ADC_u16GetDigitalValue>:


u16  ADC_u16GetDigitalValue(u8 Copy_u8Channel){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	0f 92       	push	r0
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	89 83       	std	Y+1, r24	; 0x01

	/* select Channel */
	ADMUX &= 0b11100000;
    21e8:	a7 e2       	ldi	r26, 0x27	; 39
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e7 e2       	ldi	r30, 0x27	; 39
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 7e       	andi	r24, 0xE0	; 224
    21f4:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    21f6:	a7 e2       	ldi	r26, 0x27	; 39
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e7 e2       	ldi	r30, 0x27	; 39
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	90 81       	ld	r25, Z
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	89 2b       	or	r24, r25
    2204:	8c 93       	st	X, r24

	/*  Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    2206:	a6 e2       	ldi	r26, 0x26	; 38
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e6 e2       	ldi	r30, 0x26	; 38
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 64       	ori	r24, 0x40	; 64
    2212:	8c 93       	st	X, r24

	/* wait flag = 1 */
	while(GET_BIT(ADCSRA, ADIF) == 0);
    2214:	e6 e2       	ldi	r30, 0x26	; 38
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	82 95       	swap	r24
    221c:	8f 70       	andi	r24, 0x0F	; 15
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	a9 f3       	breq	.-22     	; 0x2214 <ADC_u16GetDigitalValue+0x38>

	/* clear flag */
	CLR_BIT(ADCSRA, ADIF);
    222a:	a6 e2       	ldi	r26, 0x26	; 38
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e6 e2       	ldi	r30, 0x26	; 38
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	8c 93       	st	X, r24

	/* read ADC value */
	return ADC;
    2238:	e4 e2       	ldi	r30, 0x24	; 36
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01

}
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <ADC_voidDisable>:


void ADC_voidDisable(void){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62

	/* Disable ADC */
	CLR_BIT(ADCSRA, ADEN);
    2250:	a6 e2       	ldi	r26, 0x26	; 38
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e6 e2       	ldi	r30, 0x26	; 38
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8f 77       	andi	r24, 0x7F	; 127
    225c:	8c 93       	st	X, r24

}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <STP_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "STPMR.h"

u16 waiting = 500;
void STP_voidInit(void){
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT, STP_COIL_BLUE,   DIO_OUTPUT);
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_PINK,   DIO_OUTPUT);
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_YELLOW, DIO_OUTPUT);
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	62 e0       	ldi	r22, 0x02	; 2
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_ORANGE, DIO_OUTPUT);
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	63 e0       	ldi	r22, 0x03	; 3
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>

}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <STP_voidRotateCW>:


void STP_voidRotateCW(void){
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	e8 97       	sbiw	r28, 0x38	; 56
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	63 e0       	ldi	r22, 0x03	; 3
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	_delay_ms(waiting);
    22d6:	80 91 e2 01 	lds	r24, 0x01E2
    22da:	90 91 e3 01 	lds	r25, 0x01E3
    22de:	cc 01       	movw	r24, r24
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8d ab       	std	Y+53, r24	; 0x35
    22f2:	9e ab       	std	Y+54, r25	; 0x36
    22f4:	af ab       	std	Y+55, r26	; 0x37
    22f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6d a9       	ldd	r22, Y+53	; 0x35
    22fa:	7e a9       	ldd	r23, Y+54	; 0x36
    22fc:	8f a9       	ldd	r24, Y+55	; 0x37
    22fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	89 ab       	std	Y+49, r24	; 0x31
    2312:	9a ab       	std	Y+50, r25	; 0x32
    2314:	ab ab       	std	Y+51, r26	; 0x33
    2316:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <STP_voidRotateCW+0xa0>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	98 ab       	std	Y+48, r25	; 0x30
    2336:	8f a7       	std	Y+47, r24	; 0x2f
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <STP_voidRotateCW+0x11e>
	else if (__tmp > 65535)
    233a:	69 a9       	ldd	r22, Y+49	; 0x31
    233c:	7a a9       	ldd	r23, Y+50	; 0x32
    233e:	8b a9       	ldd	r24, Y+51	; 0x33
    2340:	9c a9       	ldd	r25, Y+52	; 0x34
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <STP_voidRotateCW+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6d a9       	ldd	r22, Y+53	; 0x35
    2354:	7e a9       	ldd	r23, Y+54	; 0x36
    2356:	8f a9       	ldd	r24, Y+55	; 0x37
    2358:	98 ad       	ldd	r25, Y+56	; 0x38
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	98 ab       	std	Y+48, r25	; 0x30
    2378:	8f a7       	std	Y+47, r24	; 0x2f
    237a:	0f c0       	rjmp	.+30     	; 0x239a <STP_voidRotateCW+0x100>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9e a7       	std	Y+46, r25	; 0x2e
    2382:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2384:	8d a5       	ldd	r24, Y+45	; 0x2d
    2386:	9e a5       	ldd	r25, Y+46	; 0x2e
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <STP_voidRotateCW+0xee>
    238c:	9e a7       	std	Y+46, r25	; 0x2e
    238e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8f a5       	ldd	r24, Y+47	; 0x2f
    2392:	98 a9       	ldd	r25, Y+48	; 0x30
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	98 ab       	std	Y+48, r25	; 0x30
    2398:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8f a5       	ldd	r24, Y+47	; 0x2f
    239c:	98 a9       	ldd	r25, Y+48	; 0x30
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <STP_voidRotateCW+0xe2>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <STP_voidRotateCW+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	69 a9       	ldd	r22, Y+49	; 0x31
    23a6:	7a a9       	ldd	r23, Y+50	; 0x32
    23a8:	8b a9       	ldd	r24, Y+51	; 0x33
    23aa:	9c a9       	ldd	r25, Y+52	; 0x34
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	98 ab       	std	Y+48, r25	; 0x30
    23b6:	8f a7       	std	Y+47, r24	; 0x2f
    23b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ba:	98 a9       	ldd	r25, Y+48	; 0x30
    23bc:	9c a7       	std	Y+44, r25	; 0x2c
    23be:	8b a7       	std	Y+43, r24	; 0x2b
    23c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <STP_voidRotateCW+0x12a>
    23c8:	9c a7       	std	Y+44, r25	; 0x2c
    23ca:	8b a7       	std	Y+43, r24	; 0x2b

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	63 e0       	ldi	r22, 0x03	; 3
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	_delay_ms(waiting);
    23f4:	80 91 e2 01 	lds	r24, 0x01E2
    23f8:	90 91 e3 01 	lds	r25, 0x01E3
    23fc:	cc 01       	movw	r24, r24
    23fe:	a0 e0       	ldi	r26, 0x00	; 0
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8f a3       	std	Y+39, r24	; 0x27
    2410:	98 a7       	std	Y+40, r25	; 0x28
    2412:	a9 a7       	std	Y+41, r26	; 0x29
    2414:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6f a1       	ldd	r22, Y+39	; 0x27
    2418:	78 a5       	ldd	r23, Y+40	; 0x28
    241a:	89 a5       	ldd	r24, Y+41	; 0x29
    241c:	9a a5       	ldd	r25, Y+42	; 0x2a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a ef       	ldi	r20, 0xFA	; 250
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8b a3       	std	Y+35, r24	; 0x23
    2430:	9c a3       	std	Y+36, r25	; 0x24
    2432:	ad a3       	std	Y+37, r26	; 0x25
    2434:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2436:	6b a1       	ldd	r22, Y+35	; 0x23
    2438:	7c a1       	ldd	r23, Y+36	; 0x24
    243a:	8d a1       	ldd	r24, Y+37	; 0x25
    243c:	9e a1       	ldd	r25, Y+38	; 0x26
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <STP_voidRotateCW+0x1be>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9a a3       	std	Y+34, r25	; 0x22
    2454:	89 a3       	std	Y+33, r24	; 0x21
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <STP_voidRotateCW+0x23c>
	else if (__tmp > 65535)
    2458:	6b a1       	ldd	r22, Y+35	; 0x23
    245a:	7c a1       	ldd	r23, Y+36	; 0x24
    245c:	8d a1       	ldd	r24, Y+37	; 0x25
    245e:	9e a1       	ldd	r25, Y+38	; 0x26
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <STP_voidRotateCW+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6f a1       	ldd	r22, Y+39	; 0x27
    2472:	78 a5       	ldd	r23, Y+40	; 0x28
    2474:	89 a5       	ldd	r24, Y+41	; 0x29
    2476:	9a a5       	ldd	r25, Y+42	; 0x2a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9a a3       	std	Y+34, r25	; 0x22
    2496:	89 a3       	std	Y+33, r24	; 0x21
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <STP_voidRotateCW+0x21e>
    249a:	88 ec       	ldi	r24, 0xC8	; 200
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	98 a3       	std	Y+32, r25	; 0x20
    24a0:	8f 8f       	std	Y+31, r24	; 0x1f
    24a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a4:	98 a1       	ldd	r25, Y+32	; 0x20
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <STP_voidRotateCW+0x20c>
    24aa:	98 a3       	std	Y+32, r25	; 0x20
    24ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	89 a1       	ldd	r24, Y+33	; 0x21
    24b0:	9a a1       	ldd	r25, Y+34	; 0x22
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9a a3       	std	Y+34, r25	; 0x22
    24b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ba:	9a a1       	ldd	r25, Y+34	; 0x22
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <STP_voidRotateCW+0x200>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <STP_voidRotateCW+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	89 a1       	ldd	r24, Y+33	; 0x21
    24d8:	9a a1       	ldd	r25, Y+34	; 0x22
    24da:	9e 8f       	std	Y+30, r25	; 0x1e
    24dc:	8d 8f       	std	Y+29, r24	; 0x1d
    24de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <STP_voidRotateCW+0x248>
    24e6:	9e 8f       	std	Y+30, r25	; 0x1e
    24e8:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	62 e0       	ldi	r22, 0x02	; 2
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	63 e0       	ldi	r22, 0x03	; 3
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	_delay_ms(waiting);
    2512:	80 91 e2 01 	lds	r24, 0x01E2
    2516:	90 91 e3 01 	lds	r25, 0x01E3
    251a:	cc 01       	movw	r24, r24
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	89 8f       	std	Y+25, r24	; 0x19
    252e:	9a 8f       	std	Y+26, r25	; 0x1a
    2530:	ab 8f       	std	Y+27, r26	; 0x1b
    2532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
    2550:	af 8b       	std	Y+23, r26	; 0x17
    2552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <STP_voidRotateCW+0x2dc>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <STP_voidRotateCW+0x35a>
	else if (__tmp > 65535)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <STP_voidRotateCW+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <STP_voidRotateCW+0x33c>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <STP_voidRotateCW+0x32a>
    25c8:	9a 8b       	std	Y+18, r25	; 0x12
    25ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <STP_voidRotateCW+0x31e>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <STP_voidRotateCW+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	98 89       	ldd	r25, Y+16	; 0x10
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <STP_voidRotateCW+0x366>
    2604:	98 8b       	std	Y+16, r25	; 0x10
    2606:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	63 e0       	ldi	r22, 0x03	; 3
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	_delay_ms(waiting);
    2630:	80 91 e2 01 	lds	r24, 0x01E2
    2634:	90 91 e3 01 	lds	r25, 0x01E3
    2638:	cc 01       	movw	r24, r24
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8b 87       	std	Y+11, r24	; 0x0b
    264c:	9c 87       	std	Y+12, r25	; 0x0c
    264e:	ad 87       	std	Y+13, r26	; 0x0d
    2650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	6b 85       	ldd	r22, Y+11	; 0x0b
    2654:	7c 85       	ldd	r23, Y+12	; 0x0c
    2656:	8d 85       	ldd	r24, Y+13	; 0x0d
    2658:	9e 85       	ldd	r25, Y+14	; 0x0e
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4a ef       	ldi	r20, 0xFA	; 250
    2660:	54 e4       	ldi	r21, 0x44	; 68
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	8f 83       	std	Y+7, r24	; 0x07
    266c:	98 87       	std	Y+8, r25	; 0x08
    266e:	a9 87       	std	Y+9, r26	; 0x09
    2670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	2c f4       	brge	.+10     	; 0x2694 <STP_voidRotateCW+0x3fa>
		__ticks = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9e 83       	std	Y+6, r25	; 0x06
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	3f c0       	rjmp	.+126    	; 0x2712 <STP_voidRotateCW+0x478>
	else if (__tmp > 65535)
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	4c f5       	brge	.+82     	; 0x26fe <STP_voidRotateCW+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	0f c0       	rjmp	.+30     	; 0x26f4 <STP_voidRotateCW+0x45a>
    26d6:	88 ec       	ldi	r24, 0xC8	; 200
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <STP_voidRotateCW+0x448>
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	69 f7       	brne	.-38     	; 0x26d6 <STP_voidRotateCW+0x43c>
    26fc:	14 c0       	rjmp	.+40     	; 0x2726 <STP_voidRotateCW+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <STP_voidRotateCW+0x484>
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01

}
    2726:	e8 96       	adiw	r28, 0x38	; 56
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <STP_voidRotateACW>:


void STP_voidRotateACW(void){
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	e8 97       	sbiw	r28, 0x38	; 56
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2756:	83 e0       	ldi	r24, 0x03	; 3
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2760:	83 e0       	ldi	r24, 0x03	; 3
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	63 e0       	ldi	r22, 0x03	; 3
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	aa ef       	ldi	r26, 0xFA	; 250
    277a:	b3 e4       	ldi	r27, 0x43	; 67
    277c:	8d ab       	std	Y+53, r24	; 0x35
    277e:	9e ab       	std	Y+54, r25	; 0x36
    2780:	af ab       	std	Y+55, r26	; 0x37
    2782:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	6d a9       	ldd	r22, Y+53	; 0x35
    2786:	7e a9       	ldd	r23, Y+54	; 0x36
    2788:	8f a9       	ldd	r24, Y+55	; 0x37
    278a:	98 ad       	ldd	r25, Y+56	; 0x38
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a ef       	ldi	r20, 0xFA	; 250
    2792:	54 e4       	ldi	r21, 0x44	; 68
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	89 ab       	std	Y+49, r24	; 0x31
    279e:	9a ab       	std	Y+50, r25	; 0x32
    27a0:	ab ab       	std	Y+51, r26	; 0x33
    27a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27a4:	69 a9       	ldd	r22, Y+49	; 0x31
    27a6:	7a a9       	ldd	r23, Y+50	; 0x32
    27a8:	8b a9       	ldd	r24, Y+51	; 0x33
    27aa:	9c a9       	ldd	r25, Y+52	; 0x34
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <STP_voidRotateACW+0x8e>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	98 ab       	std	Y+48, r25	; 0x30
    27c2:	8f a7       	std	Y+47, r24	; 0x2f
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <STP_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    27c6:	69 a9       	ldd	r22, Y+49	; 0x31
    27c8:	7a a9       	ldd	r23, Y+50	; 0x32
    27ca:	8b a9       	ldd	r24, Y+51	; 0x33
    27cc:	9c a9       	ldd	r25, Y+52	; 0x34
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	4c f5       	brge	.+82     	; 0x2830 <STP_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	6d a9       	ldd	r22, Y+53	; 0x35
    27e0:	7e a9       	ldd	r23, Y+54	; 0x36
    27e2:	8f a9       	ldd	r24, Y+55	; 0x37
    27e4:	98 ad       	ldd	r25, Y+56	; 0x38
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	98 ab       	std	Y+48, r25	; 0x30
    2804:	8f a7       	std	Y+47, r24	; 0x2f
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <STP_voidRotateACW+0xee>
    2808:	88 ec       	ldi	r24, 0xC8	; 200
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e a7       	std	Y+46, r25	; 0x2e
    280e:	8d a7       	std	Y+45, r24	; 0x2d
    2810:	8d a5       	ldd	r24, Y+45	; 0x2d
    2812:	9e a5       	ldd	r25, Y+46	; 0x2e
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <STP_voidRotateACW+0xdc>
    2818:	9e a7       	std	Y+46, r25	; 0x2e
    281a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	8f a5       	ldd	r24, Y+47	; 0x2f
    281e:	98 a9       	ldd	r25, Y+48	; 0x30
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	98 ab       	std	Y+48, r25	; 0x30
    2824:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	8f a5       	ldd	r24, Y+47	; 0x2f
    2828:	98 a9       	ldd	r25, Y+48	; 0x30
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <STP_voidRotateACW+0xd0>
    282e:	14 c0       	rjmp	.+40     	; 0x2858 <STP_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	69 a9       	ldd	r22, Y+49	; 0x31
    2832:	7a a9       	ldd	r23, Y+50	; 0x32
    2834:	8b a9       	ldd	r24, Y+51	; 0x33
    2836:	9c a9       	ldd	r25, Y+52	; 0x34
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	98 ab       	std	Y+48, r25	; 0x30
    2842:	8f a7       	std	Y+47, r24	; 0x2f
    2844:	8f a5       	ldd	r24, Y+47	; 0x2f
    2846:	98 a9       	ldd	r25, Y+48	; 0x30
    2848:	9c a7       	std	Y+44, r25	; 0x2c
    284a:	8b a7       	std	Y+43, r24	; 0x2b
    284c:	8b a5       	ldd	r24, Y+43	; 0x2b
    284e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <STP_voidRotateACW+0x118>
    2854:	9c a7       	std	Y+44, r25	; 0x2c
    2856:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2858:	83 e0       	ldi	r24, 0x03	; 3
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	62 e0       	ldi	r22, 0x02	; 2
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	63 e0       	ldi	r22, 0x03	; 3
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	aa ef       	ldi	r26, 0xFA	; 250
    2886:	b3 e4       	ldi	r27, 0x43	; 67
    2888:	8f a3       	std	Y+39, r24	; 0x27
    288a:	98 a7       	std	Y+40, r25	; 0x28
    288c:	a9 a7       	std	Y+41, r26	; 0x29
    288e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6f a1       	ldd	r22, Y+39	; 0x27
    2892:	78 a5       	ldd	r23, Y+40	; 0x28
    2894:	89 a5       	ldd	r24, Y+41	; 0x29
    2896:	9a a5       	ldd	r25, Y+42	; 0x2a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8b a3       	std	Y+35, r24	; 0x23
    28aa:	9c a3       	std	Y+36, r25	; 0x24
    28ac:	ad a3       	std	Y+37, r26	; 0x25
    28ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b0:	6b a1       	ldd	r22, Y+35	; 0x23
    28b2:	7c a1       	ldd	r23, Y+36	; 0x24
    28b4:	8d a1       	ldd	r24, Y+37	; 0x25
    28b6:	9e a1       	ldd	r25, Y+38	; 0x26
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <STP_voidRotateACW+0x19a>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <STP_voidRotateACW+0x218>
	else if (__tmp > 65535)
    28d2:	6b a1       	ldd	r22, Y+35	; 0x23
    28d4:	7c a1       	ldd	r23, Y+36	; 0x24
    28d6:	8d a1       	ldd	r24, Y+37	; 0x25
    28d8:	9e a1       	ldd	r25, Y+38	; 0x26
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <STP_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6f a1       	ldd	r22, Y+39	; 0x27
    28ec:	78 a5       	ldd	r23, Y+40	; 0x28
    28ee:	89 a5       	ldd	r24, Y+41	; 0x29
    28f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9a a3       	std	Y+34, r25	; 0x22
    2910:	89 a3       	std	Y+33, r24	; 0x21
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <STP_voidRotateACW+0x1fa>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	98 a3       	std	Y+32, r25	; 0x20
    291a:	8f 8f       	std	Y+31, r24	; 0x1f
    291c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    291e:	98 a1       	ldd	r25, Y+32	; 0x20
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <STP_voidRotateACW+0x1e8>
    2924:	98 a3       	std	Y+32, r25	; 0x20
    2926:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	89 a1       	ldd	r24, Y+33	; 0x21
    292a:	9a a1       	ldd	r25, Y+34	; 0x22
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9a a3       	std	Y+34, r25	; 0x22
    2930:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	89 a1       	ldd	r24, Y+33	; 0x21
    2934:	9a a1       	ldd	r25, Y+34	; 0x22
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <STP_voidRotateACW+0x1dc>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <STP_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6b a1       	ldd	r22, Y+35	; 0x23
    293e:	7c a1       	ldd	r23, Y+36	; 0x24
    2940:	8d a1       	ldd	r24, Y+37	; 0x25
    2942:	9e a1       	ldd	r25, Y+38	; 0x26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9a a3       	std	Y+34, r25	; 0x22
    294e:	89 a3       	std	Y+33, r24	; 0x21
    2950:	89 a1       	ldd	r24, Y+33	; 0x21
    2952:	9a a1       	ldd	r25, Y+34	; 0x22
    2954:	9e 8f       	std	Y+30, r25	; 0x1e
    2956:	8d 8f       	std	Y+29, r24	; 0x1d
    2958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <STP_voidRotateACW+0x224>
    2960:	9e 8f       	std	Y+30, r25	; 0x1e
    2962:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2978:	83 e0       	ldi	r24, 0x03	; 3
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	63 e0       	ldi	r22, 0x03	; 3
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	aa ef       	ldi	r26, 0xFA	; 250
    2992:	b3 e4       	ldi	r27, 0x43	; 67
    2994:	89 8f       	std	Y+25, r24	; 0x19
    2996:	9a 8f       	std	Y+26, r25	; 0x1a
    2998:	ab 8f       	std	Y+27, r26	; 0x1b
    299a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	69 8d       	ldd	r22, Y+25	; 0x19
    299e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8d 8b       	std	Y+21, r24	; 0x15
    29b6:	9e 8b       	std	Y+22, r25	; 0x16
    29b8:	af 8b       	std	Y+23, r26	; 0x17
    29ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29bc:	6d 89       	ldd	r22, Y+21	; 0x15
    29be:	7e 89       	ldd	r23, Y+22	; 0x16
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	98 8d       	ldd	r25, Y+24	; 0x18
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <STP_voidRotateACW+0x2a6>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9c 8b       	std	Y+20, r25	; 0x14
    29da:	8b 8b       	std	Y+19, r24	; 0x13
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <STP_voidRotateACW+0x324>
	else if (__tmp > 65535)
    29de:	6d 89       	ldd	r22, Y+21	; 0x15
    29e0:	7e 89       	ldd	r23, Y+22	; 0x16
    29e2:	8f 89       	ldd	r24, Y+23	; 0x17
    29e4:	98 8d       	ldd	r25, Y+24	; 0x18
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <STP_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	69 8d       	ldd	r22, Y+25	; 0x19
    29f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <STP_voidRotateACW+0x306>
    2a20:	88 ec       	ldi	r24, 0xC8	; 200
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9a 8b       	std	Y+18, r25	; 0x12
    2a26:	89 8b       	std	Y+17, r24	; 0x11
    2a28:	89 89       	ldd	r24, Y+17	; 0x11
    2a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <STP_voidRotateACW+0x2f4>
    2a30:	9a 8b       	std	Y+18, r25	; 0x12
    2a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	8b 89       	ldd	r24, Y+19	; 0x13
    2a36:	9c 89       	ldd	r25, Y+20	; 0x14
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a40:	9c 89       	ldd	r25, Y+20	; 0x14
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <STP_voidRotateACW+0x2e8>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <STP_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9c 8b       	std	Y+20, r25	; 0x14
    2a5a:	8b 8b       	std	Y+19, r24	; 0x13
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a60:	98 8b       	std	Y+16, r25	; 0x10
    2a62:	8f 87       	std	Y+15, r24	; 0x0f
    2a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a66:	98 89       	ldd	r25, Y+16	; 0x10
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <STP_voidRotateACW+0x330>
    2a6c:	98 8b       	std	Y+16, r25	; 0x10
    2a6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	63 e0       	ldi	r22, 0x03	; 3
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	aa ef       	ldi	r26, 0xFA	; 250
    2a9e:	b3 e4       	ldi	r27, 0x43	; 67
    2aa0:	8b 87       	std	Y+11, r24	; 0x0b
    2aa2:	9c 87       	std	Y+12, r25	; 0x0c
    2aa4:	ad 87       	std	Y+13, r26	; 0x0d
    2aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a ef       	ldi	r20, 0xFA	; 250
    2ab6:	54 e4       	ldi	r21, 0x44	; 68
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	a9 87       	std	Y+9, r26	; 0x09
    2ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <STP_voidRotateACW+0x3b2>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	3f c0       	rjmp	.+126    	; 0x2b68 <STP_voidRotateACW+0x430>
	else if (__tmp > 65535)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	4c f5       	brge	.+82     	; 0x2b54 <STP_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <STP_voidRotateACW+0x412>
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <STP_voidRotateACW+0x400>
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	69 f7       	brne	.-38     	; 0x2b2c <STP_voidRotateACW+0x3f4>
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <STP_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <STP_voidRotateACW+0x43c>
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    2b7c:	e8 96       	adiw	r28, 0x38	; 56
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <LCD_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	cc 54       	subi	r28, 0x4C	; 76
    2b9c:	d0 40       	sbci	r29, 0x00	; 0
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	6f ef       	ldi	r22, 0xFF	; 255
    2bac:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2bba:	83 e0       	ldi	r24, 0x03	; 3
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    2bc4:	83 e0       	ldi	r24, 0x03	; 3
    2bc6:	62 e0       	ldi	r22, 0x02	; 2
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 5b       	subi	r30, 0xB7	; 183
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	ac e0       	ldi	r26, 0x0C	; 12
    2bda:	b2 e4       	ldi	r27, 0x42	; 66
    2bdc:	80 83       	st	Z, r24
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	a2 83       	std	Z+2, r26	; 0x02
    2be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	8e 01       	movw	r16, r28
    2be6:	0b 5b       	subi	r16, 0xBB	; 187
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5b       	subi	r30, 0xB7	; 183
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a ef       	ldi	r20, 0xFA	; 250
    2bfe:	54 e4       	ldi	r21, 0x44	; 68
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	f8 01       	movw	r30, r16
    2c0a:	80 83       	st	Z, r24
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	a2 83       	std	Z+2, r26	; 0x02
    2c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c12:	fe 01       	movw	r30, r28
    2c14:	eb 5b       	subi	r30, 0xBB	; 187
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e8       	ldi	r20, 0x80	; 128
    2c26:	5f e3       	ldi	r21, 0x3F	; 63
    2c28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	44 f4       	brge	.+16     	; 0x2c40 <LCD_voidInit+0xb2>
		__ticks = 1;
    2c30:	fe 01       	movw	r30, r28
    2c32:	ed 5b       	subi	r30, 0xBD	; 189
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
    2c3e:	64 c0       	rjmp	.+200    	; 0x2d08 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    2c40:	fe 01       	movw	r30, r28
    2c42:	eb 5b       	subi	r30, 0xBB	; 187
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	0c f0       	brlt	.+2      	; 0x2c60 <LCD_voidInit+0xd2>
    2c5e:	43 c0       	rjmp	.+134    	; 0x2ce6 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	fe 01       	movw	r30, r28
    2c62:	e7 5b       	subi	r30, 0xB7	; 183
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8e 01       	movw	r16, r28
    2c80:	0d 5b       	subi	r16, 0xBD	; 189
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	f8 01       	movw	r30, r16
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
    2c96:	1f c0       	rjmp	.+62     	; 0x2cd6 <LCD_voidInit+0x148>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ef 5b       	subi	r30, 0xBF	; 191
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ef 5b       	subi	r30, 0xBF	; 191
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_voidInit+0x122>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 5b       	subi	r30, 0xBF	; 191
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	de 01       	movw	r26, r28
    2cc0:	ad 5b       	subi	r26, 0xBD	; 189
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ed 5b       	subi	r30, 0xBD	; 189
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	11 96       	adiw	r26, 0x01	; 1
    2cd2:	9c 93       	st	X, r25
    2cd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 5b       	subi	r30, 0xBD	; 189
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	d1 f6       	brne	.-76     	; 0x2c98 <LCD_voidInit+0x10a>
    2ce4:	24 c0       	rjmp	.+72     	; 0x2d2e <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	8e 01       	movw	r16, r28
    2ce8:	0d 5b       	subi	r16, 0xBD	; 189
    2cea:	1f 4f       	sbci	r17, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	eb 5b       	subi	r30, 0xBB	; 187
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	f8 01       	movw	r30, r16
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 5b       	subi	r30, 0xBD	; 189
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	fe 01       	movw	r30, r28
    2d14:	ff 96       	adiw	r30, 0x3f	; 63
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ff 96       	adiw	r30, 0x3f	; 63
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <LCD_voidInit+0x194>
    2d26:	fe 01       	movw	r30, r28
    2d28:	ff 96       	adiw	r30, 0x3f	; 63
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    2d2e:	88 e3       	ldi	r24, 0x38	; 56
    2d30:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	a8 e4       	ldi	r26, 0x48	; 72
    2d3a:	b2 e4       	ldi	r27, 0x42	; 66
    2d3c:	8b af       	std	Y+59, r24	; 0x3b
    2d3e:	9c af       	std	Y+60, r25	; 0x3c
    2d40:	ad af       	std	Y+61, r26	; 0x3d
    2d42:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d44:	6b ad       	ldd	r22, Y+59	; 0x3b
    2d46:	7c ad       	ldd	r23, Y+60	; 0x3c
    2d48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4c:	2b ea       	ldi	r18, 0xAB	; 171
    2d4e:	3a ea       	ldi	r19, 0xAA	; 170
    2d50:	4a e2       	ldi	r20, 0x2A	; 42
    2d52:	50 e4       	ldi	r21, 0x40	; 64
    2d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	8f ab       	std	Y+55, r24	; 0x37
    2d5e:	98 af       	std	Y+56, r25	; 0x38
    2d60:	a9 af       	std	Y+57, r26	; 0x39
    2d62:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2d64:	6f a9       	ldd	r22, Y+55	; 0x37
    2d66:	78 ad       	ldd	r23, Y+56	; 0x38
    2d68:	89 ad       	ldd	r24, Y+57	; 0x39
    2d6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e8       	ldi	r20, 0x80	; 128
    2d72:	5f e3       	ldi	r21, 0x3F	; 63
    2d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d78:	88 23       	and	r24, r24
    2d7a:	1c f4       	brge	.+6      	; 0x2d82 <LCD_voidInit+0x1f4>
		__ticks = 1;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	8e ab       	std	Y+54, r24	; 0x36
    2d80:	91 c0       	rjmp	.+290    	; 0x2ea4 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    2d82:	6f a9       	ldd	r22, Y+55	; 0x37
    2d84:	78 ad       	ldd	r23, Y+56	; 0x38
    2d86:	89 ad       	ldd	r24, Y+57	; 0x39
    2d88:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	53 e4       	ldi	r21, 0x43	; 67
    2d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	0c f0       	brlt	.+2      	; 0x2d9c <LCD_voidInit+0x20e>
    2d9a:	7b c0       	rjmp	.+246    	; 0x2e92 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2d9c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2d9e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2da0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	4a e7       	ldi	r20, 0x7A	; 122
    2daa:	54 e4       	ldi	r21, 0x44	; 68
    2dac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	8a ab       	std	Y+50, r24	; 0x32
    2db6:	9b ab       	std	Y+51, r25	; 0x33
    2db8:	ac ab       	std	Y+52, r26	; 0x34
    2dba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbc:	6a a9       	ldd	r22, Y+50	; 0x32
    2dbe:	7b a9       	ldd	r23, Y+51	; 0x33
    2dc0:	8c a9       	ldd	r24, Y+52	; 0x34
    2dc2:	9d a9       	ldd	r25, Y+53	; 0x35
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	4a ef       	ldi	r20, 0xFA	; 250
    2dca:	54 e4       	ldi	r21, 0x44	; 68
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	8e a7       	std	Y+46, r24	; 0x2e
    2dd6:	9f a7       	std	Y+47, r25	; 0x2f
    2dd8:	a8 ab       	std	Y+48, r26	; 0x30
    2dda:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2ddc:	6e a5       	ldd	r22, Y+46	; 0x2e
    2dde:	7f a5       	ldd	r23, Y+47	; 0x2f
    2de0:	88 a9       	ldd	r24, Y+48	; 0x30
    2de2:	99 a9       	ldd	r25, Y+49	; 0x31
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	2c f4       	brge	.+10     	; 0x2dfe <LCD_voidInit+0x270>
		__ticks = 1;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	9d a7       	std	Y+45, r25	; 0x2d
    2dfa:	8c a7       	std	Y+44, r24	; 0x2c
    2dfc:	3f c0       	rjmp	.+126    	; 0x2e7c <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    2dfe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2e00:	7f a5       	ldd	r23, Y+47	; 0x2f
    2e02:	88 a9       	ldd	r24, Y+48	; 0x30
    2e04:	99 a9       	ldd	r25, Y+49	; 0x31
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	3f ef       	ldi	r19, 0xFF	; 255
    2e0a:	4f e7       	ldi	r20, 0x7F	; 127
    2e0c:	57 e4       	ldi	r21, 0x47	; 71
    2e0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e12:	18 16       	cp	r1, r24
    2e14:	4c f5       	brge	.+82     	; 0x2e68 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e16:	6a a9       	ldd	r22, Y+50	; 0x32
    2e18:	7b a9       	ldd	r23, Y+51	; 0x33
    2e1a:	8c a9       	ldd	r24, Y+52	; 0x34
    2e1c:	9d a9       	ldd	r25, Y+53	; 0x35
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	9d a7       	std	Y+45, r25	; 0x2d
    2e3c:	8c a7       	std	Y+44, r24	; 0x2c
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <LCD_voidInit+0x2d0>
    2e40:	88 ec       	ldi	r24, 0xC8	; 200
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9b a7       	std	Y+43, r25	; 0x2b
    2e46:	8a a7       	std	Y+42, r24	; 0x2a
    2e48:	8a a5       	ldd	r24, Y+42	; 0x2a
    2e4a:	9b a5       	ldd	r25, Y+43	; 0x2b
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <LCD_voidInit+0x2be>
    2e50:	9b a7       	std	Y+43, r25	; 0x2b
    2e52:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e54:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e56:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	9d a7       	std	Y+45, r25	; 0x2d
    2e5c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e60:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	69 f7       	brne	.-38     	; 0x2e40 <LCD_voidInit+0x2b2>
    2e66:	24 c0       	rjmp	.+72     	; 0x2eb0 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e68:	6e a5       	ldd	r22, Y+46	; 0x2e
    2e6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2e6c:	88 a9       	ldd	r24, Y+48	; 0x30
    2e6e:	99 a9       	ldd	r25, Y+49	; 0x31
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9d a7       	std	Y+45, r25	; 0x2d
    2e7a:	8c a7       	std	Y+44, r24	; 0x2c
    2e7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e80:	99 a7       	std	Y+41, r25	; 0x29
    2e82:	88 a7       	std	Y+40, r24	; 0x28
    2e84:	88 a5       	ldd	r24, Y+40	; 0x28
    2e86:	99 a5       	ldd	r25, Y+41	; 0x29
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <LCD_voidInit+0x2fa>
    2e8c:	99 a7       	std	Y+41, r25	; 0x29
    2e8e:	88 a7       	std	Y+40, r24	; 0x28
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e92:	6f a9       	ldd	r22, Y+55	; 0x37
    2e94:	78 ad       	ldd	r23, Y+56	; 0x38
    2e96:	89 ad       	ldd	r24, Y+57	; 0x39
    2e98:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8e ab       	std	Y+54, r24	; 0x36
    2ea4:	8e a9       	ldd	r24, Y+54	; 0x36
    2ea6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea8:	8f a1       	ldd	r24, Y+39	; 0x27
    2eaa:	8a 95       	dec	r24
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_voidInit+0x31c>
    2eae:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    2eb0:	8f e0       	ldi	r24, 0x0F	; 15
    2eb2:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a8 e4       	ldi	r26, 0x48	; 72
    2ebc:	b2 e4       	ldi	r27, 0x42	; 66
    2ebe:	8b a3       	std	Y+35, r24	; 0x23
    2ec0:	9c a3       	std	Y+36, r25	; 0x24
    2ec2:	ad a3       	std	Y+37, r26	; 0x25
    2ec4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ec6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eca:	8d a1       	ldd	r24, Y+37	; 0x25
    2ecc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ece:	2b ea       	ldi	r18, 0xAB	; 171
    2ed0:	3a ea       	ldi	r19, 0xAA	; 170
    2ed2:	4a e2       	ldi	r20, 0x2A	; 42
    2ed4:	50 e4       	ldi	r21, 0x40	; 64
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee0:	98 a3       	std	Y+32, r25	; 0x20
    2ee2:	a9 a3       	std	Y+33, r26	; 0x21
    2ee4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ee6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ee8:	78 a1       	ldd	r23, Y+32	; 0x20
    2eea:	89 a1       	ldd	r24, Y+33	; 0x21
    2eec:	9a a1       	ldd	r25, Y+34	; 0x22
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	1c f4       	brge	.+6      	; 0x2f04 <LCD_voidInit+0x376>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	8e 8f       	std	Y+30, r24	; 0x1e
    2f02:	91 c0       	rjmp	.+290    	; 0x3026 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    2f04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f06:	78 a1       	ldd	r23, Y+32	; 0x20
    2f08:	89 a1       	ldd	r24, Y+33	; 0x21
    2f0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	53 e4       	ldi	r21, 0x43	; 67
    2f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <LCD_voidInit+0x390>
    2f1c:	7b c0       	rjmp	.+246    	; 0x3014 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f20:	7c a1       	ldd	r23, Y+36	; 0x24
    2f22:	8d a1       	ldd	r24, Y+37	; 0x25
    2f24:	9e a1       	ldd	r25, Y+38	; 0x26
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a e7       	ldi	r20, 0x7A	; 122
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8a 8f       	std	Y+26, r24	; 0x1a
    2f38:	9b 8f       	std	Y+27, r25	; 0x1b
    2f3a:	ac 8f       	std	Y+28, r26	; 0x1c
    2f3c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a ef       	ldi	r20, 0xFA	; 250
    2f4c:	54 e4       	ldi	r21, 0x44	; 68
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8e 8b       	std	Y+22, r24	; 0x16
    2f58:	9f 8b       	std	Y+23, r25	; 0x17
    2f5a:	a8 8f       	std	Y+24, r26	; 0x18
    2f5c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2f5e:	6e 89       	ldd	r22, Y+22	; 0x16
    2f60:	7f 89       	ldd	r23, Y+23	; 0x17
    2f62:	88 8d       	ldd	r24, Y+24	; 0x18
    2f64:	99 8d       	ldd	r25, Y+25	; 0x19
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <LCD_voidInit+0x3f2>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9d 8b       	std	Y+21, r25	; 0x15
    2f7c:	8c 8b       	std	Y+20, r24	; 0x14
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    2f80:	6e 89       	ldd	r22, Y+22	; 0x16
    2f82:	7f 89       	ldd	r23, Y+23	; 0x17
    2f84:	88 8d       	ldd	r24, Y+24	; 0x18
    2f86:	99 8d       	ldd	r25, Y+25	; 0x19
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f9a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9d 8b       	std	Y+21, r25	; 0x15
    2fbe:	8c 8b       	std	Y+20, r24	; 0x14
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <LCD_voidInit+0x452>
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9b 8b       	std	Y+19, r25	; 0x13
    2fc8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fca:	8a 89       	ldd	r24, Y+18	; 0x12
    2fcc:	9b 89       	ldd	r25, Y+19	; 0x13
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_voidInit+0x440>
    2fd2:	9b 8b       	std	Y+19, r25	; 0x13
    2fd4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8c 89       	ldd	r24, Y+20	; 0x14
    2fd8:	9d 89       	ldd	r25, Y+21	; 0x15
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9d 8b       	std	Y+21, r25	; 0x15
    2fde:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8c 89       	ldd	r24, Y+20	; 0x14
    2fe2:	9d 89       	ldd	r25, Y+21	; 0x15
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <LCD_voidInit+0x434>
    2fe8:	24 c0       	rjmp	.+72     	; 0x3032 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	6e 89       	ldd	r22, Y+22	; 0x16
    2fec:	7f 89       	ldd	r23, Y+23	; 0x17
    2fee:	88 8d       	ldd	r24, Y+24	; 0x18
    2ff0:	99 8d       	ldd	r25, Y+25	; 0x19
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9d 8b       	std	Y+21, r25	; 0x15
    2ffc:	8c 8b       	std	Y+20, r24	; 0x14
    2ffe:	8c 89       	ldd	r24, Y+20	; 0x14
    3000:	9d 89       	ldd	r25, Y+21	; 0x15
    3002:	99 8b       	std	Y+17, r25	; 0x11
    3004:	88 8b       	std	Y+16, r24	; 0x10
    3006:	88 89       	ldd	r24, Y+16	; 0x10
    3008:	99 89       	ldd	r25, Y+17	; 0x11
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <LCD_voidInit+0x47c>
    300e:	99 8b       	std	Y+17, r25	; 0x11
    3010:	88 8b       	std	Y+16, r24	; 0x10
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3014:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3016:	78 a1       	ldd	r23, Y+32	; 0x20
    3018:	89 a1       	ldd	r24, Y+33	; 0x21
    301a:	9a a1       	ldd	r25, Y+34	; 0x22
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8e 8f       	std	Y+30, r24	; 0x1e
    3026:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3028:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    302a:	8f 85       	ldd	r24, Y+15	; 0x0f
    302c:	8a 95       	dec	r24
    302e:	f1 f7       	brne	.-4      	; 0x302c <LCD_voidInit+0x49e>
    3030:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e4       	ldi	r27, 0x40	; 64
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_voidInit+0x4fc>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_voidInit+0x55c>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_voidInit+0x54a>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_voidInit+0x53e>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_voidInit+0x586>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    311c:	c4 5b       	subi	r28, 0xB4	; 180
    311e:	df 4f       	sbci	r29, 0xFF	; 255
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	1f 91       	pop	r17
    3130:	0f 91       	pop	r16
    3132:	08 95       	ret

00003134 <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	69 97       	sbiw	r28, 0x19	; 25
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    314a:	83 e0       	ldi	r24, 0x03	; 3
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	61 e0       	ldi	r22, 0x01	; 1
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	69 8d       	ldd	r22, Y+25	; 0x19
    3162:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    3166:	83 e0       	ldi	r24, 0x03	; 3
    3168:	62 e0       	ldi	r22, 0x02	; 2
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	a0 e8       	ldi	r26, 0x80	; 128
    3176:	bf e3       	ldi	r27, 0x3F	; 63
    3178:	8d 8b       	std	Y+21, r24	; 0x15
    317a:	9e 8b       	std	Y+22, r25	; 0x16
    317c:	af 8b       	std	Y+23, r26	; 0x17
    317e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3180:	6d 89       	ldd	r22, Y+21	; 0x15
    3182:	7e 89       	ldd	r23, Y+22	; 0x16
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	2b ea       	ldi	r18, 0xAB	; 171
    318a:	3a ea       	ldi	r19, 0xAA	; 170
    318c:	4a e2       	ldi	r20, 0x2A	; 42
    318e:	50 e4       	ldi	r21, 0x40	; 64
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	89 8b       	std	Y+17, r24	; 0x11
    319a:	9a 8b       	std	Y+18, r25	; 0x12
    319c:	ab 8b       	std	Y+19, r26	; 0x13
    319e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    31a0:	69 89       	ldd	r22, Y+17	; 0x11
    31a2:	7a 89       	ldd	r23, Y+18	; 0x12
    31a4:	8b 89       	ldd	r24, Y+19	; 0x13
    31a6:	9c 89       	ldd	r25, Y+20	; 0x14
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e8       	ldi	r20, 0x80	; 128
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b4:	88 23       	and	r24, r24
    31b6:	1c f4       	brge	.+6      	; 0x31be <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	88 8b       	std	Y+16, r24	; 0x10
    31bc:	91 c0       	rjmp	.+290    	; 0x32e0 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    31be:	69 89       	ldd	r22, Y+17	; 0x11
    31c0:	7a 89       	ldd	r23, Y+18	; 0x12
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	53 e4       	ldi	r21, 0x43	; 67
    31ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	0c f0       	brlt	.+2      	; 0x31d8 <LCD_voidSendCommand+0xa4>
    31d6:	7b c0       	rjmp	.+246    	; 0x32ce <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    31d8:	6d 89       	ldd	r22, Y+21	; 0x15
    31da:	7e 89       	ldd	r23, Y+22	; 0x16
    31dc:	8f 89       	ldd	r24, Y+23	; 0x17
    31de:	98 8d       	ldd	r25, Y+24	; 0x18
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8c 87       	std	Y+12, r24	; 0x0c
    31f2:	9d 87       	std	Y+13, r25	; 0x0d
    31f4:	ae 87       	std	Y+14, r26	; 0x0e
    31f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    31fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    31fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    31fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	4a ef       	ldi	r20, 0xFA	; 250
    3206:	54 e4       	ldi	r21, 0x44	; 68
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	88 87       	std	Y+8, r24	; 0x08
    3212:	99 87       	std	Y+9, r25	; 0x09
    3214:	aa 87       	std	Y+10, r26	; 0x0a
    3216:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3218:	68 85       	ldd	r22, Y+8	; 0x08
    321a:	79 85       	ldd	r23, Y+9	; 0x09
    321c:	8a 85       	ldd	r24, Y+10	; 0x0a
    321e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	2c f4       	brge	.+10     	; 0x323a <LCD_voidSendCommand+0x106>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9f 83       	std	Y+7, r25	; 0x07
    3236:	8e 83       	std	Y+6, r24	; 0x06
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    323a:	68 85       	ldd	r22, Y+8	; 0x08
    323c:	79 85       	ldd	r23, Y+9	; 0x09
    323e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3240:	9b 85       	ldd	r25, Y+11	; 0x0b
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	4f e7       	ldi	r20, 0x7F	; 127
    3248:	57 e4       	ldi	r21, 0x47	; 71
    324a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324e:	18 16       	cp	r1, r24
    3250:	4c f5       	brge	.+82     	; 0x32a4 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	6c 85       	ldd	r22, Y+12	; 0x0c
    3254:	7d 85       	ldd	r23, Y+13	; 0x0d
    3256:	8e 85       	ldd	r24, Y+14	; 0x0e
    3258:	9f 85       	ldd	r25, Y+15	; 0x0f
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9f 83       	std	Y+7, r25	; 0x07
    3278:	8e 83       	std	Y+6, r24	; 0x06
    327a:	0f c0       	rjmp	.+30     	; 0x329a <LCD_voidSendCommand+0x166>
    327c:	88 ec       	ldi	r24, 0xC8	; 200
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	9d 83       	std	Y+5, r25	; 0x05
    3282:	8c 83       	std	Y+4, r24	; 0x04
    3284:	8c 81       	ldd	r24, Y+4	; 0x04
    3286:	9d 81       	ldd	r25, Y+5	; 0x05
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <LCD_voidSendCommand+0x154>
    328c:	9d 83       	std	Y+5, r25	; 0x05
    328e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	8e 81       	ldd	r24, Y+6	; 0x06
    3292:	9f 81       	ldd	r25, Y+7	; 0x07
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9f 83       	std	Y+7, r25	; 0x07
    3298:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	8e 81       	ldd	r24, Y+6	; 0x06
    329c:	9f 81       	ldd	r25, Y+7	; 0x07
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f7       	brne	.-38     	; 0x327c <LCD_voidSendCommand+0x148>
    32a2:	24 c0       	rjmp	.+72     	; 0x32ec <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	68 85       	ldd	r22, Y+8	; 0x08
    32a6:	79 85       	ldd	r23, Y+9	; 0x09
    32a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9f 83       	std	Y+7, r25	; 0x07
    32b6:	8e 83       	std	Y+6, r24	; 0x06
    32b8:	8e 81       	ldd	r24, Y+6	; 0x06
    32ba:	9f 81       	ldd	r25, Y+7	; 0x07
    32bc:	9b 83       	std	Y+3, r25	; 0x03
    32be:	8a 83       	std	Y+2, r24	; 0x02
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	9b 81       	ldd	r25, Y+3	; 0x03
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <LCD_voidSendCommand+0x190>
    32c8:	9b 83       	std	Y+3, r25	; 0x03
    32ca:	8a 83       	std	Y+2, r24	; 0x02
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32ce:	69 89       	ldd	r22, Y+17	; 0x11
    32d0:	7a 89       	ldd	r23, Y+18	; 0x12
    32d2:	8b 89       	ldd	r24, Y+19	; 0x13
    32d4:	9c 89       	ldd	r25, Y+20	; 0x14
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	88 8b       	std	Y+16, r24	; 0x10
    32e0:	88 89       	ldd	r24, Y+16	; 0x10
    32e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	8a 95       	dec	r24
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <LCD_voidSendCommand+0x1b2>
    32ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    32ec:	83 e0       	ldi	r24, 0x03	; 3
    32ee:	62 e0       	ldi	r22, 0x02	; 2
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
}
    32f6:	69 96       	adiw	r28, 0x19	; 25
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	69 97       	sbiw	r28, 0x19	; 25
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    3328:	83 e0       	ldi	r24, 0x03	; 3
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	69 8d       	ldd	r22, Y+25	; 0x19
    3336:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	62 e0       	ldi	r22, 0x02	; 2
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	a0 e8       	ldi	r26, 0x80	; 128
    334a:	bf e3       	ldi	r27, 0x3F	; 63
    334c:	8d 8b       	std	Y+21, r24	; 0x15
    334e:	9e 8b       	std	Y+22, r25	; 0x16
    3350:	af 8b       	std	Y+23, r26	; 0x17
    3352:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3354:	6d 89       	ldd	r22, Y+21	; 0x15
    3356:	7e 89       	ldd	r23, Y+22	; 0x16
    3358:	8f 89       	ldd	r24, Y+23	; 0x17
    335a:	98 8d       	ldd	r25, Y+24	; 0x18
    335c:	2b ea       	ldi	r18, 0xAB	; 171
    335e:	3a ea       	ldi	r19, 0xAA	; 170
    3360:	4a e2       	ldi	r20, 0x2A	; 42
    3362:	50 e4       	ldi	r21, 0x40	; 64
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	89 8b       	std	Y+17, r24	; 0x11
    336e:	9a 8b       	std	Y+18, r25	; 0x12
    3370:	ab 8b       	std	Y+19, r26	; 0x13
    3372:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3374:	69 89       	ldd	r22, Y+17	; 0x11
    3376:	7a 89       	ldd	r23, Y+18	; 0x12
    3378:	8b 89       	ldd	r24, Y+19	; 0x13
    337a:	9c 89       	ldd	r25, Y+20	; 0x14
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	1c f4       	brge	.+6      	; 0x3392 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	88 8b       	std	Y+16, r24	; 0x10
    3390:	91 c0       	rjmp	.+290    	; 0x34b4 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    3392:	69 89       	ldd	r22, Y+17	; 0x11
    3394:	7a 89       	ldd	r23, Y+18	; 0x12
    3396:	8b 89       	ldd	r24, Y+19	; 0x13
    3398:	9c 89       	ldd	r25, Y+20	; 0x14
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	53 e4       	ldi	r21, 0x43	; 67
    33a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a6:	18 16       	cp	r1, r24
    33a8:	0c f0       	brlt	.+2      	; 0x33ac <LCD_voidSendChar+0xa4>
    33aa:	7b c0       	rjmp	.+246    	; 0x34a2 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    33ac:	6d 89       	ldd	r22, Y+21	; 0x15
    33ae:	7e 89       	ldd	r23, Y+22	; 0x16
    33b0:	8f 89       	ldd	r24, Y+23	; 0x17
    33b2:	98 8d       	ldd	r25, Y+24	; 0x18
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4a e7       	ldi	r20, 0x7A	; 122
    33ba:	54 e4       	ldi	r21, 0x44	; 68
    33bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	8c 87       	std	Y+12, r24	; 0x0c
    33c6:	9d 87       	std	Y+13, r25	; 0x0d
    33c8:	ae 87       	std	Y+14, r26	; 0x0e
    33ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    33ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    33d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	4a ef       	ldi	r20, 0xFA	; 250
    33da:	54 e4       	ldi	r21, 0x44	; 68
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	88 87       	std	Y+8, r24	; 0x08
    33e6:	99 87       	std	Y+9, r25	; 0x09
    33e8:	aa 87       	std	Y+10, r26	; 0x0a
    33ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33ec:	68 85       	ldd	r22, Y+8	; 0x08
    33ee:	79 85       	ldd	r23, Y+9	; 0x09
    33f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	2c f4       	brge	.+10     	; 0x340e <LCD_voidSendChar+0x106>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9f 83       	std	Y+7, r25	; 0x07
    340a:	8e 83       	std	Y+6, r24	; 0x06
    340c:	3f c0       	rjmp	.+126    	; 0x348c <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    340e:	68 85       	ldd	r22, Y+8	; 0x08
    3410:	79 85       	ldd	r23, Y+9	; 0x09
    3412:	8a 85       	ldd	r24, Y+10	; 0x0a
    3414:	9b 85       	ldd	r25, Y+11	; 0x0b
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	4c f5       	brge	.+82     	; 0x3478 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	6c 85       	ldd	r22, Y+12	; 0x0c
    3428:	7d 85       	ldd	r23, Y+13	; 0x0d
    342a:	8e 85       	ldd	r24, Y+14	; 0x0e
    342c:	9f 85       	ldd	r25, Y+15	; 0x0f
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9f 83       	std	Y+7, r25	; 0x07
    344c:	8e 83       	std	Y+6, r24	; 0x06
    344e:	0f c0       	rjmp	.+30     	; 0x346e <LCD_voidSendChar+0x166>
    3450:	88 ec       	ldi	r24, 0xC8	; 200
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9d 83       	std	Y+5, r25	; 0x05
    3456:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3458:	8c 81       	ldd	r24, Y+4	; 0x04
    345a:	9d 81       	ldd	r25, Y+5	; 0x05
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <LCD_voidSendChar+0x154>
    3460:	9d 83       	std	Y+5, r25	; 0x05
    3462:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	8e 81       	ldd	r24, Y+6	; 0x06
    3466:	9f 81       	ldd	r25, Y+7	; 0x07
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	9f 83       	std	Y+7, r25	; 0x07
    346c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	8e 81       	ldd	r24, Y+6	; 0x06
    3470:	9f 81       	ldd	r25, Y+7	; 0x07
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	69 f7       	brne	.-38     	; 0x3450 <LCD_voidSendChar+0x148>
    3476:	24 c0       	rjmp	.+72     	; 0x34c0 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	68 85       	ldd	r22, Y+8	; 0x08
    347a:	79 85       	ldd	r23, Y+9	; 0x09
    347c:	8a 85       	ldd	r24, Y+10	; 0x0a
    347e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9f 83       	std	Y+7, r25	; 0x07
    348a:	8e 83       	std	Y+6, r24	; 0x06
    348c:	8e 81       	ldd	r24, Y+6	; 0x06
    348e:	9f 81       	ldd	r25, Y+7	; 0x07
    3490:	9b 83       	std	Y+3, r25	; 0x03
    3492:	8a 83       	std	Y+2, r24	; 0x02
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	9b 81       	ldd	r25, Y+3	; 0x03
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCD_voidSendChar+0x190>
    349c:	9b 83       	std	Y+3, r25	; 0x03
    349e:	8a 83       	std	Y+2, r24	; 0x02
    34a0:	0f c0       	rjmp	.+30     	; 0x34c0 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34a2:	69 89       	ldd	r22, Y+17	; 0x11
    34a4:	7a 89       	ldd	r23, Y+18	; 0x12
    34a6:	8b 89       	ldd	r24, Y+19	; 0x13
    34a8:	9c 89       	ldd	r25, Y+20	; 0x14
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	88 8b       	std	Y+16, r24	; 0x10
    34b4:	88 89       	ldd	r24, Y+16	; 0x10
    34b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	8a 95       	dec	r24
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <LCD_voidSendChar+0x1b2>
    34be:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    34c0:	83 e0       	ldi	r24, 0x03	; 3
    34c2:	62 e0       	ldi	r22, 0x02	; 2
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
	
}
    34ca:	69 96       	adiw	r28, 0x19	; 25
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <LCD_voidSendString+0x6>
    34e2:	0f 92       	push	r0
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	9b 83       	std	Y+3, r25	; 0x03
    34ea:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    34ec:	19 82       	std	Y+1, r1	; 0x01
    34ee:	0e c0       	rjmp	.+28     	; 0x350c <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	28 2f       	mov	r18, r24
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	9b 81       	ldd	r25, Y+3	; 0x03
    34fa:	fc 01       	movw	r30, r24
    34fc:	e2 0f       	add	r30, r18
    34fe:	f3 1f       	adc	r31, r19
    3500:	80 81       	ld	r24, Z
    3502:	0e 94 84 19 	call	0x3308	; 0x3308 <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	8f 5f       	subi	r24, 0xFF	; 255
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	9b 81       	ldd	r25, Y+3	; 0x03
    3516:	fc 01       	movw	r30, r24
    3518:	e2 0f       	add	r30, r18
    351a:	f3 1f       	adc	r31, r19
    351c:	80 81       	ld	r24, Z
    351e:	88 23       	and	r24, r24
    3520:	39 f7       	brne	.-50     	; 0x34f0 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <LCD_voidSetLocation+0x6>
    3534:	00 d0       	rcall	.+0      	; 0x3536 <LCD_voidSetLocation+0x8>
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	89 83       	std	Y+1, r24	; 0x01
    353c:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	3c 83       	std	Y+4, r19	; 0x04
    3546:	2b 83       	std	Y+3, r18	; 0x03
    3548:	8b 81       	ldd	r24, Y+3	; 0x03
    354a:	9c 81       	ldd	r25, Y+4	; 0x04
    354c:	81 30       	cpi	r24, 0x01	; 1
    354e:	91 05       	cpc	r25, r1
    3550:	31 f0       	breq	.+12     	; 0x355e <LCD_voidSetLocation+0x30>
    3552:	2b 81       	ldd	r18, Y+3	; 0x03
    3554:	3c 81       	ldd	r19, Y+4	; 0x04
    3556:	22 30       	cpi	r18, 0x02	; 2
    3558:	31 05       	cpc	r19, r1
    355a:	31 f0       	breq	.+12     	; 0x3568 <LCD_voidSetLocation+0x3a>
    355c:	09 c0       	rjmp	.+18     	; 0x3570 <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	80 58       	subi	r24, 0x80	; 128
    3562:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    3566:	04 c0       	rjmp	.+8      	; 0x3570 <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	80 54       	subi	r24, 0x40	; 64
    356c:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>

	}
	
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	60 97       	sbiw	r28, 0x10	; 16
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	6d 87       	std	Y+13, r22	; 0x0d
    3598:	7e 87       	std	Y+14, r23	; 0x0e
    359a:	8f 87       	std	Y+15, r24	; 0x0f
    359c:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    359e:	89 e0       	ldi	r24, 0x09	; 9
    35a0:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    35a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a6:	af 85       	ldd	r26, Y+15	; 0x0f
    35a8:	b8 89       	ldd	r27, Y+16	; 0x10
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	a1 05       	cpc	r26, r1
    35ae:	b1 05       	cpc	r27, r1
    35b0:	21 f4       	brne	.+8      	; 0x35ba <LCD_voidSendNumber+0x3c>
    35b2:	80 e3       	ldi	r24, 0x30	; 48
    35b4:	0e 94 84 19 	call	0x3308	; 0x3308 <LCD_voidSendChar>
    35b8:	44 c0       	rjmp	.+136    	; 0x3642 <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    35ba:	1c 86       	std	Y+12, r1	; 0x0c
    35bc:	2e c0       	rjmp	.+92     	; 0x361a <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	08 2f       	mov	r16, r24
    35c2:	10 e0       	ldi	r17, 0x00	; 0
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	af 85       	ldd	r26, Y+15	; 0x0f
    35ca:	b8 89       	ldd	r27, Y+16	; 0x10
    35cc:	2a e0       	ldi	r18, 0x0A	; 10
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__udivmodsi4>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	28 2f       	mov	r18, r24
    35e2:	20 5d       	subi	r18, 0xD0	; 208
    35e4:	ce 01       	movw	r24, r28
    35e6:	02 96       	adiw	r24, 0x02	; 2
    35e8:	fc 01       	movw	r30, r24
    35ea:	e0 0f       	add	r30, r16
    35ec:	f1 1f       	adc	r31, r17
    35ee:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	af 85       	ldd	r26, Y+15	; 0x0f
    35f6:	b8 89       	ldd	r27, Y+16	; 0x10
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__udivmodsi4>
    3608:	da 01       	movw	r26, r20
    360a:	c9 01       	movw	r24, r18
    360c:	8d 87       	std	Y+13, r24	; 0x0d
    360e:	9e 87       	std	Y+14, r25	; 0x0e
    3610:	af 87       	std	Y+15, r26	; 0x0f
    3612:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	81 50       	subi	r24, 0x01	; 1
    3618:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    361a:	8d 85       	ldd	r24, Y+13	; 0x0d
    361c:	9e 85       	ldd	r25, Y+14	; 0x0e
    361e:	af 85       	ldd	r26, Y+15	; 0x0f
    3620:	b8 89       	ldd	r27, Y+16	; 0x10
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	a1 05       	cpc	r26, r1
    3626:	b1 05       	cpc	r27, r1
    3628:	51 f6       	brne	.-108    	; 0x35be <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	9c 01       	movw	r18, r24
    3632:	2f 5f       	subi	r18, 0xFF	; 255
    3634:	3f 4f       	sbci	r19, 0xFF	; 255
    3636:	ce 01       	movw	r24, r28
    3638:	02 96       	adiw	r24, 0x02	; 2
    363a:	82 0f       	add	r24, r18
    363c:	93 1f       	adc	r25, r19
    363e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
	}
}
    3642:	60 96       	adiw	r28, 0x10	; 16
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	6c 97       	sbiw	r28, 0x1c	; 28
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	8a 8f       	std	Y+26, r24	; 0x1a
    366e:	7c 8f       	std	Y+28, r23	; 0x1c
    3670:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    3672:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3674:	88 2f       	mov	r24, r24
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	08 96       	adiw	r24, 0x08	; 8
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	a0 e2       	ldi	r26, 0x20	; 32
    3690:	b2 e4       	ldi	r27, 0x42	; 66
    3692:	8d 8b       	std	Y+21, r24	; 0x15
    3694:	9e 8b       	std	Y+22, r25	; 0x16
    3696:	af 8b       	std	Y+23, r26	; 0x17
    3698:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    369a:	6d 89       	ldd	r22, Y+21	; 0x15
    369c:	7e 89       	ldd	r23, Y+22	; 0x16
    369e:	8f 89       	ldd	r24, Y+23	; 0x17
    36a0:	98 8d       	ldd	r25, Y+24	; 0x18
    36a2:	2b ea       	ldi	r18, 0xAB	; 171
    36a4:	3a ea       	ldi	r19, 0xAA	; 170
    36a6:	4a e2       	ldi	r20, 0x2A	; 42
    36a8:	50 e4       	ldi	r21, 0x40	; 64
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	89 8b       	std	Y+17, r24	; 0x11
    36b4:	9a 8b       	std	Y+18, r25	; 0x12
    36b6:	ab 8b       	std	Y+19, r26	; 0x13
    36b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    36ba:	69 89       	ldd	r22, Y+17	; 0x11
    36bc:	7a 89       	ldd	r23, Y+18	; 0x12
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	1c f4       	brge	.+6      	; 0x36d8 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	88 8b       	std	Y+16, r24	; 0x10
    36d6:	91 c0       	rjmp	.+290    	; 0x37fa <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    36d8:	69 89       	ldd	r22, Y+17	; 0x11
    36da:	7a 89       	ldd	r23, Y+18	; 0x12
    36dc:	8b 89       	ldd	r24, Y+19	; 0x13
    36de:	9c 89       	ldd	r25, Y+20	; 0x14
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4f e7       	ldi	r20, 0x7F	; 127
    36e6:	53 e4       	ldi	r21, 0x43	; 67
    36e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ec:	18 16       	cp	r1, r24
    36ee:	0c f0       	brlt	.+2      	; 0x36f2 <LCD_voidDrawSpecialChar+0x9a>
    36f0:	7b c0       	rjmp	.+246    	; 0x37e8 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    36f2:	6d 89       	ldd	r22, Y+21	; 0x15
    36f4:	7e 89       	ldd	r23, Y+22	; 0x16
    36f6:	8f 89       	ldd	r24, Y+23	; 0x17
    36f8:	98 8d       	ldd	r25, Y+24	; 0x18
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	4a e7       	ldi	r20, 0x7A	; 122
    3700:	54 e4       	ldi	r21, 0x44	; 68
    3702:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	8c 87       	std	Y+12, r24	; 0x0c
    370c:	9d 87       	std	Y+13, r25	; 0x0d
    370e:	ae 87       	std	Y+14, r26	; 0x0e
    3710:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	6c 85       	ldd	r22, Y+12	; 0x0c
    3714:	7d 85       	ldd	r23, Y+13	; 0x0d
    3716:	8e 85       	ldd	r24, Y+14	; 0x0e
    3718:	9f 85       	ldd	r25, Y+15	; 0x0f
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4a ef       	ldi	r20, 0xFA	; 250
    3720:	54 e4       	ldi	r21, 0x44	; 68
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	88 87       	std	Y+8, r24	; 0x08
    372c:	99 87       	std	Y+9, r25	; 0x09
    372e:	aa 87       	std	Y+10, r26	; 0x0a
    3730:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3732:	68 85       	ldd	r22, Y+8	; 0x08
    3734:	79 85       	ldd	r23, Y+9	; 0x09
    3736:	8a 85       	ldd	r24, Y+10	; 0x0a
    3738:	9b 85       	ldd	r25, Y+11	; 0x0b
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	2c f4       	brge	.+10     	; 0x3754 <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	9f 83       	std	Y+7, r25	; 0x07
    3750:	8e 83       	std	Y+6, r24	; 0x06
    3752:	3f c0       	rjmp	.+126    	; 0x37d2 <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    3754:	68 85       	ldd	r22, Y+8	; 0x08
    3756:	79 85       	ldd	r23, Y+9	; 0x09
    3758:	8a 85       	ldd	r24, Y+10	; 0x0a
    375a:	9b 85       	ldd	r25, Y+11	; 0x0b
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	3f ef       	ldi	r19, 0xFF	; 255
    3760:	4f e7       	ldi	r20, 0x7F	; 127
    3762:	57 e4       	ldi	r21, 0x47	; 71
    3764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3768:	18 16       	cp	r1, r24
    376a:	4c f5       	brge	.+82     	; 0x37be <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376c:	6c 85       	ldd	r22, Y+12	; 0x0c
    376e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3770:	8e 85       	ldd	r24, Y+14	; 0x0e
    3772:	9f 85       	ldd	r25, Y+15	; 0x0f
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e2       	ldi	r20, 0x20	; 32
    377a:	51 e4       	ldi	r21, 0x41	; 65
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9f 83       	std	Y+7, r25	; 0x07
    3792:	8e 83       	std	Y+6, r24	; 0x06
    3794:	0f c0       	rjmp	.+30     	; 0x37b4 <LCD_voidDrawSpecialChar+0x15c>
    3796:	88 ec       	ldi	r24, 0xC8	; 200
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9d 83       	std	Y+5, r25	; 0x05
    379c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    379e:	8c 81       	ldd	r24, Y+4	; 0x04
    37a0:	9d 81       	ldd	r25, Y+5	; 0x05
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <LCD_voidDrawSpecialChar+0x14a>
    37a6:	9d 83       	std	Y+5, r25	; 0x05
    37a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	9f 81       	ldd	r25, Y+7	; 0x07
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	9f 83       	std	Y+7, r25	; 0x07
    37b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b4:	8e 81       	ldd	r24, Y+6	; 0x06
    37b6:	9f 81       	ldd	r25, Y+7	; 0x07
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	69 f7       	brne	.-38     	; 0x3796 <LCD_voidDrawSpecialChar+0x13e>
    37bc:	24 c0       	rjmp	.+72     	; 0x3806 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37be:	68 85       	ldd	r22, Y+8	; 0x08
    37c0:	79 85       	ldd	r23, Y+9	; 0x09
    37c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    37c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	9f 83       	std	Y+7, r25	; 0x07
    37d0:	8e 83       	std	Y+6, r24	; 0x06
    37d2:	8e 81       	ldd	r24, Y+6	; 0x06
    37d4:	9f 81       	ldd	r25, Y+7	; 0x07
    37d6:	9b 83       	std	Y+3, r25	; 0x03
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	9b 81       	ldd	r25, Y+3	; 0x03
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <LCD_voidDrawSpecialChar+0x186>
    37e2:	9b 83       	std	Y+3, r25	; 0x03
    37e4:	8a 83       	std	Y+2, r24	; 0x02
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37e8:	69 89       	ldd	r22, Y+17	; 0x11
    37ea:	7a 89       	ldd	r23, Y+18	; 0x12
    37ec:	8b 89       	ldd	r24, Y+19	; 0x13
    37ee:	9c 89       	ldd	r25, Y+20	; 0x14
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	88 8b       	std	Y+16, r24	; 0x10
    37fa:	88 89       	ldd	r24, Y+16	; 0x10
    37fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	8a 95       	dec	r24
    3802:	f1 f7       	brne	.-4      	; 0x3800 <LCD_voidDrawSpecialChar+0x1a8>
    3804:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    3806:	19 8e       	std	Y+25, r1	; 0x19
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    380a:	89 8d       	ldd	r24, Y+25	; 0x19
    380c:	28 2f       	mov	r18, r24
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3814:	fc 01       	movw	r30, r24
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	80 81       	ld	r24, Z
    381c:	0e 94 84 19 	call	0x3308	; 0x3308 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    3820:	89 8d       	ldd	r24, Y+25	; 0x19
    3822:	8f 5f       	subi	r24, 0xFF	; 255
    3824:	89 8f       	std	Y+25, r24	; 0x19
    3826:	89 8d       	ldd	r24, Y+25	; 0x19
    3828:	88 30       	cpi	r24, 0x08	; 8
    382a:	78 f3       	brcs	.-34     	; 0x380a <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    382c:	6c 96       	adiw	r28, 0x1c	; 28
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	0f 92       	push	r0
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	0e 94 84 19 	call	0x3308	; 0x3308 <LCD_voidSendChar>
}
    3850:	0f 90       	pop	r0
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <KPD_voidInit>:

u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};     // rows -> output
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};	// columns -> input


void KPD_voidInit(void){
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	0f 92       	push	r0
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    3862:	19 82       	std	Y+1, r1	; 0x01
    3864:	20 c0       	rjmp	.+64     	; 0x38a6 <KPD_voidInit+0x4e>
		if (Local_u8Count < 4) {
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	84 30       	cpi	r24, 0x04	; 4
    386a:	68 f4       	brcc	.+26     	; 0x3886 <KPD_voidInit+0x2e>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_OUTPUT);
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	88 2f       	mov	r24, r24
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	fc 01       	movw	r30, r24
    3874:	ec 50       	subi	r30, 0x0C	; 12
    3876:	fe 4f       	sbci	r31, 0xFE	; 254
    3878:	90 81       	ld	r25, Z
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	69 2f       	mov	r22, r25
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
    3884:	0d c0       	rjmp	.+26     	; 0x38a0 <KPD_voidInit+0x48>

		} else {
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	04 97       	sbiw	r24, 0x04	; 4
    388e:	fc 01       	movw	r30, r24
    3890:	e8 50       	subi	r30, 0x08	; 8
    3892:	fe 4f       	sbci	r31, 0xFE	; 254
    3894:	90 81       	ld	r25, Z
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	69 2f       	mov	r22, r25
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>


void KPD_voidInit(void){

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	8f 5f       	subi	r24, 0xFF	; 255
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	88 30       	cpi	r24, 0x08	; 8
    38aa:	e8 f2       	brcs	.-70     	; 0x3866 <KPD_voidInit+0xe>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
		}

	}

	DIO_voidSetPortValue(KPD_PORT, 0xff);
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	6f ef       	ldi	r22, 0xFF	; 255
    38b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>

}
    38b4:	0f 90       	pop	r0
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	63 97       	sbiw	r28, 0x13	; 19
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
    38d0:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;
    38d2:	8f ef       	ldi	r24, 0xFF	; 255
    38d4:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    38d6:	1b 8a       	std	Y+19, r1	; 0x13
    38d8:	dd c0       	rjmp	.+442    	; 0x3a94 <KPD_u8GetPressedKey+0x1d8>
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    38da:	8b 89       	ldd	r24, Y+19	; 0x13
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	fc 01       	movw	r30, r24
    38e2:	ec 50       	subi	r30, 0x0C	; 12
    38e4:	fe 4f       	sbci	r31, 0xFE	; 254
    38e6:	90 81       	ld	r25, Z
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	69 2f       	mov	r22, r25
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    38f2:	1a 8a       	std	Y+18, r1	; 0x12
    38f4:	b9 c0       	rjmp	.+370    	; 0x3a68 <KPD_u8GetPressedKey+0x1ac>
			/* check if any button was pressed*/
			Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    38f6:	8a 89       	ldd	r24, Y+18	; 0x12
    38f8:	88 2f       	mov	r24, r24
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	fc 01       	movw	r30, r24
    38fe:	e8 50       	subi	r30, 0x08	; 8
    3900:	fe 4f       	sbci	r31, 0xFE	; 254
    3902:	90 81       	ld	r25, Z
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	69 2f       	mov	r22, r25
    3908:	0e 94 40 10 	call	0x2080	; 0x2080 <DIO_u8GetPinValue>
    390c:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8Pressed == 0){
    390e:	89 89       	ldd	r24, Y+17	; 0x11
    3910:	88 23       	and	r24, r24
    3912:	09 f0       	breq	.+2      	; 0x3916 <KPD_u8GetPressedKey+0x5a>
    3914:	a6 c0       	rjmp	.+332    	; 0x3a62 <KPD_u8GetPressedKey+0x1a6>
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	a8 ec       	ldi	r26, 0xC8	; 200
    391c:	b1 e4       	ldi	r27, 0x41	; 65
    391e:	8b 87       	std	Y+11, r24	; 0x0b
    3920:	9c 87       	std	Y+12, r25	; 0x0c
    3922:	ad 87       	std	Y+13, r26	; 0x0d
    3924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3926:	6b 85       	ldd	r22, Y+11	; 0x0b
    3928:	7c 85       	ldd	r23, Y+12	; 0x0c
    392a:	8d 85       	ldd	r24, Y+13	; 0x0d
    392c:	9e 85       	ldd	r25, Y+14	; 0x0e
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4a ef       	ldi	r20, 0xFA	; 250
    3934:	54 e4       	ldi	r21, 0x44	; 68
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	8f 83       	std	Y+7, r24	; 0x07
    3940:	98 87       	std	Y+8, r25	; 0x08
    3942:	a9 87       	std	Y+9, r26	; 0x09
    3944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3946:	6f 81       	ldd	r22, Y+7	; 0x07
    3948:	78 85       	ldd	r23, Y+8	; 0x08
    394a:	89 85       	ldd	r24, Y+9	; 0x09
    394c:	9a 85       	ldd	r25, Y+10	; 0x0a
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 e8       	ldi	r20, 0x80	; 128
    3954:	5f e3       	ldi	r21, 0x3F	; 63
    3956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395a:	88 23       	and	r24, r24
    395c:	2c f4       	brge	.+10     	; 0x3968 <KPD_u8GetPressedKey+0xac>
		__ticks = 1;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9e 83       	std	Y+6, r25	; 0x06
    3964:	8d 83       	std	Y+5, r24	; 0x05
    3966:	3f c0       	rjmp	.+126    	; 0x39e6 <KPD_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	3f ef       	ldi	r19, 0xFF	; 255
    3974:	4f e7       	ldi	r20, 0x7F	; 127
    3976:	57 e4       	ldi	r21, 0x47	; 71
    3978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397c:	18 16       	cp	r1, r24
    397e:	4c f5       	brge	.+82     	; 0x39d2 <KPD_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3980:	6b 85       	ldd	r22, Y+11	; 0x0b
    3982:	7c 85       	ldd	r23, Y+12	; 0x0c
    3984:	8d 85       	ldd	r24, Y+13	; 0x0d
    3986:	9e 85       	ldd	r25, Y+14	; 0x0e
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e2       	ldi	r20, 0x20	; 32
    398e:	51 e4       	ldi	r21, 0x41	; 65
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	9e 83       	std	Y+6, r25	; 0x06
    39a6:	8d 83       	std	Y+5, r24	; 0x05
    39a8:	0f c0       	rjmp	.+30     	; 0x39c8 <KPD_u8GetPressedKey+0x10c>
    39aa:	88 ec       	ldi	r24, 0xC8	; 200
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	9c 83       	std	Y+4, r25	; 0x04
    39b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39b2:	8b 81       	ldd	r24, Y+3	; 0x03
    39b4:	9c 81       	ldd	r25, Y+4	; 0x04
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <KPD_u8GetPressedKey+0xfa>
    39ba:	9c 83       	std	Y+4, r25	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39be:	8d 81       	ldd	r24, Y+5	; 0x05
    39c0:	9e 81       	ldd	r25, Y+6	; 0x06
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	69 f7       	brne	.-38     	; 0x39aa <KPD_u8GetPressedKey+0xee>
    39d0:	14 c0       	rjmp	.+40     	; 0x39fa <KPD_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d2:	6f 81       	ldd	r22, Y+7	; 0x07
    39d4:	78 85       	ldd	r23, Y+8	; 0x08
    39d6:	89 85       	ldd	r24, Y+9	; 0x09
    39d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	8d 81       	ldd	r24, Y+5	; 0x05
    39e8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	9a 81       	ldd	r25, Y+2	; 0x02
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	f1 f7       	brne	.-4      	; 0x39f2 <KPD_u8GetPressedKey+0x136>
    39f6:	9a 83       	std	Y+2, r25	; 0x02
    39f8:	89 83       	std	Y+1, r24	; 0x01
				/* waite for debouncing*/
				_delay_ms(25);
				/* checking for noise*/
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    39fa:	8a 89       	ldd	r24, Y+18	; 0x12
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	fc 01       	movw	r30, r24
    3a02:	e8 50       	subi	r30, 0x08	; 8
    3a04:	fe 4f       	sbci	r31, 0xFE	; 254
    3a06:	90 81       	ld	r25, Z
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	69 2f       	mov	r22, r25
    3a0c:	0e 94 40 10 	call	0x2080	; 0x2080 <DIO_u8GetPinValue>
    3a10:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8Pressed == 0){
    3a12:	89 89       	ldd	r24, Y+17	; 0x11
    3a14:	88 23       	and	r24, r24
    3a16:	29 f5       	brne	.+74     	; 0x3a62 <KPD_u8GetPressedKey+0x1a6>
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];
    3a18:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1a:	48 2f       	mov	r20, r24
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	ca 01       	movw	r24, r20
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	82 0f       	add	r24, r18
    3a30:	93 1f       	adc	r25, r19
    3a32:	fc 01       	movw	r30, r24
    3a34:	ec 51       	subi	r30, 0x1C	; 28
    3a36:	fe 4f       	sbci	r31, 0xFE	; 254
    3a38:	80 81       	ld	r24, Z
    3a3a:	8f 87       	std	Y+15, r24	; 0x0f
    3a3c:	0c c0       	rjmp	.+24     	; 0x3a56 <KPD_u8GetPressedKey+0x19a>

					/* handling long press*/
					while(Local_u8Pressed == 0){
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3a3e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a40:	88 2f       	mov	r24, r24
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	fc 01       	movw	r30, r24
    3a46:	e8 50       	subi	r30, 0x08	; 8
    3a48:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4a:	90 81       	ld	r25, Z
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	69 2f       	mov	r22, r25
    3a50:	0e 94 40 10 	call	0x2080	; 0x2080 <DIO_u8GetPinValue>
    3a54:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
				if(Local_u8Pressed == 0){
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];

					/* handling long press*/
					while(Local_u8Pressed == 0){
    3a56:	89 89       	ldd	r24, Y+17	; 0x11
    3a58:	88 23       	and	r24, r24
    3a5a:	89 f3       	breq	.-30     	; 0x3a3e <KPD_u8GetPressedKey+0x182>
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
					}
					Local_u8Flag =1;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	88 8b       	std	Y+16, r24	; 0x10
    3a60:	07 c0       	rjmp	.+14     	; 0x3a70 <KPD_u8GetPressedKey+0x1b4>

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    3a62:	8a 89       	ldd	r24, Y+18	; 0x12
    3a64:	8f 5f       	subi	r24, 0xFF	; 255
    3a66:	8a 8b       	std	Y+18, r24	; 0x12
    3a68:	8a 89       	ldd	r24, Y+18	; 0x12
    3a6a:	84 30       	cpi	r24, 0x04	; 4
    3a6c:	08 f4       	brcc	.+2      	; 0x3a70 <KPD_u8GetPressedKey+0x1b4>
    3a6e:	43 cf       	rjmp	.-378    	; 0x38f6 <KPD_u8GetPressedKey+0x3a>
					break;
				}
			}
		}

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    3a70:	8b 89       	ldd	r24, Y+19	; 0x13
    3a72:	88 2f       	mov	r24, r24
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	fc 01       	movw	r30, r24
    3a78:	ec 50       	subi	r30, 0x0C	; 12
    3a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7c:	90 81       	ld	r25, Z
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	69 2f       	mov	r22, r25
    3a82:	41 e0       	ldi	r20, 0x01	; 1
    3a84:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
		if (Local_u8Flag == 1) {break;}
    3a88:	88 89       	ldd	r24, Y+16	; 0x10
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	39 f0       	breq	.+14     	; 0x3a9c <KPD_u8GetPressedKey+0x1e0>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    3a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a90:	8f 5f       	subi	r24, 0xFF	; 255
    3a92:	8b 8b       	std	Y+19, r24	; 0x13
    3a94:	8b 89       	ldd	r24, Y+19	; 0x13
    3a96:	84 30       	cpi	r24, 0x04	; 4
    3a98:	08 f4       	brcc	.+2      	; 0x3a9c <KPD_u8GetPressedKey+0x1e0>
    3a9a:	1f cf       	rjmp	.-450    	; 0x38da <KPD_u8GetPressedKey+0x1e>

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
		if (Local_u8Flag == 1) {break;}
	}

	return Local_u8ReturnedVal;
    3a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3a9e:	63 96       	adiw	r28, 0x13	; 19
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <EEPROM_VidWriteDataByte>:
#define uniquAdderess		0x50		// 0b01010000
/***********************************************/


void EEPROM_VidWriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8Data) // 0b01010011
{
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	61 97       	sbiw	r28, 0x11	; 17
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	98 8b       	std	Y+16, r25	; 0x10
    3ac6:	8f 87       	std	Y+15, r24	; 0x0f
    3ac8:	69 8b       	std	Y+17, r22	; 0x11
	/* Start condition */
	TWI_voidStartCondition();
    3aca:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TWI_voidStartCondition>

	/* Send Byte Address with write operation */
	TWI_voidSlaveAddressWrite(uniquAdderess|(A2<<2)|(Copy_u16ByteAddress>>8));
    3ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad0:	98 89       	ldd	r25, Y+16	; 0x10
    3ad2:	89 2f       	mov	r24, r25
    3ad4:	99 27       	eor	r25, r25
    3ad6:	80 65       	ori	r24, 0x50	; 80
    3ad8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ade:	0e 94 76 0d 	call	0x1aec	; 0x1aec <TWI_voidMasterSendData>

	/*Send Data*/
	TWI_voidMasterSendData(Copy_u8Data);
    3ae2:	89 89       	ldd	r24, Y+17	; 0x11
    3ae4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <TWI_voidMasterSendData>

	/* stop condition */
	TWI_voidStopCondition();
    3ae8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <TWI_voidStopCondition>
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	a0 e2       	ldi	r26, 0x20	; 32
    3af2:	b1 e4       	ldi	r27, 0x41	; 65
    3af4:	8b 87       	std	Y+11, r24	; 0x0b
    3af6:	9c 87       	std	Y+12, r25	; 0x0c
    3af8:	ad 87       	std	Y+13, r26	; 0x0d
    3afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	4a ef       	ldi	r20, 0xFA	; 250
    3b0a:	54 e4       	ldi	r21, 0x44	; 68
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	8f 83       	std	Y+7, r24	; 0x07
    3b16:	98 87       	std	Y+8, r25	; 0x08
    3b18:	a9 87       	std	Y+9, r26	; 0x09
    3b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1e:	78 85       	ldd	r23, Y+8	; 0x08
    3b20:	89 85       	ldd	r24, Y+9	; 0x09
    3b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e8       	ldi	r20, 0x80	; 128
    3b2a:	5f e3       	ldi	r21, 0x3F	; 63
    3b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b30:	88 23       	and	r24, r24
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <EEPROM_VidWriteDataByte+0x8e>
		__ticks = 1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9e 83       	std	Y+6, r25	; 0x06
    3b3a:	8d 83       	std	Y+5, r24	; 0x05
    3b3c:	3f c0       	rjmp	.+126    	; 0x3bbc <EEPROM_VidWriteDataByte+0x10c>
	else if (__tmp > 65535)
    3b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b40:	78 85       	ldd	r23, Y+8	; 0x08
    3b42:	89 85       	ldd	r24, Y+9	; 0x09
    3b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	4c f5       	brge	.+82     	; 0x3ba8 <EEPROM_VidWriteDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <EEPROM_VidWriteDataByte+0xee>
    3b80:	88 ec       	ldi	r24, 0xC8	; 200
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	9c 83       	std	Y+4, r25	; 0x04
    3b86:	8b 83       	std	Y+3, r24	; 0x03
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <EEPROM_VidWriteDataByte+0xdc>
    3b90:	9c 83       	std	Y+4, r25	; 0x04
    3b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b94:	8d 81       	ldd	r24, Y+5	; 0x05
    3b96:	9e 81       	ldd	r25, Y+6	; 0x06
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f7       	brne	.-38     	; 0x3b80 <EEPROM_VidWriteDataByte+0xd0>
    3ba6:	14 c0       	rjmp	.+40     	; 0x3bd0 <EEPROM_VidWriteDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    3baa:	78 85       	ldd	r23, Y+8	; 0x08
    3bac:	89 85       	ldd	r24, Y+9	; 0x09
    3bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	9e 83       	std	Y+6, r25	; 0x06
    3bba:	8d 83       	std	Y+5, r24	; 0x05
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <EEPROM_VidWriteDataByte+0x118>
    3bcc:	9a 83       	std	Y+2, r25	; 0x02
    3bce:	89 83       	std	Y+1, r24	; 0x01

	/* delay 5 ms for rewrite */
	_delay_ms(10);
}
    3bd0:	61 96       	adiw	r28, 0x11	; 17
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <EEPROM_u8ReadDataByte+0x6>
    3be8:	0f 92       	push	r0
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	9b 83       	std	Y+3, r25	; 0x03
    3bf0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8data;
	/* Start condition */
	TWI_voidStartCondition();
    3bf2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TWI_voidStartCondition>

	/*Send Byte Address with Write operation*/
	TWI_voidSlaveAddressWrite((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfa:	89 2f       	mov	r24, r25
    3bfc:	99 27       	eor	r25, r25
    3bfe:	80 65       	ori	r24, 0x50	; 80
    3c00:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	0e 94 76 0d 	call	0x1aec	; 0x1aec <TWI_voidMasterSendData>

	/*Send Repeat start condition*/
	TWI_voidStartCondition();
    3c0a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TWI_voidStartCondition>

	/*Send Byte Address with Read operation*/
	TWI_voidSlaveAddressRead((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	9b 81       	ldd	r25, Y+3	; 0x03
    3c12:	89 2f       	mov	r24, r25
    3c14:	99 27       	eor	r25, r25
    3c16:	80 65       	ori	r24, 0x50	; 80
    3c18:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TWI_voidSlaveAddressRead>

	Local_u8data = TWI_u8MasterReceiveData();
    3c1c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_u8MasterReceiveData>
    3c20:	89 83       	std	Y+1, r24	; 0x01

	/* stop condition */
	TWI_voidStopCondition();
    3c22:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <TWI_voidStopCondition>

	return Local_u8data;
    3c26:	89 81       	ldd	r24, Y+1	; 0x01

}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret

00003c34 <SSD_voidInit>:
#include "../../MCAL//DIO/DIO.h"
#include "SSD.h"



void SSD_voidInit(void){
    3c34:	df 93       	push	r29
    3c36:	cf 93       	push	r28
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SSD_PORT,DIO_OUTPUT_PORT);
    3c3c:	83 e0       	ldi	r24, 0x03	; 3
    3c3e:	6f ef       	ldi	r22, 0xFF	; 255
    3c40:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_voidSetPortDirection>
}
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <SSD_voidKPDToSSD>:

void SSD_voidKPDToSSD(u8 Copy_u8Char){
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	00 d0       	rcall	.+0      	; 0x3c50 <SSD_voidKPDToSSD+0x6>
    3c50:	0f 92       	push	r0
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Char){
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	28 2f       	mov	r18, r24
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	3b 83       	std	Y+3, r19	; 0x03
    3c60:	2a 83       	std	Y+2, r18	; 0x02
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	9b 81       	ldd	r25, Y+3	; 0x03
    3c66:	85 33       	cpi	r24, 0x35	; 53
    3c68:	91 05       	cpc	r25, r1
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <SSD_voidKPDToSSD+0x24>
    3c6c:	60 c0       	rjmp	.+192    	; 0x3d2e <SSD_voidKPDToSSD+0xe4>
    3c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c70:	3b 81       	ldd	r19, Y+3	; 0x03
    3c72:	26 33       	cpi	r18, 0x36	; 54
    3c74:	31 05       	cpc	r19, r1
    3c76:	0c f5       	brge	.+66     	; 0x3cba <SSD_voidKPDToSSD+0x70>
    3c78:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7c:	82 33       	cpi	r24, 0x32	; 50
    3c7e:	91 05       	cpc	r25, r1
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <SSD_voidKPDToSSD+0x3a>
    3c82:	46 c0       	rjmp	.+140    	; 0x3d10 <SSD_voidKPDToSSD+0xc6>
    3c84:	2a 81       	ldd	r18, Y+2	; 0x02
    3c86:	3b 81       	ldd	r19, Y+3	; 0x03
    3c88:	23 33       	cpi	r18, 0x33	; 51
    3c8a:	31 05       	cpc	r19, r1
    3c8c:	5c f4       	brge	.+22     	; 0x3ca4 <SSD_voidKPDToSSD+0x5a>
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	9b 81       	ldd	r25, Y+3	; 0x03
    3c92:	80 33       	cpi	r24, 0x30	; 48
    3c94:	91 05       	cpc	r25, r1
    3c96:	91 f1       	breq	.+100    	; 0x3cfc <SSD_voidKPDToSSD+0xb2>
    3c98:	2a 81       	ldd	r18, Y+2	; 0x02
    3c9a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c9c:	21 33       	cpi	r18, 0x31	; 49
    3c9e:	31 05       	cpc	r19, r1
    3ca0:	91 f1       	breq	.+100    	; 0x3d06 <SSD_voidKPDToSSD+0xbc>
    3ca2:	63 c0       	rjmp	.+198    	; 0x3d6a <SSD_voidKPDToSSD+0x120>
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca8:	83 33       	cpi	r24, 0x33	; 51
    3caa:	91 05       	cpc	r25, r1
    3cac:	b1 f1       	breq	.+108    	; 0x3d1a <SSD_voidKPDToSSD+0xd0>
    3cae:	2a 81       	ldd	r18, Y+2	; 0x02
    3cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    3cb2:	24 33       	cpi	r18, 0x34	; 52
    3cb4:	31 05       	cpc	r19, r1
    3cb6:	b1 f1       	breq	.+108    	; 0x3d24 <SSD_voidKPDToSSD+0xda>
    3cb8:	58 c0       	rjmp	.+176    	; 0x3d6a <SSD_voidKPDToSSD+0x120>
    3cba:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cbe:	88 33       	cpi	r24, 0x38	; 56
    3cc0:	91 05       	cpc	r25, r1
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <SSD_voidKPDToSSD+0x7c>
    3cc4:	43 c0       	rjmp	.+134    	; 0x3d4c <SSD_voidKPDToSSD+0x102>
    3cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3cc8:	3b 81       	ldd	r19, Y+3	; 0x03
    3cca:	29 33       	cpi	r18, 0x39	; 57
    3ccc:	31 05       	cpc	r19, r1
    3cce:	5c f4       	brge	.+22     	; 0x3ce6 <SSD_voidKPDToSSD+0x9c>
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	86 33       	cpi	r24, 0x36	; 54
    3cd6:	91 05       	cpc	r25, r1
    3cd8:	79 f1       	breq	.+94     	; 0x3d38 <SSD_voidKPDToSSD+0xee>
    3cda:	2a 81       	ldd	r18, Y+2	; 0x02
    3cdc:	3b 81       	ldd	r19, Y+3	; 0x03
    3cde:	27 33       	cpi	r18, 0x37	; 55
    3ce0:	31 05       	cpc	r19, r1
    3ce2:	79 f1       	breq	.+94     	; 0x3d42 <SSD_voidKPDToSSD+0xf8>
    3ce4:	42 c0       	rjmp	.+132    	; 0x3d6a <SSD_voidKPDToSSD+0x120>
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cea:	89 33       	cpi	r24, 0x39	; 57
    3cec:	91 05       	cpc	r25, r1
    3cee:	99 f1       	breq	.+102    	; 0x3d56 <SSD_voidKPDToSSD+0x10c>
    3cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    3cf2:	3b 81       	ldd	r19, Y+3	; 0x03
    3cf4:	23 34       	cpi	r18, 0x43	; 67
    3cf6:	31 05       	cpc	r19, r1
    3cf8:	99 f1       	breq	.+102    	; 0x3d60 <SSD_voidKPDToSSD+0x116>
    3cfa:	37 c0       	rjmp	.+110    	; 0x3d6a <SSD_voidKPDToSSD+0x120>
	case '0': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3cfc:	83 e0       	ldi	r24, 0x03	; 3
    3cfe:	6f e3       	ldi	r22, 0x3F	; 63
    3d00:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d04:	36 c0       	rjmp	.+108    	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '1': DIO_voidSetPortValue(SSD_PORT,ONE); break;
    3d06:	83 e0       	ldi	r24, 0x03	; 3
    3d08:	66 e0       	ldi	r22, 0x06	; 6
    3d0a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d0e:	31 c0       	rjmp	.+98     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '2': DIO_voidSetPortValue(SSD_PORT,TWO); break;
    3d10:	83 e0       	ldi	r24, 0x03	; 3
    3d12:	6b e5       	ldi	r22, 0x5B	; 91
    3d14:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d18:	2c c0       	rjmp	.+88     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '3': DIO_voidSetPortValue(SSD_PORT,THREE); break;
    3d1a:	83 e0       	ldi	r24, 0x03	; 3
    3d1c:	6f e4       	ldi	r22, 0x4F	; 79
    3d1e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d22:	27 c0       	rjmp	.+78     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '4': DIO_voidSetPortValue(SSD_PORT,FOUR); break;
    3d24:	83 e0       	ldi	r24, 0x03	; 3
    3d26:	66 e6       	ldi	r22, 0x66	; 102
    3d28:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d2c:	22 c0       	rjmp	.+68     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '5': DIO_voidSetPortValue(SSD_PORT,FIVE); break;
    3d2e:	83 e0       	ldi	r24, 0x03	; 3
    3d30:	6d e6       	ldi	r22, 0x6D	; 109
    3d32:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d36:	1d c0       	rjmp	.+58     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '6': DIO_voidSetPortValue(SSD_PORT,SIX); break;
    3d38:	83 e0       	ldi	r24, 0x03	; 3
    3d3a:	6d e7       	ldi	r22, 0x7D	; 125
    3d3c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d40:	18 c0       	rjmp	.+48     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '7': DIO_voidSetPortValue(SSD_PORT,SEVEN); break;
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	67 e0       	ldi	r22, 0x07	; 7
    3d46:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d4a:	13 c0       	rjmp	.+38     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '8': DIO_voidSetPortValue(SSD_PORT,EIGHT); break;
    3d4c:	83 e0       	ldi	r24, 0x03	; 3
    3d4e:	6f e7       	ldi	r22, 0x7F	; 127
    3d50:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d54:	0e c0       	rjmp	.+28     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case '9': DIO_voidSetPortValue(SSD_PORT,NINE); break;
    3d56:	83 e0       	ldi	r24, 0x03	; 3
    3d58:	6f e6       	ldi	r22, 0x6F	; 111
    3d5a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d5e:	09 c0       	rjmp	.+18     	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	case 'C': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3d60:	83 e0       	ldi	r24, 0x03	; 3
    3d62:	6f e3       	ldi	r22, 0x3F	; 63
    3d64:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
    3d68:	04 c0       	rjmp	.+8      	; 0x3d72 <SSD_voidKPDToSSD+0x128>
	default : DIO_voidSetPortValue(SSD_PORT,0b01001001); break;
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	69 e4       	ldi	r22, 0x49	; 73
    3d6e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_voidSetPortValue>
	}
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <main>:

u8 Global_SPI_Flag ='0';
u8 Global_LCD_VIEW = '0';
void SPICommunication(void);

int main(void){
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	ca 55       	subi	r28, 0x5A	; 90
    3d8c:	d0 40       	sbci	r29, 0x00	; 0
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61


	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);	// MOSI
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	65 e0       	ldi	r22, 0x05	; 5
    3d9c:	41 e0       	ldi	r20, 0x01	; 1
    3d9e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN6, DIO_INPUT);	// MISO
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	66 e0       	ldi	r22, 0x06	; 6
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);	// CK
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	67 e0       	ldi	r22, 0x07	; 7
    3db0:	41 e0       	ldi	r20, 0x01	; 1
    3db2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
    3db6:	fe 01       	movw	r30, r28
    3db8:	ef 5a       	subi	r30, 0xAF	; 175
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	a8 e4       	ldi	r26, 0x48	; 72
    3dc2:	b3 e4       	ldi	r27, 0x43	; 67
    3dc4:	80 83       	st	Z, r24
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	a2 83       	std	Z+2, r26	; 0x02
    3dca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dcc:	8e 01       	movw	r16, r28
    3dce:	03 5b       	subi	r16, 0xB3	; 179
    3dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ef 5a       	subi	r30, 0xAF	; 175
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	60 81       	ld	r22, Z
    3dda:	71 81       	ldd	r23, Z+1	; 0x01
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	93 81       	ldd	r25, Z+3	; 0x03
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	4a ef       	ldi	r20, 0xFA	; 250
    3de6:	54 e4       	ldi	r21, 0x44	; 68
    3de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	f8 01       	movw	r30, r16
    3df2:	80 83       	st	Z, r24
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	a2 83       	std	Z+2, r26	; 0x02
    3df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e3 5b       	subi	r30, 0xB3	; 179
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e8       	ldi	r20, 0x80	; 128
    3e0e:	5f e3       	ldi	r21, 0x3F	; 63
    3e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e14:	88 23       	and	r24, r24
    3e16:	44 f4       	brge	.+16     	; 0x3e28 <main+0xaa>
		__ticks = 1;
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e5 5b       	subi	r30, 0xB5	; 181
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	80 83       	st	Z, r24
    3e26:	64 c0       	rjmp	.+200    	; 0x3ef0 <main+0x172>
	else if (__tmp > 65535)
    3e28:	fe 01       	movw	r30, r28
    3e2a:	e3 5b       	subi	r30, 0xB3	; 179
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	60 81       	ld	r22, Z
    3e30:	71 81       	ldd	r23, Z+1	; 0x01
    3e32:	82 81       	ldd	r24, Z+2	; 0x02
    3e34:	93 81       	ldd	r25, Z+3	; 0x03
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	3f ef       	ldi	r19, 0xFF	; 255
    3e3a:	4f e7       	ldi	r20, 0x7F	; 127
    3e3c:	57 e4       	ldi	r21, 0x47	; 71
    3e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e42:	18 16       	cp	r1, r24
    3e44:	0c f0       	brlt	.+2      	; 0x3e48 <main+0xca>
    3e46:	43 c0       	rjmp	.+134    	; 0x3ece <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e48:	fe 01       	movw	r30, r28
    3e4a:	ef 5a       	subi	r30, 0xAF	; 175
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	60 81       	ld	r22, Z
    3e50:	71 81       	ldd	r23, Z+1	; 0x01
    3e52:	82 81       	ldd	r24, Z+2	; 0x02
    3e54:	93 81       	ldd	r25, Z+3	; 0x03
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e2       	ldi	r20, 0x20	; 32
    3e5c:	51 e4       	ldi	r21, 0x41	; 65
    3e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	8e 01       	movw	r16, r28
    3e68:	05 5b       	subi	r16, 0xB5	; 181
    3e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	f8 01       	movw	r30, r16
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	1f c0       	rjmp	.+62     	; 0x3ebe <main+0x140>
    3e80:	fe 01       	movw	r30, r28
    3e82:	e7 5b       	subi	r30, 0xB7	; 183
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	88 ec       	ldi	r24, 0xC8	; 200
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	80 83       	st	Z, r24
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e7 5b       	subi	r30, 0xB7	; 183
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	80 81       	ld	r24, Z
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <main+0x11a>
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e7 5b       	subi	r30, 0xB7	; 183
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea6:	de 01       	movw	r26, r28
    3ea8:	a5 5b       	subi	r26, 0xB5	; 181
    3eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3eac:	fe 01       	movw	r30, r28
    3eae:	e5 5b       	subi	r30, 0xB5	; 181
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	11 96       	adiw	r26, 0x01	; 1
    3eba:	9c 93       	st	X, r25
    3ebc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e5 5b       	subi	r30, 0xB5	; 181
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	80 81       	ld	r24, Z
    3ec6:	91 81       	ldd	r25, Z+1	; 0x01
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	d1 f6       	brne	.-76     	; 0x3e80 <main+0x102>
    3ecc:	27 c0       	rjmp	.+78     	; 0x3f1c <main+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ece:	8e 01       	movw	r16, r28
    3ed0:	05 5b       	subi	r16, 0xB5	; 181
    3ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e3 5b       	subi	r30, 0xB3	; 179
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	60 81       	ld	r22, Z
    3edc:	71 81       	ldd	r23, Z+1	; 0x01
    3ede:	82 81       	ldd	r24, Z+2	; 0x02
    3ee0:	93 81       	ldd	r25, Z+3	; 0x03
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	f8 01       	movw	r30, r16
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
    3ef0:	de 01       	movw	r26, r28
    3ef2:	a9 5b       	subi	r26, 0xB9	; 185
    3ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e5 5b       	subi	r30, 0xB5	; 181
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	8d 93       	st	X+, r24
    3f02:	9c 93       	st	X, r25
    3f04:	fe 01       	movw	r30, r28
    3f06:	e9 5b       	subi	r30, 0xB9	; 185
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	f1 f7       	brne	.-4      	; 0x3f0e <main+0x190>
    3f12:	fe 01       	movw	r30, r28
    3f14:	e9 5b       	subi	r30, 0xB9	; 185
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
	_delay_ms(200);
	SPI_voidInit();
    3f1c:	0e 94 29 0a 	call	0x1452	; 0x1452 <SPI_voidInit>
    3f20:	fe 01       	movw	r30, r28
    3f22:	ed 5b       	subi	r30, 0xBD	; 189
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	a8 e4       	ldi	r26, 0x48	; 72
    3f2c:	b3 e4       	ldi	r27, 0x43	; 67
    3f2e:	80 83       	st	Z, r24
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	a2 83       	std	Z+2, r26	; 0x02
    3f34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f36:	8e 01       	movw	r16, r28
    3f38:	01 5c       	subi	r16, 0xC1	; 193
    3f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	ed 5b       	subi	r30, 0xBD	; 189
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	60 81       	ld	r22, Z
    3f44:	71 81       	ldd	r23, Z+1	; 0x01
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	93 81       	ldd	r25, Z+3	; 0x03
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	4a ef       	ldi	r20, 0xFA	; 250
    3f50:	54 e4       	ldi	r21, 0x44	; 68
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	80 83       	st	Z, r24
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	a2 83       	std	Z+2, r26	; 0x02
    3f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f64:	fe 01       	movw	r30, r28
    3f66:	ff 96       	adiw	r30, 0x3f	; 63
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e8       	ldi	r20, 0x80	; 128
    3f76:	5f e3       	ldi	r21, 0x3F	; 63
    3f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7c:	88 23       	and	r24, r24
    3f7e:	2c f4       	brge	.+10     	; 0x3f8a <main+0x20c>
		__ticks = 1;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	9e af       	std	Y+62, r25	; 0x3e
    3f86:	8d af       	std	Y+61, r24	; 0x3d
    3f88:	46 c0       	rjmp	.+140    	; 0x4016 <main+0x298>
	else if (__tmp > 65535)
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	ff 96       	adiw	r30, 0x3f	; 63
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	3f ef       	ldi	r19, 0xFF	; 255
    3f9a:	4f e7       	ldi	r20, 0x7F	; 127
    3f9c:	57 e4       	ldi	r21, 0x47	; 71
    3f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa2:	18 16       	cp	r1, r24
    3fa4:	64 f5       	brge	.+88     	; 0x3ffe <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ed 5b       	subi	r30, 0xBD	; 189
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	93 81       	ldd	r25, Z+3	; 0x03
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e2       	ldi	r20, 0x20	; 32
    3fba:	51 e4       	ldi	r21, 0x41	; 65
    3fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	cd 01       	movw	r24, r26
    3fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	9e af       	std	Y+62, r25	; 0x3e
    3fd2:	8d af       	std	Y+61, r24	; 0x3d
    3fd4:	0f c0       	rjmp	.+30     	; 0x3ff4 <main+0x276>
    3fd6:	88 ec       	ldi	r24, 0xC8	; 200
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	9c af       	std	Y+60, r25	; 0x3c
    3fdc:	8b af       	std	Y+59, r24	; 0x3b
    3fde:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fe0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <main+0x264>
    3fe6:	9c af       	std	Y+60, r25	; 0x3c
    3fe8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	9e af       	std	Y+62, r25	; 0x3e
    3ff2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ff6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ff8:	00 97       	sbiw	r24, 0x00	; 0
    3ffa:	69 f7       	brne	.-38     	; 0x3fd6 <main+0x258>
    3ffc:	16 c0       	rjmp	.+44     	; 0x402a <main+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffe:	fe 01       	movw	r30, r28
    4000:	ff 96       	adiw	r30, 0x3f	; 63
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	9e af       	std	Y+62, r25	; 0x3e
    4014:	8d af       	std	Y+61, r24	; 0x3d
    4016:	8d ad       	ldd	r24, Y+61	; 0x3d
    4018:	9e ad       	ldd	r25, Y+62	; 0x3e
    401a:	9a af       	std	Y+58, r25	; 0x3a
    401c:	89 af       	std	Y+57, r24	; 0x39
    401e:	89 ad       	ldd	r24, Y+57	; 0x39
    4020:	9a ad       	ldd	r25, Y+58	; 0x3a
    4022:	01 97       	sbiw	r24, 0x01	; 1
    4024:	f1 f7       	brne	.-4      	; 0x4022 <main+0x2a4>
    4026:	9a af       	std	Y+58, r25	; 0x3a
    4028:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);


	TIM0_voidInit();
    402a:	0e 94 28 08 	call	0x1050	; 0x1050 <TIM0_voidInit>
//	/* 8 Ms/ 8 >> 1M HZ >> tick time = 1/ 1M  = 1 Micro second >> overflow time = 256 * tick time = 256 micro sec  */
//	/* 1/ (256 micro sec) = 3906.25 */
//	/* ((0.25) * 256) = 64 >>> 256 - 64 = 192 */
	TIM0_voidTimerStart(TIM0_PRESCALER_8);
    402e:	82 e0       	ldi	r24, 0x02	; 2
    4030:	0e 94 4b 08 	call	0x1096	; 0x1096 <TIM0_voidTimerStart>
	sei();
    4034:	78 94       	sei
	TIM0_voidOvrINTControl(TIM0_TIN_EABLE);
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	0e 94 64 08 	call	0x10c8	; 0x10c8 <TIM0_voidOvrINTControl>
	TIM0_voidOvfCallback(SPICommunication);
    403c:	8f ec       	ldi	r24, 0xCF	; 207
    403e:	92 e2       	ldi	r25, 0x22	; 34
    4040:	0e 94 ab 09 	call	0x1356	; 0x1356 <TIM0_voidOvfCallback>

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT); //correct
    4044:	83 e0       	ldi	r24, 0x03	; 3
    4046:	66 e0       	ldi	r22, 0x06	; 6
    4048:	41 e0       	ldi	r20, 0x01	; 1
    404a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT); //ALARM
    404e:	83 e0       	ldi	r24, 0x03	; 3
    4050:	67 e0       	ldi	r22, 0x07	; 7
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DIO_voidSetPinDirection>
	LCD_voidInit();
    4058:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_voidInit>
	KPD_voidInit();
    405c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <KPD_voidInit>

	/* password is 000 */
	u8 Local_u8APass[3] ;
	u8 Local_u8Key;
	u8 local_u8flag = 0;
    4060:	fe 01       	movw	r30, r28
    4062:	ea 5a       	subi	r30, 0xAA	; 170
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	10 82       	st	Z, r1
	while(1){
		for(u8 i =0; i<3;){
    4068:	fe 01       	movw	r30, r28
    406a:	eb 5a       	subi	r30, 0xAB	; 171
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	10 82       	st	Z, r1
    4070:	c6 c0       	rjmp	.+396    	; 0x41fe <main+0x480>
			Local_u8Key = KPD_u8GetPressedKey();
    4072:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <KPD_u8GetPressedKey>
    4076:	fe 01       	movw	r30, r28
    4078:	e9 5a       	subi	r30, 0xA9	; 169
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 83       	st	Z, r24
			if( Local_u8Key != KPD_CHECK_BUTTON_PRESSED_OR_NOT ){
    407e:	fe 01       	movw	r30, r28
    4080:	e9 5a       	subi	r30, 0xA9	; 169
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	80 81       	ld	r24, Z
    4086:	8f 3f       	cpi	r24, 0xFF	; 255
    4088:	09 f4       	brne	.+2      	; 0x408c <main+0x30e>
    408a:	b9 c0       	rjmp	.+370    	; 0x41fe <main+0x480>
				Global_LCD_VIEW = '1';
    408c:	81 e3       	ldi	r24, 0x31	; 49
    408e:	80 93 fd 01 	sts	0x01FD, r24
				if(Local_u8Key == 'C'){
    4092:	fe 01       	movw	r30, r28
    4094:	e9 5a       	subi	r30, 0xA9	; 169
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	83 34       	cpi	r24, 0x43	; 67
    409c:	09 f0       	breq	.+2      	; 0x40a0 <main+0x322>
    409e:	88 c0       	rjmp	.+272    	; 0x41b0 <main+0x432>
					LCD_voidSendCommand(CLEAR);
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	a0 ea       	ldi	r26, 0xA0	; 160
    40ac:	b1 e4       	ldi	r27, 0x41	; 65
    40ae:	8d ab       	std	Y+53, r24	; 0x35
    40b0:	9e ab       	std	Y+54, r25	; 0x36
    40b2:	af ab       	std	Y+55, r26	; 0x37
    40b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b6:	6d a9       	ldd	r22, Y+53	; 0x35
    40b8:	7e a9       	ldd	r23, Y+54	; 0x36
    40ba:	8f a9       	ldd	r24, Y+55	; 0x37
    40bc:	98 ad       	ldd	r25, Y+56	; 0x38
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4a ef       	ldi	r20, 0xFA	; 250
    40c4:	54 e4       	ldi	r21, 0x44	; 68
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	89 ab       	std	Y+49, r24	; 0x31
    40d0:	9a ab       	std	Y+50, r25	; 0x32
    40d2:	ab ab       	std	Y+51, r26	; 0x33
    40d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40d6:	69 a9       	ldd	r22, Y+49	; 0x31
    40d8:	7a a9       	ldd	r23, Y+50	; 0x32
    40da:	8b a9       	ldd	r24, Y+51	; 0x33
    40dc:	9c a9       	ldd	r25, Y+52	; 0x34
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	40 e8       	ldi	r20, 0x80	; 128
    40e4:	5f e3       	ldi	r21, 0x3F	; 63
    40e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ea:	88 23       	and	r24, r24
    40ec:	2c f4       	brge	.+10     	; 0x40f8 <main+0x37a>
		__ticks = 1;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	98 ab       	std	Y+48, r25	; 0x30
    40f4:	8f a7       	std	Y+47, r24	; 0x2f
    40f6:	3f c0       	rjmp	.+126    	; 0x4176 <main+0x3f8>
	else if (__tmp > 65535)
    40f8:	69 a9       	ldd	r22, Y+49	; 0x31
    40fa:	7a a9       	ldd	r23, Y+50	; 0x32
    40fc:	8b a9       	ldd	r24, Y+51	; 0x33
    40fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	3f ef       	ldi	r19, 0xFF	; 255
    4104:	4f e7       	ldi	r20, 0x7F	; 127
    4106:	57 e4       	ldi	r21, 0x47	; 71
    4108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    410c:	18 16       	cp	r1, r24
    410e:	4c f5       	brge	.+82     	; 0x4162 <main+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4110:	6d a9       	ldd	r22, Y+53	; 0x35
    4112:	7e a9       	ldd	r23, Y+54	; 0x36
    4114:	8f a9       	ldd	r24, Y+55	; 0x37
    4116:	98 ad       	ldd	r25, Y+56	; 0x38
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e2       	ldi	r20, 0x20	; 32
    411e:	51 e4       	ldi	r21, 0x41	; 65
    4120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	bc 01       	movw	r22, r24
    412a:	cd 01       	movw	r24, r26
    412c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	98 ab       	std	Y+48, r25	; 0x30
    4136:	8f a7       	std	Y+47, r24	; 0x2f
    4138:	0f c0       	rjmp	.+30     	; 0x4158 <main+0x3da>
    413a:	88 ec       	ldi	r24, 0xC8	; 200
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	9e a7       	std	Y+46, r25	; 0x2e
    4140:	8d a7       	std	Y+45, r24	; 0x2d
    4142:	8d a5       	ldd	r24, Y+45	; 0x2d
    4144:	9e a5       	ldd	r25, Y+46	; 0x2e
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <main+0x3c8>
    414a:	9e a7       	std	Y+46, r25	; 0x2e
    414c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    414e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4150:	98 a9       	ldd	r25, Y+48	; 0x30
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	98 ab       	std	Y+48, r25	; 0x30
    4156:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4158:	8f a5       	ldd	r24, Y+47	; 0x2f
    415a:	98 a9       	ldd	r25, Y+48	; 0x30
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	69 f7       	brne	.-38     	; 0x413a <main+0x3bc>
    4160:	14 c0       	rjmp	.+40     	; 0x418a <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4162:	69 a9       	ldd	r22, Y+49	; 0x31
    4164:	7a a9       	ldd	r23, Y+50	; 0x32
    4166:	8b a9       	ldd	r24, Y+51	; 0x33
    4168:	9c a9       	ldd	r25, Y+52	; 0x34
    416a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	98 ab       	std	Y+48, r25	; 0x30
    4174:	8f a7       	std	Y+47, r24	; 0x2f
    4176:	8f a5       	ldd	r24, Y+47	; 0x2f
    4178:	98 a9       	ldd	r25, Y+48	; 0x30
    417a:	9c a7       	std	Y+44, r25	; 0x2c
    417c:	8b a7       	std	Y+43, r24	; 0x2b
    417e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4180:	9c a5       	ldd	r25, Y+44	; 0x2c
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <main+0x404>
    4186:	9c a7       	std	Y+44, r25	; 0x2c
    4188:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(20);
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    418a:	83 e0       	ldi	r24, 0x03	; 3
    418c:	66 e0       	ldi	r22, 0x06	; 6
    418e:	40 e0       	ldi	r20, 0x00	; 0
    4190:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    4194:	83 e0       	ldi	r24, 0x03	; 3
    4196:	67 e0       	ldi	r22, 0x07	; 7
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
					local_u8flag =0;
    419e:	fe 01       	movw	r30, r28
    41a0:	ea 5a       	subi	r30, 0xAA	; 170
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	10 82       	st	Z, r1
					i =0;
    41a6:	fe 01       	movw	r30, r28
    41a8:	eb 5a       	subi	r30, 0xAB	; 171
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	10 82       	st	Z, r1
    41ae:	27 c0       	rjmp	.+78     	; 0x41fe <main+0x480>
					continue;
				}
				Local_u8APass[i] = Local_u8Key;
    41b0:	fe 01       	movw	r30, r28
    41b2:	eb 5a       	subi	r30, 0xAB	; 171
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	ce 01       	movw	r24, r28
    41be:	88 5a       	subi	r24, 0xA8	; 168
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	dc 01       	movw	r26, r24
    41c4:	a2 0f       	add	r26, r18
    41c6:	b3 1f       	adc	r27, r19
    41c8:	fe 01       	movw	r30, r28
    41ca:	e9 5a       	subi	r30, 0xA9	; 169
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	8c 93       	st	X, r24
				LCD_voidSetLocation(LCD_LINE1,i);
    41d2:	fe 01       	movw	r30, r28
    41d4:	eb 5a       	subi	r30, 0xAB	; 171
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	60 81       	ld	r22, Z
    41dc:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendChar(Local_u8Key);
    41e0:	fe 01       	movw	r30, r28
    41e2:	e9 5a       	subi	r30, 0xA9	; 169
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	0e 94 84 19 	call	0x3308	; 0x3308 <LCD_voidSendChar>
				i++;
    41ec:	de 01       	movw	r26, r28
    41ee:	ab 5a       	subi	r26, 0xAB	; 171
    41f0:	bf 4f       	sbci	r27, 0xFF	; 255
    41f2:	fe 01       	movw	r30, r28
    41f4:	eb 5a       	subi	r30, 0xAB	; 171
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	80 81       	ld	r24, Z
    41fa:	8f 5f       	subi	r24, 0xFF	; 255
    41fc:	8c 93       	st	X, r24
	/* password is 000 */
	u8 Local_u8APass[3] ;
	u8 Local_u8Key;
	u8 local_u8flag = 0;
	while(1){
		for(u8 i =0; i<3;){
    41fe:	fe 01       	movw	r30, r28
    4200:	eb 5a       	subi	r30, 0xAB	; 171
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	80 81       	ld	r24, Z
    4206:	83 30       	cpi	r24, 0x03	; 3
    4208:	08 f4       	brcc	.+2      	; 0x420c <main+0x48e>
    420a:	33 cf       	rjmp	.-410    	; 0x4072 <main+0x2f4>
				LCD_voidSetLocation(LCD_LINE1,i);
				LCD_voidSendChar(Local_u8Key);
				i++;
			}
		}
		if((Local_u8APass[0] == '0')&&(Local_u8APass[1] == '0')&&(Local_u8APass[2] == '0')){
    420c:	fe 01       	movw	r30, r28
    420e:	e8 5a       	subi	r30, 0xA8	; 168
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	80 81       	ld	r24, Z
    4214:	80 33       	cpi	r24, 0x30	; 48
    4216:	09 f0       	breq	.+2      	; 0x421a <main+0x49c>
    4218:	a0 c0       	rjmp	.+320    	; 0x435a <main+0x5dc>
    421a:	fe 01       	movw	r30, r28
    421c:	e8 5a       	subi	r30, 0xA8	; 168
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	81 81       	ldd	r24, Z+1	; 0x01
    4222:	80 33       	cpi	r24, 0x30	; 48
    4224:	09 f0       	breq	.+2      	; 0x4228 <main+0x4aa>
    4226:	99 c0       	rjmp	.+306    	; 0x435a <main+0x5dc>
    4228:	fe 01       	movw	r30, r28
    422a:	e8 5a       	subi	r30, 0xA8	; 168
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	80 33       	cpi	r24, 0x30	; 48
    4232:	09 f0       	breq	.+2      	; 0x4236 <main+0x4b8>
    4234:	92 c0       	rjmp	.+292    	; 0x435a <main+0x5dc>

			LCD_voidSendCommand(CLEAR);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a0 ea       	ldi	r26, 0xA0	; 160
    4242:	b1 e4       	ldi	r27, 0x41	; 65
    4244:	8f a3       	std	Y+39, r24	; 0x27
    4246:	98 a7       	std	Y+40, r25	; 0x28
    4248:	a9 a7       	std	Y+41, r26	; 0x29
    424a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	6f a1       	ldd	r22, Y+39	; 0x27
    424e:	78 a5       	ldd	r23, Y+40	; 0x28
    4250:	89 a5       	ldd	r24, Y+41	; 0x29
    4252:	9a a5       	ldd	r25, Y+42	; 0x2a
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	4a ef       	ldi	r20, 0xFA	; 250
    425a:	54 e4       	ldi	r21, 0x44	; 68
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	8b a3       	std	Y+35, r24	; 0x23
    4266:	9c a3       	std	Y+36, r25	; 0x24
    4268:	ad a3       	std	Y+37, r26	; 0x25
    426a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    426c:	6b a1       	ldd	r22, Y+35	; 0x23
    426e:	7c a1       	ldd	r23, Y+36	; 0x24
    4270:	8d a1       	ldd	r24, Y+37	; 0x25
    4272:	9e a1       	ldd	r25, Y+38	; 0x26
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e8       	ldi	r20, 0x80	; 128
    427a:	5f e3       	ldi	r21, 0x3F	; 63
    427c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4280:	88 23       	and	r24, r24
    4282:	2c f4       	brge	.+10     	; 0x428e <main+0x510>
		__ticks = 1;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	9a a3       	std	Y+34, r25	; 0x22
    428a:	89 a3       	std	Y+33, r24	; 0x21
    428c:	3f c0       	rjmp	.+126    	; 0x430c <main+0x58e>
	else if (__tmp > 65535)
    428e:	6b a1       	ldd	r22, Y+35	; 0x23
    4290:	7c a1       	ldd	r23, Y+36	; 0x24
    4292:	8d a1       	ldd	r24, Y+37	; 0x25
    4294:	9e a1       	ldd	r25, Y+38	; 0x26
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	4f e7       	ldi	r20, 0x7F	; 127
    429c:	57 e4       	ldi	r21, 0x47	; 71
    429e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a2:	18 16       	cp	r1, r24
    42a4:	4c f5       	brge	.+82     	; 0x42f8 <main+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a6:	6f a1       	ldd	r22, Y+39	; 0x27
    42a8:	78 a5       	ldd	r23, Y+40	; 0x28
    42aa:	89 a5       	ldd	r24, Y+41	; 0x29
    42ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e2       	ldi	r20, 0x20	; 32
    42b4:	51 e4       	ldi	r21, 0x41	; 65
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9a a3       	std	Y+34, r25	; 0x22
    42cc:	89 a3       	std	Y+33, r24	; 0x21
    42ce:	0f c0       	rjmp	.+30     	; 0x42ee <main+0x570>
    42d0:	88 ec       	ldi	r24, 0xC8	; 200
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	98 a3       	std	Y+32, r25	; 0x20
    42d6:	8f 8f       	std	Y+31, r24	; 0x1f
    42d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42da:	98 a1       	ldd	r25, Y+32	; 0x20
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	f1 f7       	brne	.-4      	; 0x42dc <main+0x55e>
    42e0:	98 a3       	std	Y+32, r25	; 0x20
    42e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e4:	89 a1       	ldd	r24, Y+33	; 0x21
    42e6:	9a a1       	ldd	r25, Y+34	; 0x22
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	9a a3       	std	Y+34, r25	; 0x22
    42ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ee:	89 a1       	ldd	r24, Y+33	; 0x21
    42f0:	9a a1       	ldd	r25, Y+34	; 0x22
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	69 f7       	brne	.-38     	; 0x42d0 <main+0x552>
    42f6:	14 c0       	rjmp	.+40     	; 0x4320 <main+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f8:	6b a1       	ldd	r22, Y+35	; 0x23
    42fa:	7c a1       	ldd	r23, Y+36	; 0x24
    42fc:	8d a1       	ldd	r24, Y+37	; 0x25
    42fe:	9e a1       	ldd	r25, Y+38	; 0x26
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9a a3       	std	Y+34, r25	; 0x22
    430a:	89 a3       	std	Y+33, r24	; 0x21
    430c:	89 a1       	ldd	r24, Y+33	; 0x21
    430e:	9a a1       	ldd	r25, Y+34	; 0x22
    4310:	9e 8f       	std	Y+30, r25	; 0x1e
    4312:	8d 8f       	std	Y+29, r24	; 0x1d
    4314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4316:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <main+0x59a>
    431c:	9e 8f       	std	Y+30, r25	; 0x1e
    431e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(20);
			LCD_voidSetLocation(LCD_LINE2,2);
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	62 e0       	ldi	r22, 0x02	; 2
    4324:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
			LCD_voidSendString("correct!");
    4328:	80 e6       	ldi	r24, 0x60	; 96
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    4330:	83 e0       	ldi	r24, 0x03	; 3
    4332:	66 e0       	ldi	r22, 0x06	; 6
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    433a:	83 e0       	ldi	r24, 0x03	; 3
    433c:	67 e0       	ldi	r22, 0x07	; 7
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
			local_u8flag = 0;
    4344:	fe 01       	movw	r30, r28
    4346:	ea 5a       	subi	r30, 0xAA	; 170
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	10 82       	st	Z, r1
			Global_SPI_Flag = 'c';
    434c:	83 e6       	ldi	r24, 0x63	; 99
    434e:	80 93 fc 01 	sts	0x01FC, r24
			Global_LCD_VIEW = '0';
    4352:	80 e3       	ldi	r24, 0x30	; 48
    4354:	80 93 fd 01 	sts	0x01FD, r24
    4358:	90 c0       	rjmp	.+288    	; 0x447a <main+0x6fc>
		}
		else{
			if(local_u8flag<=2){
    435a:	fe 01       	movw	r30, r28
    435c:	ea 5a       	subi	r30, 0xAA	; 170
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	80 81       	ld	r24, Z
    4362:	83 30       	cpi	r24, 0x03	; 3
    4364:	08 f0       	brcs	.+2      	; 0x4368 <main+0x5ea>
    4366:	89 c0       	rjmp	.+274    	; 0x447a <main+0x6fc>
				LCD_voidSendCommand(CLEAR);
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	a0 ea       	ldi	r26, 0xA0	; 160
    4374:	b1 e4       	ldi	r27, 0x41	; 65
    4376:	89 8f       	std	Y+25, r24	; 0x19
    4378:	9a 8f       	std	Y+26, r25	; 0x1a
    437a:	ab 8f       	std	Y+27, r26	; 0x1b
    437c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437e:	69 8d       	ldd	r22, Y+25	; 0x19
    4380:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	4a ef       	ldi	r20, 0xFA	; 250
    438c:	54 e4       	ldi	r21, 0x44	; 68
    438e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	8d 8b       	std	Y+21, r24	; 0x15
    4398:	9e 8b       	std	Y+22, r25	; 0x16
    439a:	af 8b       	std	Y+23, r26	; 0x17
    439c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    439e:	6d 89       	ldd	r22, Y+21	; 0x15
    43a0:	7e 89       	ldd	r23, Y+22	; 0x16
    43a2:	8f 89       	ldd	r24, Y+23	; 0x17
    43a4:	98 8d       	ldd	r25, Y+24	; 0x18
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e8       	ldi	r20, 0x80	; 128
    43ac:	5f e3       	ldi	r21, 0x3F	; 63
    43ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43b2:	88 23       	and	r24, r24
    43b4:	2c f4       	brge	.+10     	; 0x43c0 <main+0x642>
		__ticks = 1;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	9c 8b       	std	Y+20, r25	; 0x14
    43bc:	8b 8b       	std	Y+19, r24	; 0x13
    43be:	3f c0       	rjmp	.+126    	; 0x443e <main+0x6c0>
	else if (__tmp > 65535)
    43c0:	6d 89       	ldd	r22, Y+21	; 0x15
    43c2:	7e 89       	ldd	r23, Y+22	; 0x16
    43c4:	8f 89       	ldd	r24, Y+23	; 0x17
    43c6:	98 8d       	ldd	r25, Y+24	; 0x18
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	3f ef       	ldi	r19, 0xFF	; 255
    43cc:	4f e7       	ldi	r20, 0x7F	; 127
    43ce:	57 e4       	ldi	r21, 0x47	; 71
    43d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43d4:	18 16       	cp	r1, r24
    43d6:	4c f5       	brge	.+82     	; 0x442a <main+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d8:	69 8d       	ldd	r22, Y+25	; 0x19
    43da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e2       	ldi	r20, 0x20	; 32
    43e6:	51 e4       	ldi	r21, 0x41	; 65
    43e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	bc 01       	movw	r22, r24
    43f2:	cd 01       	movw	r24, r26
    43f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	9c 8b       	std	Y+20, r25	; 0x14
    43fe:	8b 8b       	std	Y+19, r24	; 0x13
    4400:	0f c0       	rjmp	.+30     	; 0x4420 <main+0x6a2>
    4402:	88 ec       	ldi	r24, 0xC8	; 200
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	9a 8b       	std	Y+18, r25	; 0x12
    4408:	89 8b       	std	Y+17, r24	; 0x11
    440a:	89 89       	ldd	r24, Y+17	; 0x11
    440c:	9a 89       	ldd	r25, Y+18	; 0x12
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <main+0x690>
    4412:	9a 8b       	std	Y+18, r25	; 0x12
    4414:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4416:	8b 89       	ldd	r24, Y+19	; 0x13
    4418:	9c 89       	ldd	r25, Y+20	; 0x14
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	9c 8b       	std	Y+20, r25	; 0x14
    441e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4420:	8b 89       	ldd	r24, Y+19	; 0x13
    4422:	9c 89       	ldd	r25, Y+20	; 0x14
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	69 f7       	brne	.-38     	; 0x4402 <main+0x684>
    4428:	14 c0       	rjmp	.+40     	; 0x4452 <main+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    442a:	6d 89       	ldd	r22, Y+21	; 0x15
    442c:	7e 89       	ldd	r23, Y+22	; 0x16
    442e:	8f 89       	ldd	r24, Y+23	; 0x17
    4430:	98 8d       	ldd	r25, Y+24	; 0x18
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9c 8b       	std	Y+20, r25	; 0x14
    443c:	8b 8b       	std	Y+19, r24	; 0x13
    443e:	8b 89       	ldd	r24, Y+19	; 0x13
    4440:	9c 89       	ldd	r25, Y+20	; 0x14
    4442:	98 8b       	std	Y+16, r25	; 0x10
    4444:	8f 87       	std	Y+15, r24	; 0x0f
    4446:	8f 85       	ldd	r24, Y+15	; 0x0f
    4448:	98 89       	ldd	r25, Y+16	; 0x10
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <main+0x6cc>
    444e:	98 8b       	std	Y+16, r25	; 0x10
    4450:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidSetLocation(LCD_LINE2,0);
    4452:	82 e0       	ldi	r24, 0x02	; 2
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("please try again!");
    445a:	89 e6       	ldi	r24, 0x69	; 105
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				Global_SPI_Flag = 'p';
    4462:	80 e7       	ldi	r24, 0x70	; 112
    4464:	80 93 fc 01 	sts	0x01FC, r24
				local_u8flag ++;
    4468:	de 01       	movw	r26, r28
    446a:	aa 5a       	subi	r26, 0xAA	; 170
    446c:	bf 4f       	sbci	r27, 0xFF	; 255
    446e:	fe 01       	movw	r30, r28
    4470:	ea 5a       	subi	r30, 0xAA	; 170
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	80 81       	ld	r24, Z
    4476:	8f 5f       	subi	r24, 0xFF	; 255
    4478:	8c 93       	st	X, r24
			}
		}
		if(local_u8flag == 3){
    447a:	fe 01       	movw	r30, r28
    447c:	ea 5a       	subi	r30, 0xAA	; 170
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	80 81       	ld	r24, Z
    4482:	83 30       	cpi	r24, 0x03	; 3
    4484:	09 f0       	breq	.+2      	; 0x4488 <main+0x70a>
    4486:	f0 cd       	rjmp	.-1056   	; 0x4068 <main+0x2ea>
			LCD_voidSendCommand(CLEAR);
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	a0 ea       	ldi	r26, 0xA0	; 160
    4494:	b1 e4       	ldi	r27, 0x41	; 65
    4496:	8b 87       	std	Y+11, r24	; 0x0b
    4498:	9c 87       	std	Y+12, r25	; 0x0c
    449a:	ad 87       	std	Y+13, r26	; 0x0d
    449c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449e:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	4a ef       	ldi	r20, 0xFA	; 250
    44ac:	54 e4       	ldi	r21, 0x44	; 68
    44ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	8f 83       	std	Y+7, r24	; 0x07
    44b8:	98 87       	std	Y+8, r25	; 0x08
    44ba:	a9 87       	std	Y+9, r26	; 0x09
    44bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44be:	6f 81       	ldd	r22, Y+7	; 0x07
    44c0:	78 85       	ldd	r23, Y+8	; 0x08
    44c2:	89 85       	ldd	r24, Y+9	; 0x09
    44c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	5f e3       	ldi	r21, 0x3F	; 63
    44ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d2:	88 23       	and	r24, r24
    44d4:	2c f4       	brge	.+10     	; 0x44e0 <main+0x762>
		__ticks = 1;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
    44de:	3f c0       	rjmp	.+126    	; 0x455e <main+0x7e0>
	else if (__tmp > 65535)
    44e0:	6f 81       	ldd	r22, Y+7	; 0x07
    44e2:	78 85       	ldd	r23, Y+8	; 0x08
    44e4:	89 85       	ldd	r24, Y+9	; 0x09
    44e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	3f ef       	ldi	r19, 0xFF	; 255
    44ec:	4f e7       	ldi	r20, 0x7F	; 127
    44ee:	57 e4       	ldi	r21, 0x47	; 71
    44f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44f4:	18 16       	cp	r1, r24
    44f6:	4c f5       	brge	.+82     	; 0x454a <main+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e2       	ldi	r20, 0x20	; 32
    4506:	51 e4       	ldi	r21, 0x41	; 65
    4508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	bc 01       	movw	r22, r24
    4512:	cd 01       	movw	r24, r26
    4514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	9e 83       	std	Y+6, r25	; 0x06
    451e:	8d 83       	std	Y+5, r24	; 0x05
    4520:	0f c0       	rjmp	.+30     	; 0x4540 <main+0x7c2>
    4522:	88 ec       	ldi	r24, 0xC8	; 200
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9c 83       	std	Y+4, r25	; 0x04
    4528:	8b 83       	std	Y+3, r24	; 0x03
    452a:	8b 81       	ldd	r24, Y+3	; 0x03
    452c:	9c 81       	ldd	r25, Y+4	; 0x04
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <main+0x7b0>
    4532:	9c 83       	std	Y+4, r25	; 0x04
    4534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4536:	8d 81       	ldd	r24, Y+5	; 0x05
    4538:	9e 81       	ldd	r25, Y+6	; 0x06
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4540:	8d 81       	ldd	r24, Y+5	; 0x05
    4542:	9e 81       	ldd	r25, Y+6	; 0x06
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	69 f7       	brne	.-38     	; 0x4522 <main+0x7a4>
    4548:	14 c0       	rjmp	.+40     	; 0x4572 <main+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454a:	6f 81       	ldd	r22, Y+7	; 0x07
    454c:	78 85       	ldd	r23, Y+8	; 0x08
    454e:	89 85       	ldd	r24, Y+9	; 0x09
    4550:	9a 85       	ldd	r25, Y+10	; 0x0a
    4552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	9e 83       	std	Y+6, r25	; 0x06
    455c:	8d 83       	std	Y+5, r24	; 0x05
    455e:	8d 81       	ldd	r24, Y+5	; 0x05
    4560:	9e 81       	ldd	r25, Y+6	; 0x06
    4562:	9a 83       	std	Y+2, r25	; 0x02
    4564:	89 83       	std	Y+1, r24	; 0x01
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	9a 81       	ldd	r25, Y+2	; 0x02
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	f1 f7       	brne	.-4      	; 0x456a <main+0x7ec>
    456e:	9a 83       	std	Y+2, r25	; 0x02
    4570:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidSetLocation(LCD_LINE2,2);
    4572:	82 e0       	ldi	r24, 0x02	; 2
    4574:	62 e0       	ldi	r22, 0x02	; 2
    4576:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
			LCD_voidSendString("wrong!");
    457a:	8b e7       	ldi	r24, 0x7B	; 123
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
			Global_SPI_Flag = 'w';
    4582:	87 e7       	ldi	r24, 0x77	; 119
    4584:	80 93 fc 01 	sts	0x01FC, r24
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH); //ALARM ON
    4588:	83 e0       	ldi	r24, 0x03	; 3
    458a:	67 e0       	ldi	r22, 0x07	; 7
    458c:	41 e0       	ldi	r20, 0x01	; 1
    458e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW); //GREEN OFF
    4592:	83 e0       	ldi	r24, 0x03	; 3
    4594:	66 e0       	ldi	r22, 0x06	; 6
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    459c:	65 cd       	rjmp	.-1334   	; 0x4068 <main+0x2ea>

0000459e <SPICommunication>:
	return 0;
}



void SPICommunication(void){
    459e:	0f 93       	push	r16
    45a0:	1f 93       	push	r17
    45a2:	df 93       	push	r29
    45a4:	cf 93       	push	r28
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	c7 5c       	subi	r28, 0xC7	; 199
    45ac:	d0 40       	sbci	r29, 0x00	; 0
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	f8 94       	cli
    45b2:	de bf       	out	0x3e, r29	; 62
    45b4:	0f be       	out	0x3f, r0	; 63
    45b6:	cd bf       	out	0x3d, r28	; 61
	static u16 Local_u16Count =0;
	if (Local_u16Count == 4000){// 1 sec is 3906.35
    45b8:	80 91 fe 01 	lds	r24, 0x01FE
    45bc:	90 91 ff 01 	lds	r25, 0x01FF
    45c0:	2f e0       	ldi	r18, 0x0F	; 15
    45c2:	80 3a       	cpi	r24, 0xA0	; 160
    45c4:	92 07       	cpc	r25, r18
    45c6:	11 f0       	breq	.+4      	; 0x45cc <SPICommunication+0x2e>
    45c8:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
		SPI_voidMasterSendData(Global_SPI_Flag);
    45cc:	80 91 fc 01 	lds	r24, 0x01FC
    45d0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <SPI_voidMasterSendData>
		Local_u16Count = 0;
    45d4:	10 92 ff 01 	sts	0x01FF, r1
    45d8:	10 92 fe 01 	sts	0x01FE, r1

		u8 Local_u8Data = SPI_u8ReceiveData();
    45dc:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <SPI_u8ReceiveData>
    45e0:	fe 01       	movw	r30, r28
    45e2:	eb 53       	subi	r30, 0x3B	; 59
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	80 83       	st	Z, r24
		switch(Local_u8Data){
    45e8:	fe 01       	movw	r30, r28
    45ea:	eb 53       	subi	r30, 0x3B	; 59
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	80 81       	ld	r24, Z
    45f0:	e8 2f       	mov	r30, r24
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	ca 53       	subi	r28, 0x3A	; 58
    45f6:	df 4f       	sbci	r29, 0xFF	; 255
    45f8:	f9 83       	std	Y+1, r31	; 0x01
    45fa:	e8 83       	st	Y, r30
    45fc:	c6 5c       	subi	r28, 0xC6	; 198
    45fe:	d0 40       	sbci	r29, 0x00	; 0
    4600:	ca 53       	subi	r28, 0x3A	; 58
    4602:	df 4f       	sbci	r29, 0xFF	; 255
    4604:	28 81       	ld	r18, Y
    4606:	39 81       	ldd	r19, Y+1	; 0x01
    4608:	c6 5c       	subi	r28, 0xC6	; 198
    460a:	d0 40       	sbci	r29, 0x00	; 0
    460c:	24 33       	cpi	r18, 0x34	; 52
    460e:	31 05       	cpc	r19, r1
    4610:	09 f4       	brne	.+2      	; 0x4614 <SPICommunication+0x76>
    4612:	5b c6       	rjmp	.+3254   	; 0x52ca <SPICommunication+0xd2c>
    4614:	ca 53       	subi	r28, 0x3A	; 58
    4616:	df 4f       	sbci	r29, 0xFF	; 255
    4618:	88 81       	ld	r24, Y
    461a:	99 81       	ldd	r25, Y+1	; 0x01
    461c:	c6 5c       	subi	r28, 0xC6	; 198
    461e:	d0 40       	sbci	r29, 0x00	; 0
    4620:	85 33       	cpi	r24, 0x35	; 53
    4622:	91 05       	cpc	r25, r1
    4624:	04 f5       	brge	.+64     	; 0x4666 <SPICommunication+0xc8>
    4626:	ca 53       	subi	r28, 0x3A	; 58
    4628:	df 4f       	sbci	r29, 0xFF	; 255
    462a:	e8 81       	ld	r30, Y
    462c:	f9 81       	ldd	r31, Y+1	; 0x01
    462e:	c6 5c       	subi	r28, 0xC6	; 198
    4630:	d0 40       	sbci	r29, 0x00	; 0
    4632:	e2 33       	cpi	r30, 0x32	; 50
    4634:	f1 05       	cpc	r31, r1
    4636:	09 f4       	brne	.+2      	; 0x463a <SPICommunication+0x9c>
    4638:	3e c3       	rjmp	.+1660   	; 0x4cb6 <SPICommunication+0x718>
    463a:	ca 53       	subi	r28, 0x3A	; 58
    463c:	df 4f       	sbci	r29, 0xFF	; 255
    463e:	28 81       	ld	r18, Y
    4640:	39 81       	ldd	r19, Y+1	; 0x01
    4642:	c6 5c       	subi	r28, 0xC6	; 198
    4644:	d0 40       	sbci	r29, 0x00	; 0
    4646:	23 33       	cpi	r18, 0x33	; 51
    4648:	31 05       	cpc	r19, r1
    464a:	0c f0       	brlt	.+2      	; 0x464e <SPICommunication+0xb0>
    464c:	b9 c4       	rjmp	.+2418   	; 0x4fc0 <SPICommunication+0xa22>
    464e:	ca 53       	subi	r28, 0x3A	; 58
    4650:	df 4f       	sbci	r29, 0xFF	; 255
    4652:	88 81       	ld	r24, Y
    4654:	99 81       	ldd	r25, Y+1	; 0x01
    4656:	c6 5c       	subi	r28, 0xC6	; 198
    4658:	d0 40       	sbci	r29, 0x00	; 0
    465a:	81 33       	cpi	r24, 0x31	; 49
    465c:	91 05       	cpc	r25, r1
    465e:	09 f4       	brne	.+2      	; 0x4662 <SPICommunication+0xc4>
    4660:	a4 c1       	rjmp	.+840    	; 0x49aa <SPICommunication+0x40c>
    4662:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
    4666:	ca 53       	subi	r28, 0x3A	; 58
    4668:	df 4f       	sbci	r29, 0xFF	; 255
    466a:	e8 81       	ld	r30, Y
    466c:	f9 81       	ldd	r31, Y+1	; 0x01
    466e:	c6 5c       	subi	r28, 0xC6	; 198
    4670:	d0 40       	sbci	r29, 0x00	; 0
    4672:	e6 33       	cpi	r30, 0x36	; 54
    4674:	f1 05       	cpc	r31, r1
    4676:	11 f4       	brne	.+4      	; 0x467c <SPICommunication+0xde>
    4678:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <SPICommunication+0x11dc>
    467c:	ca 53       	subi	r28, 0x3A	; 58
    467e:	df 4f       	sbci	r29, 0xFF	; 255
    4680:	28 81       	ld	r18, Y
    4682:	39 81       	ldd	r19, Y+1	; 0x01
    4684:	c6 5c       	subi	r28, 0xC6	; 198
    4686:	d0 40       	sbci	r29, 0x00	; 0
    4688:	26 33       	cpi	r18, 0x36	; 54
    468a:	31 05       	cpc	r19, r1
    468c:	0c f4       	brge	.+2      	; 0x4690 <SPICommunication+0xf2>
    468e:	73 c7       	rjmp	.+3814   	; 0x5576 <SPICommunication+0xfd8>
    4690:	ca 53       	subi	r28, 0x3A	; 58
    4692:	df 4f       	sbci	r29, 0xFF	; 255
    4694:	88 81       	ld	r24, Y
    4696:	99 81       	ldd	r25, Y+1	; 0x01
    4698:	c6 5c       	subi	r28, 0xC6	; 198
    469a:	d0 40       	sbci	r29, 0x00	; 0
    469c:	81 34       	cpi	r24, 0x41	; 65
    469e:	91 05       	cpc	r25, r1
    46a0:	11 f0       	breq	.+4      	; 0x46a6 <SPICommunication+0x108>
    46a2:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
		case'A' :
			LCD_voidSendCommand(CLEAR);
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    46ac:	fe 01       	movw	r30, r28
    46ae:	ef 53       	subi	r30, 0x3F	; 63
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	a0 e0       	ldi	r26, 0x00	; 0
    46b8:	b0 e4       	ldi	r27, 0x40	; 64
    46ba:	80 83       	st	Z, r24
    46bc:	91 83       	std	Z+1, r25	; 0x01
    46be:	a2 83       	std	Z+2, r26	; 0x02
    46c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c2:	8e 01       	movw	r16, r28
    46c4:	03 54       	subi	r16, 0x43	; 67
    46c6:	1f 4f       	sbci	r17, 0xFF	; 255
    46c8:	fe 01       	movw	r30, r28
    46ca:	ef 53       	subi	r30, 0x3F	; 63
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	60 81       	ld	r22, Z
    46d0:	71 81       	ldd	r23, Z+1	; 0x01
    46d2:	82 81       	ldd	r24, Z+2	; 0x02
    46d4:	93 81       	ldd	r25, Z+3	; 0x03
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	4a ef       	ldi	r20, 0xFA	; 250
    46dc:	54 e4       	ldi	r21, 0x44	; 68
    46de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	f8 01       	movw	r30, r16
    46e8:	80 83       	st	Z, r24
    46ea:	91 83       	std	Z+1, r25	; 0x01
    46ec:	a2 83       	std	Z+2, r26	; 0x02
    46ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46f0:	fe 01       	movw	r30, r28
    46f2:	e3 54       	subi	r30, 0x43	; 67
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	5f e3       	ldi	r21, 0x3F	; 63
    4706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    470a:	88 23       	and	r24, r24
    470c:	44 f4       	brge	.+16     	; 0x471e <SPICommunication+0x180>
		__ticks = 1;
    470e:	fe 01       	movw	r30, r28
    4710:	e5 54       	subi	r30, 0x45	; 69
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	91 83       	std	Z+1, r25	; 0x01
    471a:	80 83       	st	Z, r24
    471c:	64 c0       	rjmp	.+200    	; 0x47e6 <SPICommunication+0x248>
	else if (__tmp > 65535)
    471e:	fe 01       	movw	r30, r28
    4720:	e3 54       	subi	r30, 0x43	; 67
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	60 81       	ld	r22, Z
    4726:	71 81       	ldd	r23, Z+1	; 0x01
    4728:	82 81       	ldd	r24, Z+2	; 0x02
    472a:	93 81       	ldd	r25, Z+3	; 0x03
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	3f ef       	ldi	r19, 0xFF	; 255
    4730:	4f e7       	ldi	r20, 0x7F	; 127
    4732:	57 e4       	ldi	r21, 0x47	; 71
    4734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4738:	18 16       	cp	r1, r24
    473a:	0c f0       	brlt	.+2      	; 0x473e <SPICommunication+0x1a0>
    473c:	43 c0       	rjmp	.+134    	; 0x47c4 <SPICommunication+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    473e:	fe 01       	movw	r30, r28
    4740:	ef 53       	subi	r30, 0x3F	; 63
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	93 81       	ldd	r25, Z+3	; 0x03
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e2       	ldi	r20, 0x20	; 32
    4752:	51 e4       	ldi	r21, 0x41	; 65
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	8e 01       	movw	r16, r28
    475e:	05 54       	subi	r16, 0x45	; 69
    4760:	1f 4f       	sbci	r17, 0xFF	; 255
    4762:	bc 01       	movw	r22, r24
    4764:	cd 01       	movw	r24, r26
    4766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	f8 01       	movw	r30, r16
    4770:	91 83       	std	Z+1, r25	; 0x01
    4772:	80 83       	st	Z, r24
    4774:	1f c0       	rjmp	.+62     	; 0x47b4 <SPICommunication+0x216>
    4776:	fe 01       	movw	r30, r28
    4778:	e7 54       	subi	r30, 0x47	; 71
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	88 ec       	ldi	r24, 0xC8	; 200
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	91 83       	std	Z+1, r25	; 0x01
    4782:	80 83       	st	Z, r24
    4784:	fe 01       	movw	r30, r28
    4786:	e7 54       	subi	r30, 0x47	; 71
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 81       	ld	r24, Z
    478c:	91 81       	ldd	r25, Z+1	; 0x01
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	f1 f7       	brne	.-4      	; 0x478e <SPICommunication+0x1f0>
    4792:	fe 01       	movw	r30, r28
    4794:	e7 54       	subi	r30, 0x47	; 71
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479c:	de 01       	movw	r26, r28
    479e:	a5 54       	subi	r26, 0x45	; 69
    47a0:	bf 4f       	sbci	r27, 0xFF	; 255
    47a2:	fe 01       	movw	r30, r28
    47a4:	e5 54       	subi	r30, 0x45	; 69
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	80 81       	ld	r24, Z
    47aa:	91 81       	ldd	r25, Z+1	; 0x01
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	11 96       	adiw	r26, 0x01	; 1
    47b0:	9c 93       	st	X, r25
    47b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b4:	fe 01       	movw	r30, r28
    47b6:	e5 54       	subi	r30, 0x45	; 69
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	80 81       	ld	r24, Z
    47bc:	91 81       	ldd	r25, Z+1	; 0x01
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	d1 f6       	brne	.-76     	; 0x4776 <SPICommunication+0x1d8>
    47c2:	27 c0       	rjmp	.+78     	; 0x4812 <SPICommunication+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c4:	8e 01       	movw	r16, r28
    47c6:	05 54       	subi	r16, 0x45	; 69
    47c8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ca:	fe 01       	movw	r30, r28
    47cc:	e3 54       	subi	r30, 0x43	; 67
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	f8 01       	movw	r30, r16
    47e2:	91 83       	std	Z+1, r25	; 0x01
    47e4:	80 83       	st	Z, r24
    47e6:	de 01       	movw	r26, r28
    47e8:	a9 54       	subi	r26, 0x49	; 73
    47ea:	bf 4f       	sbci	r27, 0xFF	; 255
    47ec:	fe 01       	movw	r30, r28
    47ee:	e5 54       	subi	r30, 0x45	; 69
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 81       	ld	r24, Z
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	8d 93       	st	X+, r24
    47f8:	9c 93       	st	X, r25
    47fa:	fe 01       	movw	r30, r28
    47fc:	e9 54       	subi	r30, 0x49	; 73
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	f1 f7       	brne	.-4      	; 0x4804 <SPICommunication+0x266>
    4808:	fe 01       	movw	r30, r28
    480a:	e9 54       	subi	r30, 0x49	; 73
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_voidSetLocation(LCD_LINE1,4);
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	64 e0       	ldi	r22, 0x04	; 4
    4816:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
			LCD_voidSendString("Calling");
    481a:	82 e8       	ldi	r24, 0x82	; 130
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
			LCD_voidSetLocation(LCD_LINE2,4);
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	64 e0       	ldi	r22, 0x04	; 4
    4826:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
			LCD_voidSendString("Authority!");
    482a:	8a e8       	ldi	r24, 0x8A	; 138
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH); //ALARM ON
    4832:	83 e0       	ldi	r24, 0x03	; 3
    4834:	67 e0       	ldi	r22, 0x07	; 7
    4836:	41 e0       	ldi	r20, 0x01	; 1
    4838:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    483c:	fe 01       	movw	r30, r28
    483e:	ed 54       	subi	r30, 0x4D	; 77
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	90 e8       	ldi	r25, 0x80	; 128
    4846:	ab e3       	ldi	r26, 0x3B	; 59
    4848:	b4 e4       	ldi	r27, 0x44	; 68
    484a:	80 83       	st	Z, r24
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	a2 83       	std	Z+2, r26	; 0x02
    4850:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4852:	8e 01       	movw	r16, r28
    4854:	01 55       	subi	r16, 0x51	; 81
    4856:	1f 4f       	sbci	r17, 0xFF	; 255
    4858:	fe 01       	movw	r30, r28
    485a:	ed 54       	subi	r30, 0x4D	; 77
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	60 81       	ld	r22, Z
    4860:	71 81       	ldd	r23, Z+1	; 0x01
    4862:	82 81       	ldd	r24, Z+2	; 0x02
    4864:	93 81       	ldd	r25, Z+3	; 0x03
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	4a ef       	ldi	r20, 0xFA	; 250
    486c:	54 e4       	ldi	r21, 0x44	; 68
    486e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	f8 01       	movw	r30, r16
    4878:	80 83       	st	Z, r24
    487a:	91 83       	std	Z+1, r25	; 0x01
    487c:	a2 83       	std	Z+2, r26	; 0x02
    487e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4880:	fe 01       	movw	r30, r28
    4882:	e1 55       	subi	r30, 0x51	; 81
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	82 81       	ldd	r24, Z+2	; 0x02
    488c:	93 81       	ldd	r25, Z+3	; 0x03
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e8       	ldi	r20, 0x80	; 128
    4894:	5f e3       	ldi	r21, 0x3F	; 63
    4896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    489a:	88 23       	and	r24, r24
    489c:	44 f4       	brge	.+16     	; 0x48ae <SPICommunication+0x310>
		__ticks = 1;
    489e:	fe 01       	movw	r30, r28
    48a0:	e3 55       	subi	r30, 0x53	; 83
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
    48ac:	65 c0       	rjmp	.+202    	; 0x4978 <SPICommunication+0x3da>
	else if (__tmp > 65535)
    48ae:	fe 01       	movw	r30, r28
    48b0:	e1 55       	subi	r30, 0x51	; 81
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	60 81       	ld	r22, Z
    48b6:	71 81       	ldd	r23, Z+1	; 0x01
    48b8:	82 81       	ldd	r24, Z+2	; 0x02
    48ba:	93 81       	ldd	r25, Z+3	; 0x03
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	3f ef       	ldi	r19, 0xFF	; 255
    48c0:	4f e7       	ldi	r20, 0x7F	; 127
    48c2:	57 e4       	ldi	r21, 0x47	; 71
    48c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48c8:	18 16       	cp	r1, r24
    48ca:	0c f0       	brlt	.+2      	; 0x48ce <SPICommunication+0x330>
    48cc:	44 c0       	rjmp	.+136    	; 0x4956 <SPICommunication+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ce:	fe 01       	movw	r30, r28
    48d0:	ed 54       	subi	r30, 0x4D	; 77
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	60 81       	ld	r22, Z
    48d6:	71 81       	ldd	r23, Z+1	; 0x01
    48d8:	82 81       	ldd	r24, Z+2	; 0x02
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	40 e2       	ldi	r20, 0x20	; 32
    48e2:	51 e4       	ldi	r21, 0x41	; 65
    48e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	8e 01       	movw	r16, r28
    48ee:	03 55       	subi	r16, 0x53	; 83
    48f0:	1f 4f       	sbci	r17, 0xFF	; 255
    48f2:	bc 01       	movw	r22, r24
    48f4:	cd 01       	movw	r24, r26
    48f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	f8 01       	movw	r30, r16
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	80 83       	st	Z, r24
    4904:	1f c0       	rjmp	.+62     	; 0x4944 <SPICommunication+0x3a6>
    4906:	fe 01       	movw	r30, r28
    4908:	e5 55       	subi	r30, 0x55	; 85
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	88 ec       	ldi	r24, 0xC8	; 200
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	91 83       	std	Z+1, r25	; 0x01
    4912:	80 83       	st	Z, r24
    4914:	fe 01       	movw	r30, r28
    4916:	e5 55       	subi	r30, 0x55	; 85
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 81       	ld	r24, Z
    491c:	91 81       	ldd	r25, Z+1	; 0x01
    491e:	01 97       	sbiw	r24, 0x01	; 1
    4920:	f1 f7       	brne	.-4      	; 0x491e <SPICommunication+0x380>
    4922:	fe 01       	movw	r30, r28
    4924:	e5 55       	subi	r30, 0x55	; 85
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492c:	de 01       	movw	r26, r28
    492e:	a3 55       	subi	r26, 0x53	; 83
    4930:	bf 4f       	sbci	r27, 0xFF	; 255
    4932:	fe 01       	movw	r30, r28
    4934:	e3 55       	subi	r30, 0x53	; 83
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	80 81       	ld	r24, Z
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	11 96       	adiw	r26, 0x01	; 1
    4940:	9c 93       	st	X, r25
    4942:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4944:	fe 01       	movw	r30, r28
    4946:	e3 55       	subi	r30, 0x53	; 83
    4948:	ff 4f       	sbci	r31, 0xFF	; 255
    494a:	80 81       	ld	r24, Z
    494c:	91 81       	ldd	r25, Z+1	; 0x01
    494e:	00 97       	sbiw	r24, 0x00	; 0
    4950:	d1 f6       	brne	.-76     	; 0x4906 <SPICommunication+0x368>
    4952:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4956:	8e 01       	movw	r16, r28
    4958:	03 55       	subi	r16, 0x53	; 83
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	fe 01       	movw	r30, r28
    495e:	e1 55       	subi	r30, 0x51	; 81
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	60 81       	ld	r22, Z
    4964:	71 81       	ldd	r23, Z+1	; 0x01
    4966:	82 81       	ldd	r24, Z+2	; 0x02
    4968:	93 81       	ldd	r25, Z+3	; 0x03
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	f8 01       	movw	r30, r16
    4974:	91 83       	std	Z+1, r25	; 0x01
    4976:	80 83       	st	Z, r24
    4978:	de 01       	movw	r26, r28
    497a:	a7 55       	subi	r26, 0x57	; 87
    497c:	bf 4f       	sbci	r27, 0xFF	; 255
    497e:	fe 01       	movw	r30, r28
    4980:	e3 55       	subi	r30, 0x53	; 83
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	9c 93       	st	X, r25
    498c:	8e 93       	st	-X, r24
    498e:	fe 01       	movw	r30, r28
    4990:	e7 55       	subi	r30, 0x57	; 87
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <SPICommunication+0x3fa>
    499c:	fe 01       	movw	r30, r28
    499e:	e7 55       	subi	r30, 0x57	; 87
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	91 83       	std	Z+1, r25	; 0x01
    49a4:	80 83       	st	Z, r24
    49a6:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
			_delay_ms(750);
		break;
		case'1' :
			if(Global_LCD_VIEW == '0'){
    49aa:	80 91 fd 01 	lds	r24, 0x01FD
    49ae:	80 33       	cpi	r24, 0x30	; 48
    49b0:	11 f0       	breq	.+4      	; 0x49b6 <SPICommunication+0x418>
    49b2:	0c 94 be 2c 	jmp	0x597c	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    49bc:	fe 01       	movw	r30, r28
    49be:	eb 55       	subi	r30, 0x5B	; 91
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	a0 e0       	ldi	r26, 0x00	; 0
    49c8:	b0 e4       	ldi	r27, 0x40	; 64
    49ca:	80 83       	st	Z, r24
    49cc:	91 83       	std	Z+1, r25	; 0x01
    49ce:	a2 83       	std	Z+2, r26	; 0x02
    49d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49d2:	8e 01       	movw	r16, r28
    49d4:	0f 55       	subi	r16, 0x5F	; 95
    49d6:	1f 4f       	sbci	r17, 0xFF	; 255
    49d8:	fe 01       	movw	r30, r28
    49da:	eb 55       	subi	r30, 0x5B	; 91
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	60 81       	ld	r22, Z
    49e0:	71 81       	ldd	r23, Z+1	; 0x01
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	4a ef       	ldi	r20, 0xFA	; 250
    49ec:	54 e4       	ldi	r21, 0x44	; 68
    49ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	f8 01       	movw	r30, r16
    49f8:	80 83       	st	Z, r24
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	a2 83       	std	Z+2, r26	; 0x02
    49fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a00:	fe 01       	movw	r30, r28
    4a02:	ef 55       	subi	r30, 0x5F	; 95
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	60 81       	ld	r22, Z
    4a08:	71 81       	ldd	r23, Z+1	; 0x01
    4a0a:	82 81       	ldd	r24, Z+2	; 0x02
    4a0c:	93 81       	ldd	r25, Z+3	; 0x03
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e8       	ldi	r20, 0x80	; 128
    4a14:	5f e3       	ldi	r21, 0x3F	; 63
    4a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a1a:	88 23       	and	r24, r24
    4a1c:	44 f4       	brge	.+16     	; 0x4a2e <SPICommunication+0x490>
		__ticks = 1;
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e1 56       	subi	r30, 0x61	; 97
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	91 83       	std	Z+1, r25	; 0x01
    4a2a:	80 83       	st	Z, r24
    4a2c:	64 c0       	rjmp	.+200    	; 0x4af6 <SPICommunication+0x558>
	else if (__tmp > 65535)
    4a2e:	fe 01       	movw	r30, r28
    4a30:	ef 55       	subi	r30, 0x5F	; 95
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	60 81       	ld	r22, Z
    4a36:	71 81       	ldd	r23, Z+1	; 0x01
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	93 81       	ldd	r25, Z+3	; 0x03
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	3f ef       	ldi	r19, 0xFF	; 255
    4a40:	4f e7       	ldi	r20, 0x7F	; 127
    4a42:	57 e4       	ldi	r21, 0x47	; 71
    4a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a48:	18 16       	cp	r1, r24
    4a4a:	0c f0       	brlt	.+2      	; 0x4a4e <SPICommunication+0x4b0>
    4a4c:	43 c0       	rjmp	.+134    	; 0x4ad4 <SPICommunication+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4e:	fe 01       	movw	r30, r28
    4a50:	eb 55       	subi	r30, 0x5B	; 91
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	60 81       	ld	r22, Z
    4a56:	71 81       	ldd	r23, Z+1	; 0x01
    4a58:	82 81       	ldd	r24, Z+2	; 0x02
    4a5a:	93 81       	ldd	r25, Z+3	; 0x03
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	40 e2       	ldi	r20, 0x20	; 32
    4a62:	51 e4       	ldi	r21, 0x41	; 65
    4a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	8e 01       	movw	r16, r28
    4a6e:	01 56       	subi	r16, 0x61	; 97
    4a70:	1f 4f       	sbci	r17, 0xFF	; 255
    4a72:	bc 01       	movw	r22, r24
    4a74:	cd 01       	movw	r24, r26
    4a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	f8 01       	movw	r30, r16
    4a80:	91 83       	std	Z+1, r25	; 0x01
    4a82:	80 83       	st	Z, r24
    4a84:	1f c0       	rjmp	.+62     	; 0x4ac4 <SPICommunication+0x526>
    4a86:	fe 01       	movw	r30, r28
    4a88:	e3 56       	subi	r30, 0x63	; 99
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	88 ec       	ldi	r24, 0xC8	; 200
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	91 83       	std	Z+1, r25	; 0x01
    4a92:	80 83       	st	Z, r24
    4a94:	fe 01       	movw	r30, r28
    4a96:	e3 56       	subi	r30, 0x63	; 99
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	80 81       	ld	r24, Z
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	f1 f7       	brne	.-4      	; 0x4a9e <SPICommunication+0x500>
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	e3 56       	subi	r30, 0x63	; 99
    4aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa8:	91 83       	std	Z+1, r25	; 0x01
    4aaa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aac:	de 01       	movw	r26, r28
    4aae:	a1 56       	subi	r26, 0x61	; 97
    4ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	e1 56       	subi	r30, 0x61	; 97
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	80 81       	ld	r24, Z
    4aba:	91 81       	ldd	r25, Z+1	; 0x01
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	11 96       	adiw	r26, 0x01	; 1
    4ac0:	9c 93       	st	X, r25
    4ac2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e1 56       	subi	r30, 0x61	; 97
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	80 81       	ld	r24, Z
    4acc:	91 81       	ldd	r25, Z+1	; 0x01
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	d1 f6       	brne	.-76     	; 0x4a86 <SPICommunication+0x4e8>
    4ad2:	27 c0       	rjmp	.+78     	; 0x4b22 <SPICommunication+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	8e 01       	movw	r16, r28
    4ad6:	01 56       	subi	r16, 0x61	; 97
    4ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ada:	fe 01       	movw	r30, r28
    4adc:	ef 55       	subi	r30, 0x5F	; 95
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	60 81       	ld	r22, Z
    4ae2:	71 81       	ldd	r23, Z+1	; 0x01
    4ae4:	82 81       	ldd	r24, Z+2	; 0x02
    4ae6:	93 81       	ldd	r25, Z+3	; 0x03
    4ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22
    4af0:	f8 01       	movw	r30, r16
    4af2:	91 83       	std	Z+1, r25	; 0x01
    4af4:	80 83       	st	Z, r24
    4af6:	de 01       	movw	r26, r28
    4af8:	a5 56       	subi	r26, 0x65	; 101
    4afa:	bf 4f       	sbci	r27, 0xFF	; 255
    4afc:	fe 01       	movw	r30, r28
    4afe:	e1 56       	subi	r30, 0x61	; 97
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	80 81       	ld	r24, Z
    4b04:	91 81       	ldd	r25, Z+1	; 0x01
    4b06:	8d 93       	st	X+, r24
    4b08:	9c 93       	st	X, r25
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e5 56       	subi	r30, 0x65	; 101
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	91 81       	ldd	r25, Z+1	; 0x01
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <SPICommunication+0x576>
    4b18:	fe 01       	movw	r30, r28
    4b1a:	e5 56       	subi	r30, 0x65	; 101
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	64 e0       	ldi	r22, 0x04	; 4
    4b26:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    4b2a:	85 e9       	ldi	r24, 0x95	; 149
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    4b32:	82 e0       	ldi	r24, 0x02	; 2
    4b34:	64 e0       	ldi	r22, 0x04	; 4
    4b36:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 1    off");
    4b3a:	81 ea       	ldi	r24, 0xA1	; 161
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);//ALARM off
    4b42:	83 e0       	ldi	r24, 0x03	; 3
    4b44:	67 e0       	ldi	r22, 0x07	; 7
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e9 56       	subi	r30, 0x69	; 105
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	90 e8       	ldi	r25, 0x80	; 128
    4b56:	ab e3       	ldi	r26, 0x3B	; 59
    4b58:	b4 e4       	ldi	r27, 0x44	; 68
    4b5a:	80 83       	st	Z, r24
    4b5c:	91 83       	std	Z+1, r25	; 0x01
    4b5e:	a2 83       	std	Z+2, r26	; 0x02
    4b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b62:	8e 01       	movw	r16, r28
    4b64:	0d 56       	subi	r16, 0x6D	; 109
    4b66:	1f 4f       	sbci	r17, 0xFF	; 255
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e9 56       	subi	r30, 0x69	; 105
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	60 81       	ld	r22, Z
    4b70:	71 81       	ldd	r23, Z+1	; 0x01
    4b72:	82 81       	ldd	r24, Z+2	; 0x02
    4b74:	93 81       	ldd	r25, Z+3	; 0x03
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	4a ef       	ldi	r20, 0xFA	; 250
    4b7c:	54 e4       	ldi	r21, 0x44	; 68
    4b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	f8 01       	movw	r30, r16
    4b88:	80 83       	st	Z, r24
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	a2 83       	std	Z+2, r26	; 0x02
    4b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b90:	fe 01       	movw	r30, r28
    4b92:	ed 56       	subi	r30, 0x6D	; 109
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	60 81       	ld	r22, Z
    4b98:	71 81       	ldd	r23, Z+1	; 0x01
    4b9a:	82 81       	ldd	r24, Z+2	; 0x02
    4b9c:	93 81       	ldd	r25, Z+3	; 0x03
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	40 e8       	ldi	r20, 0x80	; 128
    4ba4:	5f e3       	ldi	r21, 0x3F	; 63
    4ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4baa:	88 23       	and	r24, r24
    4bac:	44 f4       	brge	.+16     	; 0x4bbe <SPICommunication+0x620>
		__ticks = 1;
    4bae:	fe 01       	movw	r30, r28
    4bb0:	ef 56       	subi	r30, 0x6F	; 111
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	91 83       	std	Z+1, r25	; 0x01
    4bba:	80 83       	st	Z, r24
    4bbc:	64 c0       	rjmp	.+200    	; 0x4c86 <SPICommunication+0x6e8>
	else if (__tmp > 65535)
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ed 56       	subi	r30, 0x6D	; 109
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	60 81       	ld	r22, Z
    4bc6:	71 81       	ldd	r23, Z+1	; 0x01
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	3f ef       	ldi	r19, 0xFF	; 255
    4bd0:	4f e7       	ldi	r20, 0x7F	; 127
    4bd2:	57 e4       	ldi	r21, 0x47	; 71
    4bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bd8:	18 16       	cp	r1, r24
    4bda:	0c f0       	brlt	.+2      	; 0x4bde <SPICommunication+0x640>
    4bdc:	43 c0       	rjmp	.+134    	; 0x4c64 <SPICommunication+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bde:	fe 01       	movw	r30, r28
    4be0:	e9 56       	subi	r30, 0x69	; 105
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	60 81       	ld	r22, Z
    4be6:	71 81       	ldd	r23, Z+1	; 0x01
    4be8:	82 81       	ldd	r24, Z+2	; 0x02
    4bea:	93 81       	ldd	r25, Z+3	; 0x03
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	40 e2       	ldi	r20, 0x20	; 32
    4bf2:	51 e4       	ldi	r21, 0x41	; 65
    4bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	8e 01       	movw	r16, r28
    4bfe:	0f 56       	subi	r16, 0x6F	; 111
    4c00:	1f 4f       	sbci	r17, 0xFF	; 255
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	f8 01       	movw	r30, r16
    4c10:	91 83       	std	Z+1, r25	; 0x01
    4c12:	80 83       	st	Z, r24
    4c14:	1f c0       	rjmp	.+62     	; 0x4c54 <SPICommunication+0x6b6>
    4c16:	fe 01       	movw	r30, r28
    4c18:	e1 57       	subi	r30, 0x71	; 113
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	91 83       	std	Z+1, r25	; 0x01
    4c22:	80 83       	st	Z, r24
    4c24:	fe 01       	movw	r30, r28
    4c26:	e1 57       	subi	r30, 0x71	; 113
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 81       	ld	r24, Z
    4c2c:	91 81       	ldd	r25, Z+1	; 0x01
    4c2e:	01 97       	sbiw	r24, 0x01	; 1
    4c30:	f1 f7       	brne	.-4      	; 0x4c2e <SPICommunication+0x690>
    4c32:	fe 01       	movw	r30, r28
    4c34:	e1 57       	subi	r30, 0x71	; 113
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	91 83       	std	Z+1, r25	; 0x01
    4c3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c3c:	de 01       	movw	r26, r28
    4c3e:	af 56       	subi	r26, 0x6F	; 111
    4c40:	bf 4f       	sbci	r27, 0xFF	; 255
    4c42:	fe 01       	movw	r30, r28
    4c44:	ef 56       	subi	r30, 0x6F	; 111
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	80 81       	ld	r24, Z
    4c4a:	91 81       	ldd	r25, Z+1	; 0x01
    4c4c:	01 97       	sbiw	r24, 0x01	; 1
    4c4e:	11 96       	adiw	r26, 0x01	; 1
    4c50:	9c 93       	st	X, r25
    4c52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c54:	fe 01       	movw	r30, r28
    4c56:	ef 56       	subi	r30, 0x6F	; 111
    4c58:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5a:	80 81       	ld	r24, Z
    4c5c:	91 81       	ldd	r25, Z+1	; 0x01
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	d1 f6       	brne	.-76     	; 0x4c16 <SPICommunication+0x678>
    4c62:	8c c6       	rjmp	.+3352   	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c64:	8e 01       	movw	r16, r28
    4c66:	0f 56       	subi	r16, 0x6F	; 111
    4c68:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	ed 56       	subi	r30, 0x6D	; 109
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	60 81       	ld	r22, Z
    4c72:	71 81       	ldd	r23, Z+1	; 0x01
    4c74:	82 81       	ldd	r24, Z+2	; 0x02
    4c76:	93 81       	ldd	r25, Z+3	; 0x03
    4c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	f8 01       	movw	r30, r16
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	80 83       	st	Z, r24
    4c86:	de 01       	movw	r26, r28
    4c88:	a3 57       	subi	r26, 0x73	; 115
    4c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	ef 56       	subi	r30, 0x6F	; 111
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	80 81       	ld	r24, Z
    4c94:	91 81       	ldd	r25, Z+1	; 0x01
    4c96:	11 96       	adiw	r26, 0x01	; 1
    4c98:	9c 93       	st	X, r25
    4c9a:	8e 93       	st	-X, r24
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e3 57       	subi	r30, 0x73	; 115
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	80 81       	ld	r24, Z
    4ca4:	91 81       	ldd	r25, Z+1	; 0x01
    4ca6:	01 97       	sbiw	r24, 0x01	; 1
    4ca8:	f1 f7       	brne	.-4      	; 0x4ca6 <SPICommunication+0x708>
    4caa:	fe 01       	movw	r30, r28
    4cac:	e3 57       	subi	r30, 0x73	; 115
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	63 c6       	rjmp	.+3270   	; 0x597c <SPICommunication+0x13de>
				_delay_ms(750);
			}
		break;
		case'2' :
			if(Global_LCD_VIEW == '0'){
    4cb6:	80 91 fd 01 	lds	r24, 0x01FD
    4cba:	80 33       	cpi	r24, 0x30	; 48
    4cbc:	09 f0       	breq	.+2      	; 0x4cc0 <SPICommunication+0x722>
    4cbe:	5e c6       	rjmp	.+3260   	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	e7 57       	subi	r30, 0x77	; 119
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	a0 e0       	ldi	r26, 0x00	; 0
    4cd2:	b0 e4       	ldi	r27, 0x40	; 64
    4cd4:	80 83       	st	Z, r24
    4cd6:	91 83       	std	Z+1, r25	; 0x01
    4cd8:	a2 83       	std	Z+2, r26	; 0x02
    4cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cdc:	8e 01       	movw	r16, r28
    4cde:	0b 57       	subi	r16, 0x7B	; 123
    4ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e7 57       	subi	r30, 0x77	; 119
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	60 81       	ld	r22, Z
    4cea:	71 81       	ldd	r23, Z+1	; 0x01
    4cec:	82 81       	ldd	r24, Z+2	; 0x02
    4cee:	93 81       	ldd	r25, Z+3	; 0x03
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	4a ef       	ldi	r20, 0xFA	; 250
    4cf6:	54 e4       	ldi	r21, 0x44	; 68
    4cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfc:	dc 01       	movw	r26, r24
    4cfe:	cb 01       	movw	r24, r22
    4d00:	f8 01       	movw	r30, r16
    4d02:	80 83       	st	Z, r24
    4d04:	91 83       	std	Z+1, r25	; 0x01
    4d06:	a2 83       	std	Z+2, r26	; 0x02
    4d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	eb 57       	subi	r30, 0x7B	; 123
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	60 81       	ld	r22, Z
    4d12:	71 81       	ldd	r23, Z+1	; 0x01
    4d14:	82 81       	ldd	r24, Z+2	; 0x02
    4d16:	93 81       	ldd	r25, Z+3	; 0x03
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	40 e8       	ldi	r20, 0x80	; 128
    4d1e:	5f e3       	ldi	r21, 0x3F	; 63
    4d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d24:	88 23       	and	r24, r24
    4d26:	44 f4       	brge	.+16     	; 0x4d38 <SPICommunication+0x79a>
		__ticks = 1;
    4d28:	fe 01       	movw	r30, r28
    4d2a:	ed 57       	subi	r30, 0x7D	; 125
    4d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	91 83       	std	Z+1, r25	; 0x01
    4d34:	80 83       	st	Z, r24
    4d36:	64 c0       	rjmp	.+200    	; 0x4e00 <SPICommunication+0x862>
	else if (__tmp > 65535)
    4d38:	fe 01       	movw	r30, r28
    4d3a:	eb 57       	subi	r30, 0x7B	; 123
    4d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3e:	60 81       	ld	r22, Z
    4d40:	71 81       	ldd	r23, Z+1	; 0x01
    4d42:	82 81       	ldd	r24, Z+2	; 0x02
    4d44:	93 81       	ldd	r25, Z+3	; 0x03
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	3f ef       	ldi	r19, 0xFF	; 255
    4d4a:	4f e7       	ldi	r20, 0x7F	; 127
    4d4c:	57 e4       	ldi	r21, 0x47	; 71
    4d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d52:	18 16       	cp	r1, r24
    4d54:	0c f0       	brlt	.+2      	; 0x4d58 <SPICommunication+0x7ba>
    4d56:	43 c0       	rjmp	.+134    	; 0x4dde <SPICommunication+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d58:	fe 01       	movw	r30, r28
    4d5a:	e7 57       	subi	r30, 0x77	; 119
    4d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5e:	60 81       	ld	r22, Z
    4d60:	71 81       	ldd	r23, Z+1	; 0x01
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	93 81       	ldd	r25, Z+3	; 0x03
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e2       	ldi	r20, 0x20	; 32
    4d6c:	51 e4       	ldi	r21, 0x41	; 65
    4d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	8e 01       	movw	r16, r28
    4d78:	0d 57       	subi	r16, 0x7D	; 125
    4d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7c:	bc 01       	movw	r22, r24
    4d7e:	cd 01       	movw	r24, r26
    4d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	f8 01       	movw	r30, r16
    4d8a:	91 83       	std	Z+1, r25	; 0x01
    4d8c:	80 83       	st	Z, r24
    4d8e:	1f c0       	rjmp	.+62     	; 0x4dce <SPICommunication+0x830>
    4d90:	fe 01       	movw	r30, r28
    4d92:	ef 57       	subi	r30, 0x7F	; 127
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	88 ec       	ldi	r24, 0xC8	; 200
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	91 83       	std	Z+1, r25	; 0x01
    4d9c:	80 83       	st	Z, r24
    4d9e:	fe 01       	movw	r30, r28
    4da0:	ef 57       	subi	r30, 0x7F	; 127
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	80 81       	ld	r24, Z
    4da6:	91 81       	ldd	r25, Z+1	; 0x01
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	f1 f7       	brne	.-4      	; 0x4da8 <SPICommunication+0x80a>
    4dac:	fe 01       	movw	r30, r28
    4dae:	ef 57       	subi	r30, 0x7F	; 127
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	91 83       	std	Z+1, r25	; 0x01
    4db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db6:	de 01       	movw	r26, r28
    4db8:	ad 57       	subi	r26, 0x7D	; 125
    4dba:	bf 4f       	sbci	r27, 0xFF	; 255
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	ed 57       	subi	r30, 0x7D	; 125
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	80 81       	ld	r24, Z
    4dc4:	91 81       	ldd	r25, Z+1	; 0x01
    4dc6:	01 97       	sbiw	r24, 0x01	; 1
    4dc8:	11 96       	adiw	r26, 0x01	; 1
    4dca:	9c 93       	st	X, r25
    4dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dce:	fe 01       	movw	r30, r28
    4dd0:	ed 57       	subi	r30, 0x7D	; 125
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	80 81       	ld	r24, Z
    4dd6:	91 81       	ldd	r25, Z+1	; 0x01
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	d1 f6       	brne	.-76     	; 0x4d90 <SPICommunication+0x7f2>
    4ddc:	27 c0       	rjmp	.+78     	; 0x4e2c <SPICommunication+0x88e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dde:	8e 01       	movw	r16, r28
    4de0:	0d 57       	subi	r16, 0x7D	; 125
    4de2:	1f 4f       	sbci	r17, 0xFF	; 255
    4de4:	fe 01       	movw	r30, r28
    4de6:	eb 57       	subi	r30, 0x7B	; 123
    4de8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dea:	60 81       	ld	r22, Z
    4dec:	71 81       	ldd	r23, Z+1	; 0x01
    4dee:	82 81       	ldd	r24, Z+2	; 0x02
    4df0:	93 81       	ldd	r25, Z+3	; 0x03
    4df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	f8 01       	movw	r30, r16
    4dfc:	91 83       	std	Z+1, r25	; 0x01
    4dfe:	80 83       	st	Z, r24
    4e00:	de 01       	movw	r26, r28
    4e02:	a1 58       	subi	r26, 0x81	; 129
    4e04:	bf 4f       	sbci	r27, 0xFF	; 255
    4e06:	fe 01       	movw	r30, r28
    4e08:	ed 57       	subi	r30, 0x7D	; 125
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	8d 93       	st	X+, r24
    4e12:	9c 93       	st	X, r25
    4e14:	fe 01       	movw	r30, r28
    4e16:	e1 58       	subi	r30, 0x81	; 129
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	80 81       	ld	r24, Z
    4e1c:	91 81       	ldd	r25, Z+1	; 0x01
    4e1e:	01 97       	sbiw	r24, 0x01	; 1
    4e20:	f1 f7       	brne	.-4      	; 0x4e1e <SPICommunication+0x880>
    4e22:	fe 01       	movw	r30, r28
    4e24:	e1 58       	subi	r30, 0x81	; 129
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    4e2c:	81 e0       	ldi	r24, 0x01	; 1
    4e2e:	64 e0       	ldi	r22, 0x04	; 4
    4e30:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    4e34:	85 e9       	ldi	r24, 0x95	; 149
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    4e3c:	82 e0       	ldi	r24, 0x02	; 2
    4e3e:	64 e0       	ldi	r22, 0x04	; 4
    4e40:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 2    off");
    4e44:	8b ea       	ldi	r24, 0xAB	; 171
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    4e4c:	83 e0       	ldi	r24, 0x03	; 3
    4e4e:	67 e0       	ldi	r22, 0x07	; 7
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    4e56:	fe 01       	movw	r30, r28
    4e58:	e5 58       	subi	r30, 0x85	; 133
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	80 e0       	ldi	r24, 0x00	; 0
    4e5e:	90 e8       	ldi	r25, 0x80	; 128
    4e60:	ab e3       	ldi	r26, 0x3B	; 59
    4e62:	b4 e4       	ldi	r27, 0x44	; 68
    4e64:	80 83       	st	Z, r24
    4e66:	91 83       	std	Z+1, r25	; 0x01
    4e68:	a2 83       	std	Z+2, r26	; 0x02
    4e6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e6c:	8e 01       	movw	r16, r28
    4e6e:	09 58       	subi	r16, 0x89	; 137
    4e70:	1f 4f       	sbci	r17, 0xFF	; 255
    4e72:	fe 01       	movw	r30, r28
    4e74:	e5 58       	subi	r30, 0x85	; 133
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	60 81       	ld	r22, Z
    4e7a:	71 81       	ldd	r23, Z+1	; 0x01
    4e7c:	82 81       	ldd	r24, Z+2	; 0x02
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	4a ef       	ldi	r20, 0xFA	; 250
    4e86:	54 e4       	ldi	r21, 0x44	; 68
    4e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	f8 01       	movw	r30, r16
    4e92:	80 83       	st	Z, r24
    4e94:	91 83       	std	Z+1, r25	; 0x01
    4e96:	a2 83       	std	Z+2, r26	; 0x02
    4e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	e9 58       	subi	r30, 0x89	; 137
    4e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea0:	60 81       	ld	r22, Z
    4ea2:	71 81       	ldd	r23, Z+1	; 0x01
    4ea4:	82 81       	ldd	r24, Z+2	; 0x02
    4ea6:	93 81       	ldd	r25, Z+3	; 0x03
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	40 e8       	ldi	r20, 0x80	; 128
    4eae:	5f e3       	ldi	r21, 0x3F	; 63
    4eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eb4:	88 23       	and	r24, r24
    4eb6:	44 f4       	brge	.+16     	; 0x4ec8 <SPICommunication+0x92a>
		__ticks = 1;
    4eb8:	fe 01       	movw	r30, r28
    4eba:	eb 58       	subi	r30, 0x8B	; 139
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	91 83       	std	Z+1, r25	; 0x01
    4ec4:	80 83       	st	Z, r24
    4ec6:	64 c0       	rjmp	.+200    	; 0x4f90 <SPICommunication+0x9f2>
	else if (__tmp > 65535)
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e9 58       	subi	r30, 0x89	; 137
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	60 81       	ld	r22, Z
    4ed0:	71 81       	ldd	r23, Z+1	; 0x01
    4ed2:	82 81       	ldd	r24, Z+2	; 0x02
    4ed4:	93 81       	ldd	r25, Z+3	; 0x03
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	3f ef       	ldi	r19, 0xFF	; 255
    4eda:	4f e7       	ldi	r20, 0x7F	; 127
    4edc:	57 e4       	ldi	r21, 0x47	; 71
    4ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee2:	18 16       	cp	r1, r24
    4ee4:	0c f0       	brlt	.+2      	; 0x4ee8 <SPICommunication+0x94a>
    4ee6:	43 c0       	rjmp	.+134    	; 0x4f6e <SPICommunication+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee8:	fe 01       	movw	r30, r28
    4eea:	e5 58       	subi	r30, 0x85	; 133
    4eec:	ff 4f       	sbci	r31, 0xFF	; 255
    4eee:	60 81       	ld	r22, Z
    4ef0:	71 81       	ldd	r23, Z+1	; 0x01
    4ef2:	82 81       	ldd	r24, Z+2	; 0x02
    4ef4:	93 81       	ldd	r25, Z+3	; 0x03
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e2       	ldi	r20, 0x20	; 32
    4efc:	51 e4       	ldi	r21, 0x41	; 65
    4efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	8e 01       	movw	r16, r28
    4f08:	0b 58       	subi	r16, 0x8B	; 139
    4f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f0c:	bc 01       	movw	r22, r24
    4f0e:	cd 01       	movw	r24, r26
    4f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	f8 01       	movw	r30, r16
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	80 83       	st	Z, r24
    4f1e:	1f c0       	rjmp	.+62     	; 0x4f5e <SPICommunication+0x9c0>
    4f20:	fe 01       	movw	r30, r28
    4f22:	ed 58       	subi	r30, 0x8D	; 141
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	88 ec       	ldi	r24, 0xC8	; 200
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	91 83       	std	Z+1, r25	; 0x01
    4f2c:	80 83       	st	Z, r24
    4f2e:	fe 01       	movw	r30, r28
    4f30:	ed 58       	subi	r30, 0x8D	; 141
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	80 81       	ld	r24, Z
    4f36:	91 81       	ldd	r25, Z+1	; 0x01
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	f1 f7       	brne	.-4      	; 0x4f38 <SPICommunication+0x99a>
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	ed 58       	subi	r30, 0x8D	; 141
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	91 83       	std	Z+1, r25	; 0x01
    4f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f46:	de 01       	movw	r26, r28
    4f48:	ab 58       	subi	r26, 0x8B	; 139
    4f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4c:	fe 01       	movw	r30, r28
    4f4e:	eb 58       	subi	r30, 0x8B	; 139
    4f50:	ff 4f       	sbci	r31, 0xFF	; 255
    4f52:	80 81       	ld	r24, Z
    4f54:	91 81       	ldd	r25, Z+1	; 0x01
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	11 96       	adiw	r26, 0x01	; 1
    4f5a:	9c 93       	st	X, r25
    4f5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f5e:	fe 01       	movw	r30, r28
    4f60:	eb 58       	subi	r30, 0x8B	; 139
    4f62:	ff 4f       	sbci	r31, 0xFF	; 255
    4f64:	80 81       	ld	r24, Z
    4f66:	91 81       	ldd	r25, Z+1	; 0x01
    4f68:	00 97       	sbiw	r24, 0x00	; 0
    4f6a:	d1 f6       	brne	.-76     	; 0x4f20 <SPICommunication+0x982>
    4f6c:	07 c5       	rjmp	.+2574   	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6e:	8e 01       	movw	r16, r28
    4f70:	0b 58       	subi	r16, 0x8B	; 139
    4f72:	1f 4f       	sbci	r17, 0xFF	; 255
    4f74:	fe 01       	movw	r30, r28
    4f76:	e9 58       	subi	r30, 0x89	; 137
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	60 81       	ld	r22, Z
    4f7c:	71 81       	ldd	r23, Z+1	; 0x01
    4f7e:	82 81       	ldd	r24, Z+2	; 0x02
    4f80:	93 81       	ldd	r25, Z+3	; 0x03
    4f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	91 83       	std	Z+1, r25	; 0x01
    4f8e:	80 83       	st	Z, r24
    4f90:	de 01       	movw	r26, r28
    4f92:	af 58       	subi	r26, 0x8F	; 143
    4f94:	bf 4f       	sbci	r27, 0xFF	; 255
    4f96:	fe 01       	movw	r30, r28
    4f98:	eb 58       	subi	r30, 0x8B	; 139
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	80 81       	ld	r24, Z
    4f9e:	91 81       	ldd	r25, Z+1	; 0x01
    4fa0:	11 96       	adiw	r26, 0x01	; 1
    4fa2:	9c 93       	st	X, r25
    4fa4:	8e 93       	st	-X, r24
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	ef 58       	subi	r30, 0x8F	; 143
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	80 81       	ld	r24, Z
    4fae:	91 81       	ldd	r25, Z+1	; 0x01
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	f1 f7       	brne	.-4      	; 0x4fb0 <SPICommunication+0xa12>
    4fb4:	fe 01       	movw	r30, r28
    4fb6:	ef 58       	subi	r30, 0x8F	; 143
    4fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fba:	91 83       	std	Z+1, r25	; 0x01
    4fbc:	80 83       	st	Z, r24
    4fbe:	de c4       	rjmp	.+2492   	; 0x597c <SPICommunication+0x13de>
				_delay_ms(750);
			}
		break;
		case'3' :
			if(Global_LCD_VIEW == '0'){
    4fc0:	80 91 fd 01 	lds	r24, 0x01FD
    4fc4:	80 33       	cpi	r24, 0x30	; 48
    4fc6:	09 f0       	breq	.+2      	; 0x4fca <SPICommunication+0xa2c>
    4fc8:	d9 c4       	rjmp	.+2482   	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e3 59       	subi	r30, 0x93	; 147
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	a0 e0       	ldi	r26, 0x00	; 0
    4fdc:	b0 e4       	ldi	r27, 0x40	; 64
    4fde:	80 83       	st	Z, r24
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	a2 83       	std	Z+2, r26	; 0x02
    4fe4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fe6:	8e 01       	movw	r16, r28
    4fe8:	07 59       	subi	r16, 0x97	; 151
    4fea:	1f 4f       	sbci	r17, 0xFF	; 255
    4fec:	fe 01       	movw	r30, r28
    4fee:	e3 59       	subi	r30, 0x93	; 147
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	60 81       	ld	r22, Z
    4ff4:	71 81       	ldd	r23, Z+1	; 0x01
    4ff6:	82 81       	ldd	r24, Z+2	; 0x02
    4ff8:	93 81       	ldd	r25, Z+3	; 0x03
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	4a ef       	ldi	r20, 0xFA	; 250
    5000:	54 e4       	ldi	r21, 0x44	; 68
    5002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	f8 01       	movw	r30, r16
    500c:	80 83       	st	Z, r24
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	a2 83       	std	Z+2, r26	; 0x02
    5012:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5014:	fe 01       	movw	r30, r28
    5016:	e7 59       	subi	r30, 0x97	; 151
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	60 81       	ld	r22, Z
    501c:	71 81       	ldd	r23, Z+1	; 0x01
    501e:	82 81       	ldd	r24, Z+2	; 0x02
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e8       	ldi	r20, 0x80	; 128
    5028:	5f e3       	ldi	r21, 0x3F	; 63
    502a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    502e:	88 23       	and	r24, r24
    5030:	44 f4       	brge	.+16     	; 0x5042 <SPICommunication+0xaa4>
		__ticks = 1;
    5032:	fe 01       	movw	r30, r28
    5034:	e9 59       	subi	r30, 0x99	; 153
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	91 83       	std	Z+1, r25	; 0x01
    503e:	80 83       	st	Z, r24
    5040:	64 c0       	rjmp	.+200    	; 0x510a <SPICommunication+0xb6c>
	else if (__tmp > 65535)
    5042:	fe 01       	movw	r30, r28
    5044:	e7 59       	subi	r30, 0x97	; 151
    5046:	ff 4f       	sbci	r31, 0xFF	; 255
    5048:	60 81       	ld	r22, Z
    504a:	71 81       	ldd	r23, Z+1	; 0x01
    504c:	82 81       	ldd	r24, Z+2	; 0x02
    504e:	93 81       	ldd	r25, Z+3	; 0x03
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	3f ef       	ldi	r19, 0xFF	; 255
    5054:	4f e7       	ldi	r20, 0x7F	; 127
    5056:	57 e4       	ldi	r21, 0x47	; 71
    5058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    505c:	18 16       	cp	r1, r24
    505e:	0c f0       	brlt	.+2      	; 0x5062 <SPICommunication+0xac4>
    5060:	43 c0       	rjmp	.+134    	; 0x50e8 <SPICommunication+0xb4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5062:	fe 01       	movw	r30, r28
    5064:	e3 59       	subi	r30, 0x93	; 147
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	60 81       	ld	r22, Z
    506a:	71 81       	ldd	r23, Z+1	; 0x01
    506c:	82 81       	ldd	r24, Z+2	; 0x02
    506e:	93 81       	ldd	r25, Z+3	; 0x03
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e2       	ldi	r20, 0x20	; 32
    5076:	51 e4       	ldi	r21, 0x41	; 65
    5078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	8e 01       	movw	r16, r28
    5082:	09 59       	subi	r16, 0x99	; 153
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	bc 01       	movw	r22, r24
    5088:	cd 01       	movw	r24, r26
    508a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	f8 01       	movw	r30, r16
    5094:	91 83       	std	Z+1, r25	; 0x01
    5096:	80 83       	st	Z, r24
    5098:	1f c0       	rjmp	.+62     	; 0x50d8 <SPICommunication+0xb3a>
    509a:	fe 01       	movw	r30, r28
    509c:	eb 59       	subi	r30, 0x9B	; 155
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	88 ec       	ldi	r24, 0xC8	; 200
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	91 83       	std	Z+1, r25	; 0x01
    50a6:	80 83       	st	Z, r24
    50a8:	fe 01       	movw	r30, r28
    50aa:	eb 59       	subi	r30, 0x9B	; 155
    50ac:	ff 4f       	sbci	r31, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	91 81       	ldd	r25, Z+1	; 0x01
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	f1 f7       	brne	.-4      	; 0x50b2 <SPICommunication+0xb14>
    50b6:	fe 01       	movw	r30, r28
    50b8:	eb 59       	subi	r30, 0x9B	; 155
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c0:	de 01       	movw	r26, r28
    50c2:	a9 59       	subi	r26, 0x99	; 153
    50c4:	bf 4f       	sbci	r27, 0xFF	; 255
    50c6:	fe 01       	movw	r30, r28
    50c8:	e9 59       	subi	r30, 0x99	; 153
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	80 81       	ld	r24, Z
    50ce:	91 81       	ldd	r25, Z+1	; 0x01
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	11 96       	adiw	r26, 0x01	; 1
    50d4:	9c 93       	st	X, r25
    50d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d8:	fe 01       	movw	r30, r28
    50da:	e9 59       	subi	r30, 0x99	; 153
    50dc:	ff 4f       	sbci	r31, 0xFF	; 255
    50de:	80 81       	ld	r24, Z
    50e0:	91 81       	ldd	r25, Z+1	; 0x01
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	d1 f6       	brne	.-76     	; 0x509a <SPICommunication+0xafc>
    50e6:	27 c0       	rjmp	.+78     	; 0x5136 <SPICommunication+0xb98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e8:	8e 01       	movw	r16, r28
    50ea:	09 59       	subi	r16, 0x99	; 153
    50ec:	1f 4f       	sbci	r17, 0xFF	; 255
    50ee:	fe 01       	movw	r30, r28
    50f0:	e7 59       	subi	r30, 0x97	; 151
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	60 81       	ld	r22, Z
    50f6:	71 81       	ldd	r23, Z+1	; 0x01
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	93 81       	ldd	r25, Z+3	; 0x03
    50fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	f8 01       	movw	r30, r16
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	80 83       	st	Z, r24
    510a:	de 01       	movw	r26, r28
    510c:	ad 59       	subi	r26, 0x9D	; 157
    510e:	bf 4f       	sbci	r27, 0xFF	; 255
    5110:	fe 01       	movw	r30, r28
    5112:	e9 59       	subi	r30, 0x99	; 153
    5114:	ff 4f       	sbci	r31, 0xFF	; 255
    5116:	80 81       	ld	r24, Z
    5118:	91 81       	ldd	r25, Z+1	; 0x01
    511a:	8d 93       	st	X+, r24
    511c:	9c 93       	st	X, r25
    511e:	fe 01       	movw	r30, r28
    5120:	ed 59       	subi	r30, 0x9D	; 157
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <SPICommunication+0xb8a>
    512c:	fe 01       	movw	r30, r28
    512e:	ed 59       	subi	r30, 0x9D	; 157
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	91 83       	std	Z+1, r25	; 0x01
    5134:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	64 e0       	ldi	r22, 0x04	; 4
    513a:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    513e:	85 e9       	ldi	r24, 0x95	; 149
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	64 e0       	ldi	r22, 0x04	; 4
    514a:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 3    off");
    514e:	85 eb       	ldi	r24, 0xB5	; 181
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    5156:	83 e0       	ldi	r24, 0x03	; 3
    5158:	67 e0       	ldi	r22, 0x07	; 7
    515a:	40 e0       	ldi	r20, 0x00	; 0
    515c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    5160:	fe 01       	movw	r30, r28
    5162:	e1 5a       	subi	r30, 0xA1	; 161
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	90 e8       	ldi	r25, 0x80	; 128
    516a:	ab e3       	ldi	r26, 0x3B	; 59
    516c:	b4 e4       	ldi	r27, 0x44	; 68
    516e:	80 83       	st	Z, r24
    5170:	91 83       	std	Z+1, r25	; 0x01
    5172:	a2 83       	std	Z+2, r26	; 0x02
    5174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5176:	8e 01       	movw	r16, r28
    5178:	05 5a       	subi	r16, 0xA5	; 165
    517a:	1f 4f       	sbci	r17, 0xFF	; 255
    517c:	fe 01       	movw	r30, r28
    517e:	e1 5a       	subi	r30, 0xA1	; 161
    5180:	ff 4f       	sbci	r31, 0xFF	; 255
    5182:	60 81       	ld	r22, Z
    5184:	71 81       	ldd	r23, Z+1	; 0x01
    5186:	82 81       	ldd	r24, Z+2	; 0x02
    5188:	93 81       	ldd	r25, Z+3	; 0x03
    518a:	20 e0       	ldi	r18, 0x00	; 0
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	4a ef       	ldi	r20, 0xFA	; 250
    5190:	54 e4       	ldi	r21, 0x44	; 68
    5192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5196:	dc 01       	movw	r26, r24
    5198:	cb 01       	movw	r24, r22
    519a:	f8 01       	movw	r30, r16
    519c:	80 83       	st	Z, r24
    519e:	91 83       	std	Z+1, r25	; 0x01
    51a0:	a2 83       	std	Z+2, r26	; 0x02
    51a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51a4:	fe 01       	movw	r30, r28
    51a6:	e5 5a       	subi	r30, 0xA5	; 165
    51a8:	ff 4f       	sbci	r31, 0xFF	; 255
    51aa:	60 81       	ld	r22, Z
    51ac:	71 81       	ldd	r23, Z+1	; 0x01
    51ae:	82 81       	ldd	r24, Z+2	; 0x02
    51b0:	93 81       	ldd	r25, Z+3	; 0x03
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	40 e8       	ldi	r20, 0x80	; 128
    51b8:	5f e3       	ldi	r21, 0x3F	; 63
    51ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51be:	88 23       	and	r24, r24
    51c0:	44 f4       	brge	.+16     	; 0x51d2 <SPICommunication+0xc34>
		__ticks = 1;
    51c2:	fe 01       	movw	r30, r28
    51c4:	e7 5a       	subi	r30, 0xA7	; 167
    51c6:	ff 4f       	sbci	r31, 0xFF	; 255
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	91 83       	std	Z+1, r25	; 0x01
    51ce:	80 83       	st	Z, r24
    51d0:	64 c0       	rjmp	.+200    	; 0x529a <SPICommunication+0xcfc>
	else if (__tmp > 65535)
    51d2:	fe 01       	movw	r30, r28
    51d4:	e5 5a       	subi	r30, 0xA5	; 165
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	60 81       	ld	r22, Z
    51da:	71 81       	ldd	r23, Z+1	; 0x01
    51dc:	82 81       	ldd	r24, Z+2	; 0x02
    51de:	93 81       	ldd	r25, Z+3	; 0x03
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	3f ef       	ldi	r19, 0xFF	; 255
    51e4:	4f e7       	ldi	r20, 0x7F	; 127
    51e6:	57 e4       	ldi	r21, 0x47	; 71
    51e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ec:	18 16       	cp	r1, r24
    51ee:	0c f0       	brlt	.+2      	; 0x51f2 <SPICommunication+0xc54>
    51f0:	43 c0       	rjmp	.+134    	; 0x5278 <SPICommunication+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51f2:	fe 01       	movw	r30, r28
    51f4:	e1 5a       	subi	r30, 0xA1	; 161
    51f6:	ff 4f       	sbci	r31, 0xFF	; 255
    51f8:	60 81       	ld	r22, Z
    51fa:	71 81       	ldd	r23, Z+1	; 0x01
    51fc:	82 81       	ldd	r24, Z+2	; 0x02
    51fe:	93 81       	ldd	r25, Z+3	; 0x03
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e2       	ldi	r20, 0x20	; 32
    5206:	51 e4       	ldi	r21, 0x41	; 65
    5208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520c:	dc 01       	movw	r26, r24
    520e:	cb 01       	movw	r24, r22
    5210:	8e 01       	movw	r16, r28
    5212:	07 5a       	subi	r16, 0xA7	; 167
    5214:	1f 4f       	sbci	r17, 0xFF	; 255
    5216:	bc 01       	movw	r22, r24
    5218:	cd 01       	movw	r24, r26
    521a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	f8 01       	movw	r30, r16
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	80 83       	st	Z, r24
    5228:	1f c0       	rjmp	.+62     	; 0x5268 <SPICommunication+0xcca>
    522a:	fe 01       	movw	r30, r28
    522c:	e9 5a       	subi	r30, 0xA9	; 169
    522e:	ff 4f       	sbci	r31, 0xFF	; 255
    5230:	88 ec       	ldi	r24, 0xC8	; 200
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	80 83       	st	Z, r24
    5238:	fe 01       	movw	r30, r28
    523a:	e9 5a       	subi	r30, 0xA9	; 169
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	80 81       	ld	r24, Z
    5240:	91 81       	ldd	r25, Z+1	; 0x01
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	f1 f7       	brne	.-4      	; 0x5242 <SPICommunication+0xca4>
    5246:	fe 01       	movw	r30, r28
    5248:	e9 5a       	subi	r30, 0xA9	; 169
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	91 83       	std	Z+1, r25	; 0x01
    524e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5250:	de 01       	movw	r26, r28
    5252:	a7 5a       	subi	r26, 0xA7	; 167
    5254:	bf 4f       	sbci	r27, 0xFF	; 255
    5256:	fe 01       	movw	r30, r28
    5258:	e7 5a       	subi	r30, 0xA7	; 167
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	80 81       	ld	r24, Z
    525e:	91 81       	ldd	r25, Z+1	; 0x01
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	11 96       	adiw	r26, 0x01	; 1
    5264:	9c 93       	st	X, r25
    5266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5268:	fe 01       	movw	r30, r28
    526a:	e7 5a       	subi	r30, 0xA7	; 167
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	80 81       	ld	r24, Z
    5270:	91 81       	ldd	r25, Z+1	; 0x01
    5272:	00 97       	sbiw	r24, 0x00	; 0
    5274:	d1 f6       	brne	.-76     	; 0x522a <SPICommunication+0xc8c>
    5276:	82 c3       	rjmp	.+1796   	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5278:	8e 01       	movw	r16, r28
    527a:	07 5a       	subi	r16, 0xA7	; 167
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	fe 01       	movw	r30, r28
    5280:	e5 5a       	subi	r30, 0xA5	; 165
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	60 81       	ld	r22, Z
    5286:	71 81       	ldd	r23, Z+1	; 0x01
    5288:	82 81       	ldd	r24, Z+2	; 0x02
    528a:	93 81       	ldd	r25, Z+3	; 0x03
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	f8 01       	movw	r30, r16
    5296:	91 83       	std	Z+1, r25	; 0x01
    5298:	80 83       	st	Z, r24
    529a:	de 01       	movw	r26, r28
    529c:	ab 5a       	subi	r26, 0xAB	; 171
    529e:	bf 4f       	sbci	r27, 0xFF	; 255
    52a0:	fe 01       	movw	r30, r28
    52a2:	e7 5a       	subi	r30, 0xA7	; 167
    52a4:	ff 4f       	sbci	r31, 0xFF	; 255
    52a6:	80 81       	ld	r24, Z
    52a8:	91 81       	ldd	r25, Z+1	; 0x01
    52aa:	11 96       	adiw	r26, 0x01	; 1
    52ac:	9c 93       	st	X, r25
    52ae:	8e 93       	st	-X, r24
    52b0:	fe 01       	movw	r30, r28
    52b2:	eb 5a       	subi	r30, 0xAB	; 171
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	80 81       	ld	r24, Z
    52b8:	91 81       	ldd	r25, Z+1	; 0x01
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	f1 f7       	brne	.-4      	; 0x52ba <SPICommunication+0xd1c>
    52be:	fe 01       	movw	r30, r28
    52c0:	eb 5a       	subi	r30, 0xAB	; 171
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	91 83       	std	Z+1, r25	; 0x01
    52c6:	80 83       	st	Z, r24
    52c8:	59 c3       	rjmp	.+1714   	; 0x597c <SPICommunication+0x13de>
				_delay_ms(750);
			}
		break;
		case'4' :
			if(Global_LCD_VIEW == '0'){
    52ca:	80 91 fd 01 	lds	r24, 0x01FD
    52ce:	80 33       	cpi	r24, 0x30	; 48
    52d0:	09 f0       	breq	.+2      	; 0x52d4 <SPICommunication+0xd36>
    52d2:	54 c3       	rjmp	.+1704   	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    52da:	fe 01       	movw	r30, r28
    52dc:	ef 5a       	subi	r30, 0xAF	; 175
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	80 e0       	ldi	r24, 0x00	; 0
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	a0 e0       	ldi	r26, 0x00	; 0
    52e6:	b0 e4       	ldi	r27, 0x40	; 64
    52e8:	80 83       	st	Z, r24
    52ea:	91 83       	std	Z+1, r25	; 0x01
    52ec:	a2 83       	std	Z+2, r26	; 0x02
    52ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52f0:	8e 01       	movw	r16, r28
    52f2:	03 5b       	subi	r16, 0xB3	; 179
    52f4:	1f 4f       	sbci	r17, 0xFF	; 255
    52f6:	fe 01       	movw	r30, r28
    52f8:	ef 5a       	subi	r30, 0xAF	; 175
    52fa:	ff 4f       	sbci	r31, 0xFF	; 255
    52fc:	60 81       	ld	r22, Z
    52fe:	71 81       	ldd	r23, Z+1	; 0x01
    5300:	82 81       	ldd	r24, Z+2	; 0x02
    5302:	93 81       	ldd	r25, Z+3	; 0x03
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	4a ef       	ldi	r20, 0xFA	; 250
    530a:	54 e4       	ldi	r21, 0x44	; 68
    530c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	f8 01       	movw	r30, r16
    5316:	80 83       	st	Z, r24
    5318:	91 83       	std	Z+1, r25	; 0x01
    531a:	a2 83       	std	Z+2, r26	; 0x02
    531c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    531e:	fe 01       	movw	r30, r28
    5320:	e3 5b       	subi	r30, 0xB3	; 179
    5322:	ff 4f       	sbci	r31, 0xFF	; 255
    5324:	60 81       	ld	r22, Z
    5326:	71 81       	ldd	r23, Z+1	; 0x01
    5328:	82 81       	ldd	r24, Z+2	; 0x02
    532a:	93 81       	ldd	r25, Z+3	; 0x03
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	40 e8       	ldi	r20, 0x80	; 128
    5332:	5f e3       	ldi	r21, 0x3F	; 63
    5334:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5338:	88 23       	and	r24, r24
    533a:	44 f4       	brge	.+16     	; 0x534c <SPICommunication+0xdae>
		__ticks = 1;
    533c:	fe 01       	movw	r30, r28
    533e:	e5 5b       	subi	r30, 0xB5	; 181
    5340:	ff 4f       	sbci	r31, 0xFF	; 255
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	80 83       	st	Z, r24
    534a:	64 c0       	rjmp	.+200    	; 0x5414 <SPICommunication+0xe76>
	else if (__tmp > 65535)
    534c:	fe 01       	movw	r30, r28
    534e:	e3 5b       	subi	r30, 0xB3	; 179
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	60 81       	ld	r22, Z
    5354:	71 81       	ldd	r23, Z+1	; 0x01
    5356:	82 81       	ldd	r24, Z+2	; 0x02
    5358:	93 81       	ldd	r25, Z+3	; 0x03
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	3f ef       	ldi	r19, 0xFF	; 255
    535e:	4f e7       	ldi	r20, 0x7F	; 127
    5360:	57 e4       	ldi	r21, 0x47	; 71
    5362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5366:	18 16       	cp	r1, r24
    5368:	0c f0       	brlt	.+2      	; 0x536c <SPICommunication+0xdce>
    536a:	43 c0       	rjmp	.+134    	; 0x53f2 <SPICommunication+0xe54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    536c:	fe 01       	movw	r30, r28
    536e:	ef 5a       	subi	r30, 0xAF	; 175
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	60 81       	ld	r22, Z
    5374:	71 81       	ldd	r23, Z+1	; 0x01
    5376:	82 81       	ldd	r24, Z+2	; 0x02
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e2       	ldi	r20, 0x20	; 32
    5380:	51 e4       	ldi	r21, 0x41	; 65
    5382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	8e 01       	movw	r16, r28
    538c:	05 5b       	subi	r16, 0xB5	; 181
    538e:	1f 4f       	sbci	r17, 0xFF	; 255
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	f8 01       	movw	r30, r16
    539e:	91 83       	std	Z+1, r25	; 0x01
    53a0:	80 83       	st	Z, r24
    53a2:	1f c0       	rjmp	.+62     	; 0x53e2 <SPICommunication+0xe44>
    53a4:	fe 01       	movw	r30, r28
    53a6:	e7 5b       	subi	r30, 0xB7	; 183
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	88 ec       	ldi	r24, 0xC8	; 200
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	91 83       	std	Z+1, r25	; 0x01
    53b0:	80 83       	st	Z, r24
    53b2:	fe 01       	movw	r30, r28
    53b4:	e7 5b       	subi	r30, 0xB7	; 183
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	80 81       	ld	r24, Z
    53ba:	91 81       	ldd	r25, Z+1	; 0x01
    53bc:	01 97       	sbiw	r24, 0x01	; 1
    53be:	f1 f7       	brne	.-4      	; 0x53bc <SPICommunication+0xe1e>
    53c0:	fe 01       	movw	r30, r28
    53c2:	e7 5b       	subi	r30, 0xB7	; 183
    53c4:	ff 4f       	sbci	r31, 0xFF	; 255
    53c6:	91 83       	std	Z+1, r25	; 0x01
    53c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ca:	de 01       	movw	r26, r28
    53cc:	a5 5b       	subi	r26, 0xB5	; 181
    53ce:	bf 4f       	sbci	r27, 0xFF	; 255
    53d0:	fe 01       	movw	r30, r28
    53d2:	e5 5b       	subi	r30, 0xB5	; 181
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	80 81       	ld	r24, Z
    53d8:	91 81       	ldd	r25, Z+1	; 0x01
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	11 96       	adiw	r26, 0x01	; 1
    53de:	9c 93       	st	X, r25
    53e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e2:	fe 01       	movw	r30, r28
    53e4:	e5 5b       	subi	r30, 0xB5	; 181
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	80 81       	ld	r24, Z
    53ea:	91 81       	ldd	r25, Z+1	; 0x01
    53ec:	00 97       	sbiw	r24, 0x00	; 0
    53ee:	d1 f6       	brne	.-76     	; 0x53a4 <SPICommunication+0xe06>
    53f0:	27 c0       	rjmp	.+78     	; 0x5440 <SPICommunication+0xea2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f2:	8e 01       	movw	r16, r28
    53f4:	05 5b       	subi	r16, 0xB5	; 181
    53f6:	1f 4f       	sbci	r17, 0xFF	; 255
    53f8:	fe 01       	movw	r30, r28
    53fa:	e3 5b       	subi	r30, 0xB3	; 179
    53fc:	ff 4f       	sbci	r31, 0xFF	; 255
    53fe:	60 81       	ld	r22, Z
    5400:	71 81       	ldd	r23, Z+1	; 0x01
    5402:	82 81       	ldd	r24, Z+2	; 0x02
    5404:	93 81       	ldd	r25, Z+3	; 0x03
    5406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540a:	dc 01       	movw	r26, r24
    540c:	cb 01       	movw	r24, r22
    540e:	f8 01       	movw	r30, r16
    5410:	91 83       	std	Z+1, r25	; 0x01
    5412:	80 83       	st	Z, r24
    5414:	de 01       	movw	r26, r28
    5416:	a9 5b       	subi	r26, 0xB9	; 185
    5418:	bf 4f       	sbci	r27, 0xFF	; 255
    541a:	fe 01       	movw	r30, r28
    541c:	e5 5b       	subi	r30, 0xB5	; 181
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	80 81       	ld	r24, Z
    5422:	91 81       	ldd	r25, Z+1	; 0x01
    5424:	8d 93       	st	X+, r24
    5426:	9c 93       	st	X, r25
    5428:	fe 01       	movw	r30, r28
    542a:	e9 5b       	subi	r30, 0xB9	; 185
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	80 81       	ld	r24, Z
    5430:	91 81       	ldd	r25, Z+1	; 0x01
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	f1 f7       	brne	.-4      	; 0x5432 <SPICommunication+0xe94>
    5436:	fe 01       	movw	r30, r28
    5438:	e9 5b       	subi	r30, 0xB9	; 185
    543a:	ff 4f       	sbci	r31, 0xFF	; 255
    543c:	91 83       	std	Z+1, r25	; 0x01
    543e:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	64 e0       	ldi	r22, 0x04	; 4
    5444:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    5448:	85 e9       	ldi	r24, 0x95	; 149
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    5450:	82 e0       	ldi	r24, 0x02	; 2
    5452:	64 e0       	ldi	r22, 0x04	; 4
    5454:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 1    on");
    5458:	8f eb       	ldi	r24, 0xBF	; 191
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    5460:	83 e0       	ldi	r24, 0x03	; 3
    5462:	67 e0       	ldi	r22, 0x07	; 7
    5464:	40 e0       	ldi	r20, 0x00	; 0
    5466:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    546a:	fe 01       	movw	r30, r28
    546c:	ed 5b       	subi	r30, 0xBD	; 189
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	80 e0       	ldi	r24, 0x00	; 0
    5472:	90 e8       	ldi	r25, 0x80	; 128
    5474:	ab e3       	ldi	r26, 0x3B	; 59
    5476:	b4 e4       	ldi	r27, 0x44	; 68
    5478:	80 83       	st	Z, r24
    547a:	91 83       	std	Z+1, r25	; 0x01
    547c:	a2 83       	std	Z+2, r26	; 0x02
    547e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5480:	8e 01       	movw	r16, r28
    5482:	01 5c       	subi	r16, 0xC1	; 193
    5484:	1f 4f       	sbci	r17, 0xFF	; 255
    5486:	fe 01       	movw	r30, r28
    5488:	ed 5b       	subi	r30, 0xBD	; 189
    548a:	ff 4f       	sbci	r31, 0xFF	; 255
    548c:	60 81       	ld	r22, Z
    548e:	71 81       	ldd	r23, Z+1	; 0x01
    5490:	82 81       	ldd	r24, Z+2	; 0x02
    5492:	93 81       	ldd	r25, Z+3	; 0x03
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	4a ef       	ldi	r20, 0xFA	; 250
    549a:	54 e4       	ldi	r21, 0x44	; 68
    549c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	f8 01       	movw	r30, r16
    54a6:	80 83       	st	Z, r24
    54a8:	91 83       	std	Z+1, r25	; 0x01
    54aa:	a2 83       	std	Z+2, r26	; 0x02
    54ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ae:	fe 01       	movw	r30, r28
    54b0:	ff 96       	adiw	r30, 0x3f	; 63
    54b2:	60 81       	ld	r22, Z
    54b4:	71 81       	ldd	r23, Z+1	; 0x01
    54b6:	82 81       	ldd	r24, Z+2	; 0x02
    54b8:	93 81       	ldd	r25, Z+3	; 0x03
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	40 e8       	ldi	r20, 0x80	; 128
    54c0:	5f e3       	ldi	r21, 0x3F	; 63
    54c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54c6:	88 23       	and	r24, r24
    54c8:	2c f4       	brge	.+10     	; 0x54d4 <SPICommunication+0xf36>
		__ticks = 1;
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	9e af       	std	Y+62, r25	; 0x3e
    54d0:	8d af       	std	Y+61, r24	; 0x3d
    54d2:	46 c0       	rjmp	.+140    	; 0x5560 <SPICommunication+0xfc2>
	else if (__tmp > 65535)
    54d4:	fe 01       	movw	r30, r28
    54d6:	ff 96       	adiw	r30, 0x3f	; 63
    54d8:	60 81       	ld	r22, Z
    54da:	71 81       	ldd	r23, Z+1	; 0x01
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	93 81       	ldd	r25, Z+3	; 0x03
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	3f ef       	ldi	r19, 0xFF	; 255
    54e4:	4f e7       	ldi	r20, 0x7F	; 127
    54e6:	57 e4       	ldi	r21, 0x47	; 71
    54e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54ec:	18 16       	cp	r1, r24
    54ee:	64 f5       	brge	.+88     	; 0x5548 <SPICommunication+0xfaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54f0:	fe 01       	movw	r30, r28
    54f2:	ed 5b       	subi	r30, 0xBD	; 189
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	60 81       	ld	r22, Z
    54f8:	71 81       	ldd	r23, Z+1	; 0x01
    54fa:	82 81       	ldd	r24, Z+2	; 0x02
    54fc:	93 81       	ldd	r25, Z+3	; 0x03
    54fe:	20 e0       	ldi	r18, 0x00	; 0
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	40 e2       	ldi	r20, 0x20	; 32
    5504:	51 e4       	ldi	r21, 0x41	; 65
    5506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550a:	dc 01       	movw	r26, r24
    550c:	cb 01       	movw	r24, r22
    550e:	bc 01       	movw	r22, r24
    5510:	cd 01       	movw	r24, r26
    5512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5516:	dc 01       	movw	r26, r24
    5518:	cb 01       	movw	r24, r22
    551a:	9e af       	std	Y+62, r25	; 0x3e
    551c:	8d af       	std	Y+61, r24	; 0x3d
    551e:	0f c0       	rjmp	.+30     	; 0x553e <SPICommunication+0xfa0>
    5520:	88 ec       	ldi	r24, 0xC8	; 200
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	9c af       	std	Y+60, r25	; 0x3c
    5526:	8b af       	std	Y+59, r24	; 0x3b
    5528:	8b ad       	ldd	r24, Y+59	; 0x3b
    552a:	9c ad       	ldd	r25, Y+60	; 0x3c
    552c:	01 97       	sbiw	r24, 0x01	; 1
    552e:	f1 f7       	brne	.-4      	; 0x552c <SPICommunication+0xf8e>
    5530:	9c af       	std	Y+60, r25	; 0x3c
    5532:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5534:	8d ad       	ldd	r24, Y+61	; 0x3d
    5536:	9e ad       	ldd	r25, Y+62	; 0x3e
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	9e af       	std	Y+62, r25	; 0x3e
    553c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    553e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5540:	9e ad       	ldd	r25, Y+62	; 0x3e
    5542:	00 97       	sbiw	r24, 0x00	; 0
    5544:	69 f7       	brne	.-38     	; 0x5520 <SPICommunication+0xf82>
    5546:	1a c2       	rjmp	.+1076   	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5548:	fe 01       	movw	r30, r28
    554a:	ff 96       	adiw	r30, 0x3f	; 63
    554c:	60 81       	ld	r22, Z
    554e:	71 81       	ldd	r23, Z+1	; 0x01
    5550:	82 81       	ldd	r24, Z+2	; 0x02
    5552:	93 81       	ldd	r25, Z+3	; 0x03
    5554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5558:	dc 01       	movw	r26, r24
    555a:	cb 01       	movw	r24, r22
    555c:	9e af       	std	Y+62, r25	; 0x3e
    555e:	8d af       	std	Y+61, r24	; 0x3d
    5560:	8d ad       	ldd	r24, Y+61	; 0x3d
    5562:	9e ad       	ldd	r25, Y+62	; 0x3e
    5564:	9a af       	std	Y+58, r25	; 0x3a
    5566:	89 af       	std	Y+57, r24	; 0x39
    5568:	89 ad       	ldd	r24, Y+57	; 0x39
    556a:	9a ad       	ldd	r25, Y+58	; 0x3a
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	f1 f7       	brne	.-4      	; 0x556c <SPICommunication+0xfce>
    5570:	9a af       	std	Y+58, r25	; 0x3a
    5572:	89 af       	std	Y+57, r24	; 0x39
    5574:	03 c2       	rjmp	.+1030   	; 0x597c <SPICommunication+0x13de>
				_delay_ms(750);
			}
		break;
		case'5' :
			if(Global_LCD_VIEW == '0'){
    5576:	80 91 fd 01 	lds	r24, 0x01FD
    557a:	80 33       	cpi	r24, 0x30	; 48
    557c:	09 f0       	breq	.+2      	; 0x5580 <SPICommunication+0xfe2>
    557e:	fe c1       	rjmp	.+1020   	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    5586:	80 e0       	ldi	r24, 0x00	; 0
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	a0 e0       	ldi	r26, 0x00	; 0
    558c:	b0 e4       	ldi	r27, 0x40	; 64
    558e:	8d ab       	std	Y+53, r24	; 0x35
    5590:	9e ab       	std	Y+54, r25	; 0x36
    5592:	af ab       	std	Y+55, r26	; 0x37
    5594:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5596:	6d a9       	ldd	r22, Y+53	; 0x35
    5598:	7e a9       	ldd	r23, Y+54	; 0x36
    559a:	8f a9       	ldd	r24, Y+55	; 0x37
    559c:	98 ad       	ldd	r25, Y+56	; 0x38
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	4a ef       	ldi	r20, 0xFA	; 250
    55a4:	54 e4       	ldi	r21, 0x44	; 68
    55a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	89 ab       	std	Y+49, r24	; 0x31
    55b0:	9a ab       	std	Y+50, r25	; 0x32
    55b2:	ab ab       	std	Y+51, r26	; 0x33
    55b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    55b6:	69 a9       	ldd	r22, Y+49	; 0x31
    55b8:	7a a9       	ldd	r23, Y+50	; 0x32
    55ba:	8b a9       	ldd	r24, Y+51	; 0x33
    55bc:	9c a9       	ldd	r25, Y+52	; 0x34
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	40 e8       	ldi	r20, 0x80	; 128
    55c4:	5f e3       	ldi	r21, 0x3F	; 63
    55c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55ca:	88 23       	and	r24, r24
    55cc:	2c f4       	brge	.+10     	; 0x55d8 <SPICommunication+0x103a>
		__ticks = 1;
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	98 ab       	std	Y+48, r25	; 0x30
    55d4:	8f a7       	std	Y+47, r24	; 0x2f
    55d6:	3f c0       	rjmp	.+126    	; 0x5656 <SPICommunication+0x10b8>
	else if (__tmp > 65535)
    55d8:	69 a9       	ldd	r22, Y+49	; 0x31
    55da:	7a a9       	ldd	r23, Y+50	; 0x32
    55dc:	8b a9       	ldd	r24, Y+51	; 0x33
    55de:	9c a9       	ldd	r25, Y+52	; 0x34
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	3f ef       	ldi	r19, 0xFF	; 255
    55e4:	4f e7       	ldi	r20, 0x7F	; 127
    55e6:	57 e4       	ldi	r21, 0x47	; 71
    55e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ec:	18 16       	cp	r1, r24
    55ee:	4c f5       	brge	.+82     	; 0x5642 <SPICommunication+0x10a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f0:	6d a9       	ldd	r22, Y+53	; 0x35
    55f2:	7e a9       	ldd	r23, Y+54	; 0x36
    55f4:	8f a9       	ldd	r24, Y+55	; 0x37
    55f6:	98 ad       	ldd	r25, Y+56	; 0x38
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e2       	ldi	r20, 0x20	; 32
    55fe:	51 e4       	ldi	r21, 0x41	; 65
    5600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	bc 01       	movw	r22, r24
    560a:	cd 01       	movw	r24, r26
    560c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5610:	dc 01       	movw	r26, r24
    5612:	cb 01       	movw	r24, r22
    5614:	98 ab       	std	Y+48, r25	; 0x30
    5616:	8f a7       	std	Y+47, r24	; 0x2f
    5618:	0f c0       	rjmp	.+30     	; 0x5638 <SPICommunication+0x109a>
    561a:	88 ec       	ldi	r24, 0xC8	; 200
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	9e a7       	std	Y+46, r25	; 0x2e
    5620:	8d a7       	std	Y+45, r24	; 0x2d
    5622:	8d a5       	ldd	r24, Y+45	; 0x2d
    5624:	9e a5       	ldd	r25, Y+46	; 0x2e
    5626:	01 97       	sbiw	r24, 0x01	; 1
    5628:	f1 f7       	brne	.-4      	; 0x5626 <SPICommunication+0x1088>
    562a:	9e a7       	std	Y+46, r25	; 0x2e
    562c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    562e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5630:	98 a9       	ldd	r25, Y+48	; 0x30
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	98 ab       	std	Y+48, r25	; 0x30
    5636:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5638:	8f a5       	ldd	r24, Y+47	; 0x2f
    563a:	98 a9       	ldd	r25, Y+48	; 0x30
    563c:	00 97       	sbiw	r24, 0x00	; 0
    563e:	69 f7       	brne	.-38     	; 0x561a <SPICommunication+0x107c>
    5640:	14 c0       	rjmp	.+40     	; 0x566a <SPICommunication+0x10cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5642:	69 a9       	ldd	r22, Y+49	; 0x31
    5644:	7a a9       	ldd	r23, Y+50	; 0x32
    5646:	8b a9       	ldd	r24, Y+51	; 0x33
    5648:	9c a9       	ldd	r25, Y+52	; 0x34
    564a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	98 ab       	std	Y+48, r25	; 0x30
    5654:	8f a7       	std	Y+47, r24	; 0x2f
    5656:	8f a5       	ldd	r24, Y+47	; 0x2f
    5658:	98 a9       	ldd	r25, Y+48	; 0x30
    565a:	9c a7       	std	Y+44, r25	; 0x2c
    565c:	8b a7       	std	Y+43, r24	; 0x2b
    565e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5660:	9c a5       	ldd	r25, Y+44	; 0x2c
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	f1 f7       	brne	.-4      	; 0x5662 <SPICommunication+0x10c4>
    5666:	9c a7       	std	Y+44, r25	; 0x2c
    5668:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	64 e0       	ldi	r22, 0x04	; 4
    566e:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    5672:	85 e9       	ldi	r24, 0x95	; 149
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    567a:	82 e0       	ldi	r24, 0x02	; 2
    567c:	64 e0       	ldi	r22, 0x04	; 4
    567e:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 2    on");
    5682:	88 ec       	ldi	r24, 0xC8	; 200
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    568a:	83 e0       	ldi	r24, 0x03	; 3
    568c:	67 e0       	ldi	r22, 0x07	; 7
    568e:	40 e0       	ldi	r20, 0x00	; 0
    5690:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    5694:	80 e0       	ldi	r24, 0x00	; 0
    5696:	90 e8       	ldi	r25, 0x80	; 128
    5698:	ab e3       	ldi	r26, 0x3B	; 59
    569a:	b4 e4       	ldi	r27, 0x44	; 68
    569c:	8f a3       	std	Y+39, r24	; 0x27
    569e:	98 a7       	std	Y+40, r25	; 0x28
    56a0:	a9 a7       	std	Y+41, r26	; 0x29
    56a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a4:	6f a1       	ldd	r22, Y+39	; 0x27
    56a6:	78 a5       	ldd	r23, Y+40	; 0x28
    56a8:	89 a5       	ldd	r24, Y+41	; 0x29
    56aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    56ac:	20 e0       	ldi	r18, 0x00	; 0
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	4a ef       	ldi	r20, 0xFA	; 250
    56b2:	54 e4       	ldi	r21, 0x44	; 68
    56b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56b8:	dc 01       	movw	r26, r24
    56ba:	cb 01       	movw	r24, r22
    56bc:	8b a3       	std	Y+35, r24	; 0x23
    56be:	9c a3       	std	Y+36, r25	; 0x24
    56c0:	ad a3       	std	Y+37, r26	; 0x25
    56c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56c4:	6b a1       	ldd	r22, Y+35	; 0x23
    56c6:	7c a1       	ldd	r23, Y+36	; 0x24
    56c8:	8d a1       	ldd	r24, Y+37	; 0x25
    56ca:	9e a1       	ldd	r25, Y+38	; 0x26
    56cc:	20 e0       	ldi	r18, 0x00	; 0
    56ce:	30 e0       	ldi	r19, 0x00	; 0
    56d0:	40 e8       	ldi	r20, 0x80	; 128
    56d2:	5f e3       	ldi	r21, 0x3F	; 63
    56d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56d8:	88 23       	and	r24, r24
    56da:	2c f4       	brge	.+10     	; 0x56e6 <SPICommunication+0x1148>
		__ticks = 1;
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	9a a3       	std	Y+34, r25	; 0x22
    56e2:	89 a3       	std	Y+33, r24	; 0x21
    56e4:	3f c0       	rjmp	.+126    	; 0x5764 <SPICommunication+0x11c6>
	else if (__tmp > 65535)
    56e6:	6b a1       	ldd	r22, Y+35	; 0x23
    56e8:	7c a1       	ldd	r23, Y+36	; 0x24
    56ea:	8d a1       	ldd	r24, Y+37	; 0x25
    56ec:	9e a1       	ldd	r25, Y+38	; 0x26
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	3f ef       	ldi	r19, 0xFF	; 255
    56f2:	4f e7       	ldi	r20, 0x7F	; 127
    56f4:	57 e4       	ldi	r21, 0x47	; 71
    56f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56fa:	18 16       	cp	r1, r24
    56fc:	4c f5       	brge	.+82     	; 0x5750 <SPICommunication+0x11b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56fe:	6f a1       	ldd	r22, Y+39	; 0x27
    5700:	78 a5       	ldd	r23, Y+40	; 0x28
    5702:	89 a5       	ldd	r24, Y+41	; 0x29
    5704:	9a a5       	ldd	r25, Y+42	; 0x2a
    5706:	20 e0       	ldi	r18, 0x00	; 0
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	40 e2       	ldi	r20, 0x20	; 32
    570c:	51 e4       	ldi	r21, 0x41	; 65
    570e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	bc 01       	movw	r22, r24
    5718:	cd 01       	movw	r24, r26
    571a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    571e:	dc 01       	movw	r26, r24
    5720:	cb 01       	movw	r24, r22
    5722:	9a a3       	std	Y+34, r25	; 0x22
    5724:	89 a3       	std	Y+33, r24	; 0x21
    5726:	0f c0       	rjmp	.+30     	; 0x5746 <SPICommunication+0x11a8>
    5728:	88 ec       	ldi	r24, 0xC8	; 200
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	98 a3       	std	Y+32, r25	; 0x20
    572e:	8f 8f       	std	Y+31, r24	; 0x1f
    5730:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5732:	98 a1       	ldd	r25, Y+32	; 0x20
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	f1 f7       	brne	.-4      	; 0x5734 <SPICommunication+0x1196>
    5738:	98 a3       	std	Y+32, r25	; 0x20
    573a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    573c:	89 a1       	ldd	r24, Y+33	; 0x21
    573e:	9a a1       	ldd	r25, Y+34	; 0x22
    5740:	01 97       	sbiw	r24, 0x01	; 1
    5742:	9a a3       	std	Y+34, r25	; 0x22
    5744:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5746:	89 a1       	ldd	r24, Y+33	; 0x21
    5748:	9a a1       	ldd	r25, Y+34	; 0x22
    574a:	00 97       	sbiw	r24, 0x00	; 0
    574c:	69 f7       	brne	.-38     	; 0x5728 <SPICommunication+0x118a>
    574e:	16 c1       	rjmp	.+556    	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5750:	6b a1       	ldd	r22, Y+35	; 0x23
    5752:	7c a1       	ldd	r23, Y+36	; 0x24
    5754:	8d a1       	ldd	r24, Y+37	; 0x25
    5756:	9e a1       	ldd	r25, Y+38	; 0x26
    5758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    575c:	dc 01       	movw	r26, r24
    575e:	cb 01       	movw	r24, r22
    5760:	9a a3       	std	Y+34, r25	; 0x22
    5762:	89 a3       	std	Y+33, r24	; 0x21
    5764:	89 a1       	ldd	r24, Y+33	; 0x21
    5766:	9a a1       	ldd	r25, Y+34	; 0x22
    5768:	9e 8f       	std	Y+30, r25	; 0x1e
    576a:	8d 8f       	std	Y+29, r24	; 0x1d
    576c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    576e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5770:	01 97       	sbiw	r24, 0x01	; 1
    5772:	f1 f7       	brne	.-4      	; 0x5770 <SPICommunication+0x11d2>
    5774:	9e 8f       	std	Y+30, r25	; 0x1e
    5776:	8d 8f       	std	Y+29, r24	; 0x1d
    5778:	01 c1       	rjmp	.+514    	; 0x597c <SPICommunication+0x13de>
				_delay_ms(750);
			}
		break;
		case'6' :
			if(Global_LCD_VIEW == '0'){
    577a:	80 91 fd 01 	lds	r24, 0x01FD
    577e:	80 33       	cpi	r24, 0x30	; 48
    5780:	09 f0       	breq	.+2      	; 0x5784 <SPICommunication+0x11e6>
    5782:	fc c0       	rjmp	.+504    	; 0x597c <SPICommunication+0x13de>
				LCD_voidSendCommand(CLEAR);
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_voidSendCommand>
    578a:	80 e0       	ldi	r24, 0x00	; 0
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	a0 e0       	ldi	r26, 0x00	; 0
    5790:	b0 e4       	ldi	r27, 0x40	; 64
    5792:	89 8f       	std	Y+25, r24	; 0x19
    5794:	9a 8f       	std	Y+26, r25	; 0x1a
    5796:	ab 8f       	std	Y+27, r26	; 0x1b
    5798:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    579a:	69 8d       	ldd	r22, Y+25	; 0x19
    579c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    579e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	4a ef       	ldi	r20, 0xFA	; 250
    57a8:	54 e4       	ldi	r21, 0x44	; 68
    57aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	8d 8b       	std	Y+21, r24	; 0x15
    57b4:	9e 8b       	std	Y+22, r25	; 0x16
    57b6:	af 8b       	std	Y+23, r26	; 0x17
    57b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57ba:	6d 89       	ldd	r22, Y+21	; 0x15
    57bc:	7e 89       	ldd	r23, Y+22	; 0x16
    57be:	8f 89       	ldd	r24, Y+23	; 0x17
    57c0:	98 8d       	ldd	r25, Y+24	; 0x18
    57c2:	20 e0       	ldi	r18, 0x00	; 0
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	40 e8       	ldi	r20, 0x80	; 128
    57c8:	5f e3       	ldi	r21, 0x3F	; 63
    57ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ce:	88 23       	and	r24, r24
    57d0:	2c f4       	brge	.+10     	; 0x57dc <SPICommunication+0x123e>
		__ticks = 1;
    57d2:	81 e0       	ldi	r24, 0x01	; 1
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	9c 8b       	std	Y+20, r25	; 0x14
    57d8:	8b 8b       	std	Y+19, r24	; 0x13
    57da:	3f c0       	rjmp	.+126    	; 0x585a <SPICommunication+0x12bc>
	else if (__tmp > 65535)
    57dc:	6d 89       	ldd	r22, Y+21	; 0x15
    57de:	7e 89       	ldd	r23, Y+22	; 0x16
    57e0:	8f 89       	ldd	r24, Y+23	; 0x17
    57e2:	98 8d       	ldd	r25, Y+24	; 0x18
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	3f ef       	ldi	r19, 0xFF	; 255
    57e8:	4f e7       	ldi	r20, 0x7F	; 127
    57ea:	57 e4       	ldi	r21, 0x47	; 71
    57ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57f0:	18 16       	cp	r1, r24
    57f2:	4c f5       	brge	.+82     	; 0x5846 <SPICommunication+0x12a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57f4:	69 8d       	ldd	r22, Y+25	; 0x19
    57f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e2       	ldi	r20, 0x20	; 32
    5802:	51 e4       	ldi	r21, 0x41	; 65
    5804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5808:	dc 01       	movw	r26, r24
    580a:	cb 01       	movw	r24, r22
    580c:	bc 01       	movw	r22, r24
    580e:	cd 01       	movw	r24, r26
    5810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5814:	dc 01       	movw	r26, r24
    5816:	cb 01       	movw	r24, r22
    5818:	9c 8b       	std	Y+20, r25	; 0x14
    581a:	8b 8b       	std	Y+19, r24	; 0x13
    581c:	0f c0       	rjmp	.+30     	; 0x583c <SPICommunication+0x129e>
    581e:	88 ec       	ldi	r24, 0xC8	; 200
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	9a 8b       	std	Y+18, r25	; 0x12
    5824:	89 8b       	std	Y+17, r24	; 0x11
    5826:	89 89       	ldd	r24, Y+17	; 0x11
    5828:	9a 89       	ldd	r25, Y+18	; 0x12
    582a:	01 97       	sbiw	r24, 0x01	; 1
    582c:	f1 f7       	brne	.-4      	; 0x582a <SPICommunication+0x128c>
    582e:	9a 8b       	std	Y+18, r25	; 0x12
    5830:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5832:	8b 89       	ldd	r24, Y+19	; 0x13
    5834:	9c 89       	ldd	r25, Y+20	; 0x14
    5836:	01 97       	sbiw	r24, 0x01	; 1
    5838:	9c 8b       	std	Y+20, r25	; 0x14
    583a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    583c:	8b 89       	ldd	r24, Y+19	; 0x13
    583e:	9c 89       	ldd	r25, Y+20	; 0x14
    5840:	00 97       	sbiw	r24, 0x00	; 0
    5842:	69 f7       	brne	.-38     	; 0x581e <SPICommunication+0x1280>
    5844:	14 c0       	rjmp	.+40     	; 0x586e <SPICommunication+0x12d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5846:	6d 89       	ldd	r22, Y+21	; 0x15
    5848:	7e 89       	ldd	r23, Y+22	; 0x16
    584a:	8f 89       	ldd	r24, Y+23	; 0x17
    584c:	98 8d       	ldd	r25, Y+24	; 0x18
    584e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5852:	dc 01       	movw	r26, r24
    5854:	cb 01       	movw	r24, r22
    5856:	9c 8b       	std	Y+20, r25	; 0x14
    5858:	8b 8b       	std	Y+19, r24	; 0x13
    585a:	8b 89       	ldd	r24, Y+19	; 0x13
    585c:	9c 89       	ldd	r25, Y+20	; 0x14
    585e:	98 8b       	std	Y+16, r25	; 0x10
    5860:	8f 87       	std	Y+15, r24	; 0x0f
    5862:	8f 85       	ldd	r24, Y+15	; 0x0f
    5864:	98 89       	ldd	r25, Y+16	; 0x10
    5866:	01 97       	sbiw	r24, 0x01	; 1
    5868:	f1 f7       	brne	.-4      	; 0x5866 <SPICommunication+0x12c8>
    586a:	98 8b       	std	Y+16, r25	; 0x10
    586c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
				LCD_voidSetLocation(LCD_LINE1,4);
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	64 e0       	ldi	r22, 0x04	; 4
    5872:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString("SPEED LIGHT");
    5876:	85 e9       	ldi	r24, 0x95	; 149
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				LCD_voidSetLocation(LCD_LINE2,4);
    587e:	82 e0       	ldi	r24, 0x02	; 2
    5880:	64 e0       	ldi	r22, 0x04	; 4
    5882:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_voidSetLocation>
				LCD_voidSendString(" 3    on");
    5886:	81 ed       	ldi	r24, 0xD1	; 209
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    588e:	83 e0       	ldi	r24, 0x03	; 3
    5890:	67 e0       	ldi	r22, 0x07	; 7
    5892:	40 e0       	ldi	r20, 0x00	; 0
    5894:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <DIO_voidSetPinValue>
    5898:	80 e0       	ldi	r24, 0x00	; 0
    589a:	90 e8       	ldi	r25, 0x80	; 128
    589c:	ab e3       	ldi	r26, 0x3B	; 59
    589e:	b4 e4       	ldi	r27, 0x44	; 68
    58a0:	8b 87       	std	Y+11, r24	; 0x0b
    58a2:	9c 87       	std	Y+12, r25	; 0x0c
    58a4:	ad 87       	std	Y+13, r26	; 0x0d
    58a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    58aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    58ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	4a ef       	ldi	r20, 0xFA	; 250
    58b6:	54 e4       	ldi	r21, 0x44	; 68
    58b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58bc:	dc 01       	movw	r26, r24
    58be:	cb 01       	movw	r24, r22
    58c0:	8f 83       	std	Y+7, r24	; 0x07
    58c2:	98 87       	std	Y+8, r25	; 0x08
    58c4:	a9 87       	std	Y+9, r26	; 0x09
    58c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58c8:	6f 81       	ldd	r22, Y+7	; 0x07
    58ca:	78 85       	ldd	r23, Y+8	; 0x08
    58cc:	89 85       	ldd	r24, Y+9	; 0x09
    58ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    58d0:	20 e0       	ldi	r18, 0x00	; 0
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	40 e8       	ldi	r20, 0x80	; 128
    58d6:	5f e3       	ldi	r21, 0x3F	; 63
    58d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58dc:	88 23       	and	r24, r24
    58de:	2c f4       	brge	.+10     	; 0x58ea <SPICommunication+0x134c>
		__ticks = 1;
    58e0:	81 e0       	ldi	r24, 0x01	; 1
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	9e 83       	std	Y+6, r25	; 0x06
    58e6:	8d 83       	std	Y+5, r24	; 0x05
    58e8:	3f c0       	rjmp	.+126    	; 0x5968 <SPICommunication+0x13ca>
	else if (__tmp > 65535)
    58ea:	6f 81       	ldd	r22, Y+7	; 0x07
    58ec:	78 85       	ldd	r23, Y+8	; 0x08
    58ee:	89 85       	ldd	r24, Y+9	; 0x09
    58f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	3f ef       	ldi	r19, 0xFF	; 255
    58f6:	4f e7       	ldi	r20, 0x7F	; 127
    58f8:	57 e4       	ldi	r21, 0x47	; 71
    58fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58fe:	18 16       	cp	r1, r24
    5900:	4c f5       	brge	.+82     	; 0x5954 <SPICommunication+0x13b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5902:	6b 85       	ldd	r22, Y+11	; 0x0b
    5904:	7c 85       	ldd	r23, Y+12	; 0x0c
    5906:	8d 85       	ldd	r24, Y+13	; 0x0d
    5908:	9e 85       	ldd	r25, Y+14	; 0x0e
    590a:	20 e0       	ldi	r18, 0x00	; 0
    590c:	30 e0       	ldi	r19, 0x00	; 0
    590e:	40 e2       	ldi	r20, 0x20	; 32
    5910:	51 e4       	ldi	r21, 0x41	; 65
    5912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	bc 01       	movw	r22, r24
    591c:	cd 01       	movw	r24, r26
    591e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5922:	dc 01       	movw	r26, r24
    5924:	cb 01       	movw	r24, r22
    5926:	9e 83       	std	Y+6, r25	; 0x06
    5928:	8d 83       	std	Y+5, r24	; 0x05
    592a:	0f c0       	rjmp	.+30     	; 0x594a <SPICommunication+0x13ac>
    592c:	88 ec       	ldi	r24, 0xC8	; 200
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	9c 83       	std	Y+4, r25	; 0x04
    5932:	8b 83       	std	Y+3, r24	; 0x03
    5934:	8b 81       	ldd	r24, Y+3	; 0x03
    5936:	9c 81       	ldd	r25, Y+4	; 0x04
    5938:	01 97       	sbiw	r24, 0x01	; 1
    593a:	f1 f7       	brne	.-4      	; 0x5938 <SPICommunication+0x139a>
    593c:	9c 83       	std	Y+4, r25	; 0x04
    593e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5940:	8d 81       	ldd	r24, Y+5	; 0x05
    5942:	9e 81       	ldd	r25, Y+6	; 0x06
    5944:	01 97       	sbiw	r24, 0x01	; 1
    5946:	9e 83       	std	Y+6, r25	; 0x06
    5948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    594a:	8d 81       	ldd	r24, Y+5	; 0x05
    594c:	9e 81       	ldd	r25, Y+6	; 0x06
    594e:	00 97       	sbiw	r24, 0x00	; 0
    5950:	69 f7       	brne	.-38     	; 0x592c <SPICommunication+0x138e>
    5952:	14 c0       	rjmp	.+40     	; 0x597c <SPICommunication+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5954:	6f 81       	ldd	r22, Y+7	; 0x07
    5956:	78 85       	ldd	r23, Y+8	; 0x08
    5958:	89 85       	ldd	r24, Y+9	; 0x09
    595a:	9a 85       	ldd	r25, Y+10	; 0x0a
    595c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5960:	dc 01       	movw	r26, r24
    5962:	cb 01       	movw	r24, r22
    5964:	9e 83       	std	Y+6, r25	; 0x06
    5966:	8d 83       	std	Y+5, r24	; 0x05
    5968:	8d 81       	ldd	r24, Y+5	; 0x05
    596a:	9e 81       	ldd	r25, Y+6	; 0x06
    596c:	9a 83       	std	Y+2, r25	; 0x02
    596e:	89 83       	std	Y+1, r24	; 0x01
    5970:	89 81       	ldd	r24, Y+1	; 0x01
    5972:	9a 81       	ldd	r25, Y+2	; 0x02
    5974:	01 97       	sbiw	r24, 0x01	; 1
    5976:	f1 f7       	brne	.-4      	; 0x5974 <SPICommunication+0x13d6>
    5978:	9a 83       	std	Y+2, r25	; 0x02
    597a:	89 83       	std	Y+1, r24	; 0x01
			//reset manually with 'C' on keypad
		break;

		}
	}
	Local_u16Count++;
    597c:	80 91 fe 01 	lds	r24, 0x01FE
    5980:	90 91 ff 01 	lds	r25, 0x01FF
    5984:	01 96       	adiw	r24, 0x01	; 1
    5986:	90 93 ff 01 	sts	0x01FF, r25
    598a:	80 93 fe 01 	sts	0x01FE, r24
}
    598e:	c9 53       	subi	r28, 0x39	; 57
    5990:	df 4f       	sbci	r29, 0xFF	; 255
    5992:	0f b6       	in	r0, 0x3f	; 63
    5994:	f8 94       	cli
    5996:	de bf       	out	0x3e, r29	; 62
    5998:	0f be       	out	0x3f, r0	; 63
    599a:	cd bf       	out	0x3d, r28	; 61
    599c:	cf 91       	pop	r28
    599e:	df 91       	pop	r29
    59a0:	1f 91       	pop	r17
    59a2:	0f 91       	pop	r16
    59a4:	08 95       	ret

000059a6 <__udivmodsi4>:
    59a6:	a1 e2       	ldi	r26, 0x21	; 33
    59a8:	1a 2e       	mov	r1, r26
    59aa:	aa 1b       	sub	r26, r26
    59ac:	bb 1b       	sub	r27, r27
    59ae:	fd 01       	movw	r30, r26
    59b0:	0d c0       	rjmp	.+26     	; 0x59cc <__udivmodsi4_ep>

000059b2 <__udivmodsi4_loop>:
    59b2:	aa 1f       	adc	r26, r26
    59b4:	bb 1f       	adc	r27, r27
    59b6:	ee 1f       	adc	r30, r30
    59b8:	ff 1f       	adc	r31, r31
    59ba:	a2 17       	cp	r26, r18
    59bc:	b3 07       	cpc	r27, r19
    59be:	e4 07       	cpc	r30, r20
    59c0:	f5 07       	cpc	r31, r21
    59c2:	20 f0       	brcs	.+8      	; 0x59cc <__udivmodsi4_ep>
    59c4:	a2 1b       	sub	r26, r18
    59c6:	b3 0b       	sbc	r27, r19
    59c8:	e4 0b       	sbc	r30, r20
    59ca:	f5 0b       	sbc	r31, r21

000059cc <__udivmodsi4_ep>:
    59cc:	66 1f       	adc	r22, r22
    59ce:	77 1f       	adc	r23, r23
    59d0:	88 1f       	adc	r24, r24
    59d2:	99 1f       	adc	r25, r25
    59d4:	1a 94       	dec	r1
    59d6:	69 f7       	brne	.-38     	; 0x59b2 <__udivmodsi4_loop>
    59d8:	60 95       	com	r22
    59da:	70 95       	com	r23
    59dc:	80 95       	com	r24
    59de:	90 95       	com	r25
    59e0:	9b 01       	movw	r18, r22
    59e2:	ac 01       	movw	r20, r24
    59e4:	bd 01       	movw	r22, r26
    59e6:	cf 01       	movw	r24, r30
    59e8:	08 95       	ret

000059ea <__prologue_saves__>:
    59ea:	2f 92       	push	r2
    59ec:	3f 92       	push	r3
    59ee:	4f 92       	push	r4
    59f0:	5f 92       	push	r5
    59f2:	6f 92       	push	r6
    59f4:	7f 92       	push	r7
    59f6:	8f 92       	push	r8
    59f8:	9f 92       	push	r9
    59fa:	af 92       	push	r10
    59fc:	bf 92       	push	r11
    59fe:	cf 92       	push	r12
    5a00:	df 92       	push	r13
    5a02:	ef 92       	push	r14
    5a04:	ff 92       	push	r15
    5a06:	0f 93       	push	r16
    5a08:	1f 93       	push	r17
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	cd b7       	in	r28, 0x3d	; 61
    5a10:	de b7       	in	r29, 0x3e	; 62
    5a12:	ca 1b       	sub	r28, r26
    5a14:	db 0b       	sbc	r29, r27
    5a16:	0f b6       	in	r0, 0x3f	; 63
    5a18:	f8 94       	cli
    5a1a:	de bf       	out	0x3e, r29	; 62
    5a1c:	0f be       	out	0x3f, r0	; 63
    5a1e:	cd bf       	out	0x3d, r28	; 61
    5a20:	09 94       	ijmp

00005a22 <__epilogue_restores__>:
    5a22:	2a 88       	ldd	r2, Y+18	; 0x12
    5a24:	39 88       	ldd	r3, Y+17	; 0x11
    5a26:	48 88       	ldd	r4, Y+16	; 0x10
    5a28:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a30:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a32:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a34:	b9 84       	ldd	r11, Y+9	; 0x09
    5a36:	c8 84       	ldd	r12, Y+8	; 0x08
    5a38:	df 80       	ldd	r13, Y+7	; 0x07
    5a3a:	ee 80       	ldd	r14, Y+6	; 0x06
    5a3c:	fd 80       	ldd	r15, Y+5	; 0x05
    5a3e:	0c 81       	ldd	r16, Y+4	; 0x04
    5a40:	1b 81       	ldd	r17, Y+3	; 0x03
    5a42:	aa 81       	ldd	r26, Y+2	; 0x02
    5a44:	b9 81       	ldd	r27, Y+1	; 0x01
    5a46:	ce 0f       	add	r28, r30
    5a48:	d1 1d       	adc	r29, r1
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	f8 94       	cli
    5a4e:	de bf       	out	0x3e, r29	; 62
    5a50:	0f be       	out	0x3f, r0	; 63
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	ed 01       	movw	r28, r26
    5a56:	08 95       	ret

00005a58 <_exit>:
    5a58:	f8 94       	cli

00005a5a <__stop_program>:
    5a5a:	ff cf       	rjmp	.-2      	; 0x5a5a <__stop_program>
