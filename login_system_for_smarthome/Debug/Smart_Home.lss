
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003cea  00003d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800180  00800180  00003e9e  2**0
                  ALLOC
  3 .stab         00004680  00000000  00000000  00003ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000187b  00000000  00000000  00008520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00009f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a12b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000c537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ea88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_10>
      2c:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <main>
      8a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_voidEnable>:
#include "../../LIB/BIT_Math.h"
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "WDT.h"

void WDT_voidEnable(u8 Copt_u8WaitingTime){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01

	/* enable watchdog */
	SET_BIT(WDTCR, WDE);
     e04:	a1 e4       	ldi	r26, 0x41	; 65
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e4       	ldi	r30, 0x41	; 65
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24

	/* select prescaler */
	WDTCR &= 0b11111000;
     e12:	a1 e4       	ldi	r26, 0x41	; 65
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e4       	ldi	r30, 0x41	; 65
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	88 7f       	andi	r24, 0xF8	; 248
     e1e:	8c 93       	st	X, r24
	WDTCR |= Copt_u8WaitingTime;
     e20:	a1 e4       	ldi	r26, 0x41	; 65
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e4       	ldi	r30, 0x41	; 65
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	90 81       	ld	r25, Z
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	89 2b       	or	r24, r25
     e2e:	8c 93       	st	X, r24

}
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <WDT_voidDisable>:


void WDT_voidDisable(void){
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDTCR |= (1<<WDTOE) | (1<<WDE);
     e40:	a1 e4       	ldi	r26, 0x41	; 65
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e1 e4       	ldi	r30, 0x41	; 65
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 61       	ori	r24, 0x18	; 24
     e4c:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     e4e:	e1 e4       	ldi	r30, 0x41	; 65
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <UART_voidInit>:
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <UART_voidInit+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
     e66:	83 e3       	ldi	r24, 0x33	; 51
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9b 83       	std	Y+3, r25	; 0x03
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
     e72:	e9 e2       	ldi	r30, 0x29	; 41
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
     e7a:	e0 e4       	ldi	r30, 0x40	; 64
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	89 2f       	mov	r24, r25
     e84:	99 27       	eor	r25, r25
     e86:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
     e88:	ab e2       	ldi	r26, 0x2B	; 43
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e2       	ldi	r30, 0x2B	; 43
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8d 7f       	andi	r24, 0xFD	; 253
     e94:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
     e96:	ab e2       	ldi	r26, 0x2B	; 43
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e2       	ldi	r30, 0x2B	; 43
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
     ea4:	aa e2       	ldi	r26, 0x2A	; 42
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ea e2       	ldi	r30, 0x2A	; 42
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
     ec0:	aa e2       	ldi	r26, 0x2A	; 42
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8b 7f       	andi	r24, 0xFB	; 251
     ecc:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
     ef8:	e0 e4       	ldi	r30, 0x40	; 64
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	80 83       	st	Z, r24

}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	82 95       	swap	r24
     f20:	86 95       	lsr	r24
     f22:	87 70       	andi	r24, 0x07	; 7
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	81 70       	andi	r24, 0x01	; 1
     f2a:	90 70       	andi	r25, 0x00	; 0
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	a1 f3       	breq	.-24     	; 0xf18 <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
     f30:	ec e2       	ldi	r30, 0x2C	; 44
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	80 83       	st	Z, r24
}
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
     f48:	eb e2       	ldi	r30, 0x2B	; 43
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	dc f7       	brge	.-10     	; 0xf48 <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
     f52:	ec e2       	ldi	r30, 0x2C	; 44
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#else
	SET_BIT(TCCR0, WGM00);
     f66:	a3 e5       	ldi	r26, 0x53	; 83
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e5       	ldi	r30, 0x53	; 83
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	8c 93       	st	X, r24
#endif

}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
     f94:	e2 e5       	ldi	r30, 0x52	; 82
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24

}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
     fb0:	a3 e5       	ldi	r26, 0x53	; 83
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e3 e5       	ldi	r30, 0x53	; 83
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
     fbe:	a3 e5       	ldi	r26, 0x53	; 83
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e3 e5       	ldi	r30, 0x53	; 83
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	90 81       	ld	r25, Z
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	89 2b       	or	r24, r25
     fcc:	8c 93       	st	X, r24

}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	41 f4       	brne	.+16     	; 0xff8 <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
     fe8:	a9 e5       	ldi	r26, 0x59	; 89
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 e5       	ldi	r30, 0x59	; 89
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	8c 93       	st	X, r24

}
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <TIM0_voidSetCompareMat+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <TIM0_voidSetCompareMat+0x8>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	c9 f0       	breq	.+50     	; 0x1064 <TIM0_voidSetCompareMat+0x56>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	23 30       	cpi	r18, 0x03	; 3
    1038:	31 05       	cpc	r19, r1
    103a:	19 f1       	breq	.+70     	; 0x1082 <TIM0_voidSetCompareMat+0x74>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	69 f5       	brne	.+90     	; 0x10a0 <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
    1046:	a3 e5       	ldi	r26, 0x53	; 83
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e3 e5       	ldi	r30, 0x53	; 83
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 61       	ori	r24, 0x10	; 16
    1052:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1054:	a3 e5       	ldi	r26, 0x53	; 83
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e3 e5       	ldi	r30, 0x53	; 83
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 7d       	andi	r24, 0xDF	; 223
    1060:	8c 93       	st	X, r24
    1062:	2c c0       	rjmp	.+88     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 62       	ori	r24, 0x20	; 32
    1070:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7e       	andi	r24, 0xEF	; 239
    107e:	8c 93       	st	X, r24
    1080:	1d c0       	rjmp	.+58     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 62       	ori	r24, 0x20	; 32
    109c:	8c 93       	st	X, r24
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7e       	andi	r24, 0xEF	; 239
    10ac:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7d       	andi	r24, 0xDF	; 223
    10ba:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    10bc:	ec e5       	ldi	r30, 0x5C	; 92
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	80 83       	st	Z, r24

}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <TIM0_voidPWMGenerator+0xa>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <TIM0_voidPWMGenerator+0x1a>
    10ea:	44 c0       	rjmp	.+136    	; 0x1174 <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 61       	ori	r24, 0x10	; 16
    10f8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 62       	ori	r24, 0x20	; 32
    1106:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
    1108:	0c e5       	ldi	r16, 0x5C	; 92
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	aa 27       	eor	r26, r26
    1114:	97 fd       	sbrc	r25, 7
    1116:	a0 95       	com	r26
    1118:	ba 2f       	mov	r27, r26
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	48 ec       	ldi	r20, 0xC8	; 200
    1130:	52 e4       	ldi	r21, 0x42	; 66
    1132:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	53 ec       	ldi	r21, 0xC3	; 195
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	53 e4       	ldi	r21, 0x43	; 67
    115a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	f8 01       	movw	r30, r16
    1170:	80 83       	st	Z, r24
    1172:	39 c0       	rjmp	.+114    	; 0x11e6 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7e       	andi	r24, 0xEF	; 239
    118e:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    1190:	0c e5       	ldi	r16, 0x5C	; 92
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	aa 27       	eor	r26, r26
    119c:	97 fd       	sbrc	r25, 7
    119e:	a0 95       	com	r26
    11a0:	ba 2f       	mov	r27, r26
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	48 ec       	ldi	r20, 0xC8	; 200
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	80 83       	st	Z, r24
	}

#endif


}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    1200:	ec e5       	ldi	r30, 0x5C	; 92
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	80 83       	st	Z, r24

}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	41 f4       	brne	.+16     	; 0x1232 <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    1222:	a9 e5       	ldi	r26, 0x59	; 89
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e9 e5       	ldi	r30, 0x59	; 89
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    1232:	a9 e5       	ldi	r26, 0x59	; 89
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 e5       	ldi	r30, 0x59	; 89
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8d 7f       	andi	r24, 0xFD	; 253
    123e:	8c 93       	st	X, r24

}
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 7f       	andi	r24, 0xF8	; 248
    125c:	8c 93       	st	X, r24

}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TIM0_voidOvfCallback+0x6>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	90 93 83 01 	sts	0x0183, r25
    127a:	80 93 82 01 	sts	0x0182, r24
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <TIM0_voidCmpCallback+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	90 93 81 01 	sts	0x0181, r25
    129e:	80 93 80 01 	sts	0x0180, r24

}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <__vector_11>:


ISR(TIMER0_OVF_vect){
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    12d6:	e0 91 82 01 	lds	r30, 0x0182
    12da:	f0 91 83 01 	lds	r31, 0x0183
    12de:	09 95       	icall
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <__vector_10>:


ISR(TIMER0_COMP_vect){
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    1330:	e0 91 80 01 	lds	r30, 0x0180
    1334:	f0 91 81 01 	lds	r31, 0x0181
    1338:	09 95       	icall
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <SPI_voidInit>:
/*****************************************************/
#include "SPI.h"



void SPI_voidInit	(void){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPSR, SPI2X);

#elif SPI_MODE == SPI_SLAVE_MODE

	/*1- Select order ==> MSB */
	CLR_BIT(SPCR , DORD);
    1368:	ad e2       	ldi	r26, 0x2D	; 45
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ed e2       	ldi	r30, 0x2D	; 45
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	8c 93       	st	X, r24

	/*2- select Slave mode */
	CLR_BIT(SPCR, MSTR);
    1376:	ad e2       	ldi	r26, 0x2D	; 45
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	ed e2       	ldi	r30, 0x2D	; 45
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 7e       	andi	r24, 0xEF	; 239
    1382:	8c 93       	st	X, r24

	/*3- Clock Polarity & Phase ==> Rising_Falling ... Setup_Sample */
	CLR_BIT(SPCR , CPOL);
    1384:	ad e2       	ldi	r26, 0x2D	; 45
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ed e2       	ldi	r30, 0x2D	; 45
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	87 7f       	andi	r24, 0xF7	; 247
    1390:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPHA);
    1392:	ad e2       	ldi	r26, 0x2D	; 45
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ed e2       	ldi	r30, 0x2D	; 45
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	84 60       	ori	r24, 0x04	; 4
    139e:	8c 93       	st	X, r24

#endif

	/* enable SPI */
	SET_BIT(SPCR, SPE);
    13a0:	ad e2       	ldi	r26, 0x2D	; 45
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ed e2       	ldi	r30, 0x2D	; 45
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	8c 93       	st	X, r24

}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <SPI_u8ReceiveData>:


u8   SPI_u8ReceiveData		(void){
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    13bc:	ee e2       	ldi	r30, 0x2E	; 46
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	dc f7       	brge	.-10     	; 0x13bc <SPI_u8ReceiveData+0x8>

	/* Return data register */
	return SPDR;
    13c6:	ef e2       	ldi	r30, 0x2F	; 47
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z

}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <SPI_voidMasterSendData>:


void SPI_voidMasterSendData (u8 Copy_u8Data){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01

	/* Start transmission */
	SPDR = Copy_u8Data;
    13de:	ef e2       	ldi	r30, 0x2F	; 47
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    13e6:	ee e2       	ldi	r30, 0x2E	; 46
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 23       	and	r24, r24
    13ee:	dc f7       	brge	.-10     	; 0x13e6 <SPI_voidMasterSendData+0x14>

}
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <SPI_voidSalveSendData>:


void SPI_voidSalveSendData	(u8 Copy_u8Data){
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01

	SPDR = Copy_u8Data;
    1404:	ef e2       	ldi	r30, 0x2F	; 47
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	80 83       	st	Z, r24

}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <SPI_u8ReceiveTrans>:


u8   SPI_u8ReceiveTrans		(u8 Copy_u8Data){
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01

	/* send data */
	SPDR = Copy_u8Data;
    1420:	ef e2       	ldi	r30, 0x2F	; 47
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    1428:	ee e2       	ldi	r30, 0x2E	; 46
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	dc f7       	brge	.-10     	; 0x1428 <SPI_u8ReceiveTrans+0x14>

	/* Return data register */
	return SPDR;
    1432:	ef e2       	ldi	r30, 0x2F	; 47
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <INT_voidEnable>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/interrupt.h>
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTINdex, u8 Copy_u8INTSense){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	2a 97       	sbiw	r28, 0x0a	; 10
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8INTINdex) {
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3a 87       	std	Y+10, r19	; 0x0a
    1460:	29 87       	std	Y+9, r18	; 0x09
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <INT_voidEnable+0x2e>
    146c:	6d c0       	rjmp	.+218    	; 0x1548 <INT_voidEnable+0x108>
    146e:	29 85       	ldd	r18, Y+9	; 0x09
    1470:	3a 85       	ldd	r19, Y+10	; 0x0a
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <INT_voidEnable+0x3a>
    1478:	c9 c0       	rjmp	.+402    	; 0x160c <INT_voidEnable+0x1cc>
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	09 f0       	breq	.+2      	; 0x1484 <INT_voidEnable+0x44>
    1482:	e9 c0       	rjmp	.+466    	; 0x1656 <INT_voidEnable+0x216>
		case INT_INT0:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	38 87       	std	Y+8, r19	; 0x08
    148c:	2f 83       	std	Y+7, r18	; 0x07
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	21 f1       	breq	.+72     	; 0x14e0 <INT_voidEnable+0xa0>
    1498:	2f 81       	ldd	r18, Y+7	; 0x07
    149a:	38 85       	ldd	r19, Y+8	; 0x08
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	2c f4       	brge	.+10     	; 0x14ac <INT_voidEnable+0x6c>
    14a2:	8f 81       	ldd	r24, Y+7	; 0x07
    14a4:	98 85       	ldd	r25, Y+8	; 0x08
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <INT_voidEnable+0x82>
    14aa:	46 c0       	rjmp	.+140    	; 0x1538 <INT_voidEnable+0xf8>
    14ac:	2f 81       	ldd	r18, Y+7	; 0x07
    14ae:	38 85       	ldd	r19, Y+8	; 0x08
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	21 f1       	breq	.+72     	; 0x14fe <INT_voidEnable+0xbe>
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	91 05       	cpc	r25, r1
    14be:	71 f1       	breq	.+92     	; 0x151c <INT_voidEnable+0xdc>
    14c0:	3b c0       	rjmp	.+118    	; 0x1538 <INT_voidEnable+0xf8>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC00);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
    14de:	2c c0       	rjmp	.+88     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC00);
    14e0:	a5 e5       	ldi	r26, 0x55	; 85
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e5       	ldi	r30, 0x55	; 85
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    14ee:	a5 e5       	ldi	r26, 0x55	; 85
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e5       	ldi	r30, 0x55	; 85
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	8c 93       	st	X, r24
    14fc:	1d c0       	rjmp	.+58     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC01);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8d 7f       	andi	r24, 0xFD	; 253
    150a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC00);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC00);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8d 7f       	andi	r24, 0xFD	; 253
    1536:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 0 */
			SET_BIT(GICR, INT0);
    1538:	ab e5       	ldi	r26, 0x5B	; 91
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	eb e5       	ldi	r30, 0x5B	; 91
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 64       	ori	r24, 0x40	; 64
    1544:	8c 93       	st	X, r24
    1546:	87 c0       	rjmp	.+270    	; 0x1656 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3e 83       	std	Y+6, r19	; 0x06
    1550:	2d 83       	std	Y+5, r18	; 0x05
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	21 f1       	breq	.+72     	; 0x15a4 <INT_voidEnable+0x164>
    155c:	2d 81       	ldd	r18, Y+5	; 0x05
    155e:	3e 81       	ldd	r19, Y+6	; 0x06
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	2c f4       	brge	.+10     	; 0x1570 <INT_voidEnable+0x130>
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f0       	breq	.+24     	; 0x1586 <INT_voidEnable+0x146>
    156e:	46 c0       	rjmp	.+140    	; 0x15fc <INT_voidEnable+0x1bc>
    1570:	2d 81       	ldd	r18, Y+5	; 0x05
    1572:	3e 81       	ldd	r19, Y+6	; 0x06
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	21 f1       	breq	.+72     	; 0x15c2 <INT_voidEnable+0x182>
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	71 f1       	breq	.+92     	; 0x15e0 <INT_voidEnable+0x1a0>
    1584:	3b c0       	rjmp	.+118    	; 0x15fc <INT_voidEnable+0x1bc>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC10);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8b 7f       	andi	r24, 0xFB	; 251
    1592:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 60       	ori	r24, 0x08	; 8
    15a0:	8c 93       	st	X, r24
    15a2:	2c c0       	rjmp	.+88     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC10);
    15a4:	a5 e5       	ldi	r26, 0x55	; 85
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e5       	ldi	r30, 0x55	; 85
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    15b2:	a5 e5       	ldi	r26, 0x55	; 85
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e5       	ldi	r30, 0x55	; 85
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 60       	ori	r24, 0x08	; 8
    15be:	8c 93       	st	X, r24
    15c0:	1d c0       	rjmp	.+58     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC11);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC10);
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	8c 93       	st	X, r24
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC10);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    15ee:	a5 e5       	ldi	r26, 0x55	; 85
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e5       	ldi	r30, 0x55	; 85
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	87 7f       	andi	r24, 0xF7	; 247
    15fa:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 1 */
			SET_BIT(GICR, INT1);
    15fc:	ab e5       	ldi	r26, 0x5B	; 91
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e5       	ldi	r30, 0x5B	; 91
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 68       	ori	r24, 0x80	; 128
    1608:	8c 93       	st	X, r24
    160a:	25 c0       	rjmp	.+74     	; 0x1656 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			/* Select sense */
			switch (Copy_u8INTSense) {
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3c 83       	std	Y+4, r19	; 0x04
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	31 f0       	breq	.+12     	; 0x162a <INT_voidEnable+0x1ea>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	21 30       	cpi	r18, 0x01	; 1
    1624:	31 05       	cpc	r19, r1
    1626:	49 f0       	breq	.+18     	; 0x163a <INT_voidEnable+0x1fa>
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <INT_voidEnable+0x208>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCSR, ISC2);
    162a:	a4 e5       	ldi	r26, 0x54	; 84
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e4 e5       	ldi	r30, 0x54	; 84
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	8c 93       	st	X, r24
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <INT_voidEnable+0x208>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCSR, ISC2);
    163a:	a4 e5       	ldi	r26, 0x54	; 84
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e4 e5       	ldi	r30, 0x54	; 84
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 2 */
			SET_BIT(GICR, INT2);
    1648:	ab e5       	ldi	r26, 0x5B	; 91
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	eb e5       	ldi	r30, 0x5B	; 91
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 62       	ori	r24, 0x20	; 32
    1654:	8c 93       	st	X, r24
			break;
	}

}
    1656:	2a 96       	adiw	r28, 0x0a	; 10
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <INT_voidDisable>:



void INT_voidDisable(u8 Copy_u8INTINdex){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <INT_voidDisable+0x6>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8INTINdex) {
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3b 83       	std	Y+3, r19	; 0x03
    167e:	2a 83       	std	Y+2, r18	; 0x02
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	89 f0       	breq	.+34     	; 0x16ac <INT_voidDisable+0x44>
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	a1 f0       	breq	.+40     	; 0x16bc <INT_voidDisable+0x54>
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	b9 f4       	brne	.+46     	; 0x16ca <INT_voidDisable+0x62>
		case INT_INT0:
			CLR_BIT(GICR, INT0);
    169c:	ab e5       	ldi	r26, 0x5B	; 91
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	eb e5       	ldi	r30, 0x5B	; 91
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7b       	andi	r24, 0xBF	; 191
    16a8:	8c 93       	st	X, r24
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <INT_voidDisable+0x62>
			break;
		case INT_INT1:
			CLR_BIT(GICR, INT1);
    16ac:	ab e5       	ldi	r26, 0x5B	; 91
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e5       	ldi	r30, 0x5B	; 91
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	8c 93       	st	X, r24
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <INT_voidDisable+0x62>
			break;
		case INT_INT2:
			CLR_BIT(GICR, INT2);
    16bc:	ab e5       	ldi	r26, 0x5B	; 91
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e5       	ldi	r30, 0x5B	; 91
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 7d       	andi	r24, 0xDF	; 223
    16c8:	8c 93       	st	X, r24
			break;
	}

}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <ICU_voidInit>:


void (*ICU_pf) (void);


void ICU_voidInit (void){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62

	/* Select Timer1 Normal Mode */
	CLR_BIT(TCCR1A, WGM10);
    16de:	af e4       	ldi	r26, 0x4F	; 79
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8d 7f       	andi	r24, 0xFD	; 253
    16f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7e       	andi	r24, 0xEF	; 239
    1714:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	88 7f       	andi	r24, 0xF8	; 248
    1722:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    1724:	ae e4       	ldi	r26, 0x4E	; 78
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ee e4       	ldi	r30, 0x4E	; 78
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	82 60       	ori	r24, 0x02	; 2
    1730:	8c 93       	st	X, r24

	/* enable interrupt */
	SET_BIT(TIMSK, TICIE1);
    1732:	a9 e5       	ldi	r26, 0x59	; 89
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e9 e5       	ldi	r30, 0x59	; 89
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 62       	ori	r24, 0x20	; 32
    173e:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	SET_BIT(TCCR1B, ICES1);
    1740:	ae e4       	ldi	r26, 0x4E	; 78
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ee e4       	ldi	r30, 0x4E	; 78
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	8c 93       	st	X, r24

}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <ICU_voidChangeTrigger+0x6>
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8Trigger) {
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3b 83       	std	Y+3, r19	; 0x03
    176a:	2a 83       	std	Y+2, r18	; 0x02
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	31 f0       	breq	.+12     	; 0x1780 <ICU_voidChangeTrigger+0x2c>
    1774:	2a 81       	ldd	r18, Y+2	; 0x02
    1776:	3b 81       	ldd	r19, Y+3	; 0x03
    1778:	21 30       	cpi	r18, 0x01	; 1
    177a:	31 05       	cpc	r19, r1
    177c:	49 f0       	breq	.+18     	; 0x1790 <ICU_voidChangeTrigger+0x3c>
    177e:	0f c0       	rjmp	.+30     	; 0x179e <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1);	break;
    1780:	ae e4       	ldi	r26, 0x4E	; 78
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ee e4       	ldi	r30, 0x4E	; 78
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 7b       	andi	r24, 0xBF	; 191
    178c:	8c 93       	st	X, r24
    178e:	07 c0       	rjmp	.+14     	; 0x179e <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  SET_BIT(TCCR1B, ICES1);	break;
    1790:	ae e4       	ldi	r26, 0x4E	; 78
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee e4       	ldi	r30, 0x4E	; 78
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 64       	ori	r24, 0x40	; 64
    179c:	8c 93       	st	X, r24
	}

}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(void (*Copy_pf) (void)){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <ICU_voidSetCallback+0x6>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01

	ICU_pf = Copy_pf;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	90 93 85 01 	sts	0x0185, r25
    17c0:	80 93 84 01 	sts	0x0184, r24

}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    17d6:	e6 e4       	ldi	r30, 0x46	; 70
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62

	/* disable interrupt */
	CLR_BIT(TIMSK, TICIE1);
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 7d       	andi	r24, 0xDF	; 223
    17f8:	8c 93       	st	X, r24

}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62

	ICU_pf();
    182a:	e0 91 84 01 	lds	r30, 0x0184
    182e:	f0 91 85 01 	lds	r31, 0x0185
    1832:	09 95       	icall

}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <TWI_voidMasterInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/io.h>
#include "I2C.h"

void TWI_voidMasterInit			(void){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62

	/* Set prescaler value ==> 1 */
	CLR_BIT(TWSR, TWPS0);
    1862:	a1 e2       	ldi	r26, 0x21	; 33
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e2       	ldi	r30, 0x21	; 33
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8e 7f       	andi	r24, 0xFE	; 254
    186e:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWPS1);
    1870:	a1 e2       	ldi	r26, 0x21	; 33
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e1 e2       	ldi	r30, 0x21	; 33
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	8c 93       	st	X, r24

	/* frequency ==> 200 KHZ  >>> from the equation ==> 12 */
	TWBR = 12;
    187e:	e0 e2       	ldi	r30, 0x20	; 32
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8c e0       	ldi	r24, 0x0C	; 12
    1884:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    1886:	a6 e5       	ldi	r26, 0x56	; 86
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e6 e5       	ldi	r30, 0x56	; 86
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1894:	a6 e5       	ldi	r26, 0x56	; 86
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e6 e5       	ldi	r30, 0x56	; 86
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	8c 93       	st	X, r24

}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <TWI_voidSlaveInit>:


void TWI_voidSlaveInit			(u8 Copy_u8Address){
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01

	/* set slave address >> Reg address */
	TWAR = Copy_u8Address<<1;
    18b4:	e2 e2       	ldi	r30, 0x22	; 34
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 0f       	add	r24, r24
    18bc:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    18be:	a6 e5       	ldi	r26, 0x56	; 86
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e6 e5       	ldi	r30, 0x56	; 86
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	80 64       	ori	r24, 0x40	; 64
    18ca:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    18cc:	a6 e5       	ldi	r26, 0x56	; 86
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e6 e5       	ldi	r30, 0x56	; 86
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	84 60       	ori	r24, 0x04	; 4
    18d8:	8c 93       	st	X, r24

}
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <TWI_voidStartCondition>:


void TWI_voidStartCondition		(void){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    18ea:	e6 e5       	ldi	r30, 0x56	; 86
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	84 ea       	ldi	r24, 0xA4	; 164
    18f0:	80 83       	st	Z, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    18f2:	e6 e5       	ldi	r30, 0x56	; 86
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	88 23       	and	r24, r24
    18fa:	dc f7       	brge	.-10     	; 0x18f2 <TWI_voidStartCondition+0x10>

}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <TWI_voidStopCondition>:


void TWI_voidStopCondition		(void){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	SET_BIT(TWCR, TWSTO);
    190a:	a6 e5       	ldi	r26, 0x56	; 86
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e6 e5       	ldi	r30, 0x56	; 86
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 61       	ori	r24, 0x10	; 16
    1916:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);
    1918:	a6 e5       	ldi	r26, 0x56	; 86
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e6 e5       	ldi	r30, 0x56	; 86
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 68       	ori	r24, 0x80	; 128
    1924:	8c 93       	st	X, r24
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <TWI_voidSlaveAddressWrite>:


void TWI_voidSlaveAddressWrite	(u8 Copy_u8SlaveAddress){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1938:	e3 e2       	ldi	r30, 0x23	; 35
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	88 0f       	add	r24, r24
    1940:	80 83       	st	Z, r24
	CLR_BIT(TWDR, 0);
    1942:	a3 e2       	ldi	r26, 0x23	; 35
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e3 e2       	ldi	r30, 0x23	; 35
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8e 7f       	andi	r24, 0xFE	; 254
    194e:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1950:	a6 e5       	ldi	r26, 0x56	; 86
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e6 e5       	ldi	r30, 0x56	; 86
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    195e:	a6 e5       	ldi	r26, 0x56	; 86
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e6 e5       	ldi	r30, 0x56	; 86
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 68       	ori	r24, 0x80	; 128
    196a:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    196c:	e6 e5       	ldi	r30, 0x56	; 86
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	88 23       	and	r24, r24
    1974:	dc f7       	brge	.-10     	; 0x196c <TWI_voidSlaveAddressWrite+0x40>

}
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <TWI_voidSlaveAddressRead>:


void TWI_voidSlaveAddressRead	(u8 Copy_u8SlaveAddress){
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    198a:	e3 e2       	ldi	r30, 0x23	; 35
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	88 0f       	add	r24, r24
    1992:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0);
    1994:	a3 e2       	ldi	r26, 0x23	; 35
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e3 e2       	ldi	r30, 0x23	; 35
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7d       	andi	r24, 0xDF	; 223
    19ae:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	dc f7       	brge	.-10     	; 0x19be <TWI_voidSlaveAddressRead+0x40>


}
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <TWI_voidMasterSendData>:


void TWI_voidMasterSendData 	(u8 Copy_u8Data){
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8Data;
    19dc:	e3 e2       	ldi	r30, 0x23	; 35
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	80 83       	st	Z, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    19e4:	a6 e5       	ldi	r26, 0x56	; 86
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e6 e5       	ldi	r30, 0x56	; 86
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 68       	ori	r24, 0x80	; 128
    19f0:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    19f2:	e6 e5       	ldi	r30, 0x56	; 86
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	88 23       	and	r24, r24
    19fa:	dc f7       	brge	.-10     	; 0x19f2 <TWI_voidMasterSendData+0x22>

}
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <TWI_u8MasterReceiveData>:


u8	 TWI_u8MasterReceiveData	(void){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a0c:	a6 e5       	ldi	r26, 0x56	; 86
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e6 e5       	ldi	r30, 0x56	; 86
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a1a:	e6 e5       	ldi	r30, 0x56	; 86
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 23       	and	r24, r24
    1a22:	dc f7       	brge	.-10     	; 0x1a1a <TWI_u8MasterReceiveData+0x16>

	return TWDR;
    1a24:	e3 e2       	ldi	r30, 0x23	; 35
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z

}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TWI_u8SlaveReceiveData>:


u8	 TWI_u8SlaveReceiveData		(void){
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62

	while((TWSR & 0xF8) != 0x60);
    1a38:	e1 e2       	ldi	r30, 0x21	; 33
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 7f       	andi	r24, 0xF8	; 248
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	80 36       	cpi	r24, 0x60	; 96
    1a48:	91 05       	cpc	r25, r1
    1a4a:	b1 f7       	brne	.-20     	; 0x1a38 <TWI_u8SlaveReceiveData+0x8>

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a4c:	a6 e5       	ldi	r26, 0x56	; 86
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e6 e5       	ldi	r30, 0x56	; 86
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a5a:	e6 e5       	ldi	r30, 0x56	; 86
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 23       	and	r24, r24
    1a62:	dc f7       	brge	.-10     	; 0x1a5a <TWI_u8SlaveReceiveData+0x2a>

	return TWDR;
    1a64:	e3 e2       	ldi	r30, 0x23	; 35
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z

}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <DIO_voidSetPortDirection>:
#include "../../LIB/STD_types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <DIO_voidSetPortDirection+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <DIO_voidSetPortDirection+0x8>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <DIO_voidSetPortDirection+0x58>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <DIO_voidSetPortDirection+0x38>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <DIO_voidSetPortDirection+0x4e>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <DIO_voidSetPortDirection+0x62>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <DIO_voidSetPortDirection+0x6c>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTA:		DDRA = Copy_u8Direction;	break;
    1abe:	ea e3       	ldi	r30, 0x3A	; 58
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:		DDRB = Copy_u8Direction;	break;
    1ac8:	e7 e3       	ldi	r30, 0x37	; 55
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:		DDRC = Copy_u8Direction;	break;
    1ad2:	e4 e3       	ldi	r30, 0x34	; 52
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:		DDRD = Copy_u8Direction;	break;
    1adc:	e1 e3       	ldi	r30, 0x31	; 49
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
	}

}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value){
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_voidSetPortValue+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_voidSetPortValue+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3c 83       	std	Y+4, r19	; 0x04
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <DIO_voidSetPortValue+0x58>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <DIO_voidSetPortValue+0x38>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <DIO_voidSetPortValue+0x4e>
    1b28:	1e c0       	rjmp	.+60     	; 0x1b66 <DIO_voidSetPortValue+0x74>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <DIO_voidSetPortValue+0x62>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <DIO_voidSetPortValue+0x6c>
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	27 97       	sbiw	r28, 0x07	; 7
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	6a 83       	std	Y+2, r22	; 0x02
    1b8c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_OUTPUT){
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <DIO_voidSetPinDirection+0x22>
    1b94:	6f c0       	rjmp	.+222    	; 0x1c74 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8Port){
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3f 83       	std	Y+7, r19	; 0x07
    1b9e:	2e 83       	std	Y+6, r18	; 0x06
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	49 f1       	breq	.+82     	; 0x1bfc <DIO_voidSetPinDirection+0x88>
    1baa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bac:	3f 81       	ldd	r19, Y+7	; 0x07
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <DIO_voidSetPinDirection+0x4a>
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_voidSetPinDirection+0x60>
    1bbc:	ce c0       	rjmp	.+412    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
    1bbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	71 f1       	breq	.+92     	; 0x1c24 <DIO_voidSetPinDirection+0xb0>
    1bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bca:	9f 81       	ldd	r25, Y+7	; 0x07
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	e9 f1       	breq	.+122    	; 0x1c4c <DIO_voidSetPinDirection+0xd8>
    1bd2:	c3 c0       	rjmp	.+390    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		SET_BIT(DDRA,Copy_u8Pin);		break;
    1bd4:	aa e3       	ldi	r26, 0x3A	; 58
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ea e3       	ldi	r30, 0x3A	; 58
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_voidSetPinDirection+0x7e>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_voidSetPinDirection+0x7a>
    1bf6:	84 2b       	or	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	af c0       	rjmp	.+350    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		SET_BIT(DDRB,Copy_u8Pin);		break;
    1bfc:	a7 e3       	ldi	r26, 0x37	; 55
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e7 e3       	ldi	r30, 0x37	; 55
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_voidSetPinDirection+0xa6>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_voidSetPinDirection+0xa2>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	9b c0       	rjmp	.+310    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		SET_BIT(DDRC,Copy_u8Pin);		break;
    1c24:	a4 e3       	ldi	r26, 0x34	; 52
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_voidSetPinDirection+0xce>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_voidSetPinDirection+0xca>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	87 c0       	rjmp	.+270    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		SET_BIT(DDRD,Copy_u8Pin);		break;
    1c4c:	a1 e3       	ldi	r26, 0x31	; 49
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_voidSetPinDirection+0xf6>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_voidSetPinDirection+0xf2>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	73 c0       	rjmp	.+230    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	59 f1       	breq	.+86     	; 0x1cde <DIO_voidSetPinDirection+0x16a>
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <DIO_voidSetPinDirection+0x128>
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	9d 81       	ldd	r25, Y+5	; 0x05
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <DIO_voidSetPinDirection+0x140>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
    1c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	89 f1       	breq	.+98     	; 0x1d08 <DIO_voidSetPinDirection+0x194>
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_voidSetPinDirection+0x13e>
    1cb0:	40 c0       	rjmp	.+128    	; 0x1d32 <DIO_voidSetPinDirection+0x1be>
    1cb2:	53 c0       	rjmp	.+166    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		CLR_BIT(DDRA,Copy_u8Pin);		break;
    1cb4:	aa e3       	ldi	r26, 0x3A	; 58
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ea e3       	ldi	r30, 0x3A	; 58
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_voidSetPinDirection+0x15e>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_voidSetPinDirection+0x15a>
    1cd6:	80 95       	com	r24
    1cd8:	84 23       	and	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	3e c0       	rjmp	.+124    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		CLR_BIT(DDRB,Copy_u8Pin);		break;
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_voidSetPinDirection+0x188>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_voidSetPinDirection+0x184>
    1d00:	80 95       	com	r24
    1d02:	84 23       	and	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	29 c0       	rjmp	.+82     	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		CLR_BIT(DDRC,Copy_u8Pin);		break;
    1d08:	a4 e3       	ldi	r26, 0x34	; 52
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e4 e3       	ldi	r30, 0x34	; 52
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_voidSetPinDirection+0x1b2>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_voidSetPinDirection+0x1ae>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		CLR_BIT(DDRD,Copy_u8Pin);		break;
    1d32:	a1 e3       	ldi	r26, 0x31	; 49
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e1 e3       	ldi	r30, 0x31	; 49
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_voidSetPinDirection+0x1dc>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_voidSetPinDirection+0x1d8>
    1d54:	80 95       	com	r24
    1d56:	84 23       	and	r24, r20
    1d58:	8c 93       	st	X, r24
		}
	}
}
    1d5a:	27 96       	adiw	r28, 0x07	; 7
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	27 97       	sbiw	r28, 0x07	; 7
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	6a 83       	std	Y+2, r22	; 0x02
    1d84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH){
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <DIO_voidSetPinValue+0x22>
    1d8c:	6f c0       	rjmp	.+222    	; 0x1e6c <DIO_voidSetPinValue+0x100>
		switch(Copy_u8Port){
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3f 83       	std	Y+7, r19	; 0x07
    1d96:	2e 83       	std	Y+6, r18	; 0x06
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 05       	cpc	r25, r1
    1da0:	49 f1       	breq	.+82     	; 0x1df4 <DIO_voidSetPinValue+0x88>
    1da2:	2e 81       	ldd	r18, Y+6	; 0x06
    1da4:	3f 81       	ldd	r19, Y+7	; 0x07
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <DIO_voidSetPinValue+0x4a>
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	9f 81       	ldd	r25, Y+7	; 0x07
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <DIO_voidSetPinValue+0x60>
    1db4:	ce c0       	rjmp	.+412    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
    1db6:	2e 81       	ldd	r18, Y+6	; 0x06
    1db8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	71 f1       	breq	.+92     	; 0x1e1c <DIO_voidSetPinValue+0xb0>
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	e9 f1       	breq	.+122    	; 0x1e44 <DIO_voidSetPinValue+0xd8>
    1dca:	c3 c0       	rjmp	.+390    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		SET_BIT(PORTA,Copy_u8Pin);		break;
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_voidSetPinValue+0x7e>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_voidSetPinValue+0x7a>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	af c0       	rjmp	.+350    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		SET_BIT(PORTB,Copy_u8Pin);		break;
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_voidSetPinValue+0xa6>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_voidSetPinValue+0xa2>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	9b c0       	rjmp	.+310    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		SET_BIT(PORTC,Copy_u8Pin);		break;
    1e1c:	a5 e3       	ldi	r26, 0x35	; 53
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e3       	ldi	r30, 0x35	; 53
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_voidSetPinValue+0xce>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_voidSetPinValue+0xca>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	87 c0       	rjmp	.+270    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		SET_BIT(PORTD,Copy_u8Pin);		break;
    1e44:	a2 e3       	ldi	r26, 0x32	; 50
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e2 e3       	ldi	r30, 0x32	; 50
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_voidSetPinValue+0xf6>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_voidSetPinValue+0xf2>
    1e66:	84 2b       	or	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	73 c0       	rjmp	.+230    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3d 83       	std	Y+5, r19	; 0x05
    1e74:	2c 83       	std	Y+4, r18	; 0x04
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	59 f1       	breq	.+86     	; 0x1ed6 <DIO_voidSetPinValue+0x16a>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <DIO_voidSetPinValue+0x128>
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f0       	breq	.+26     	; 0x1eac <DIO_voidSetPinValue+0x140>
    1e92:	5f c0       	rjmp	.+190    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	89 f1       	breq	.+98     	; 0x1f00 <DIO_voidSetPinValue+0x194>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <DIO_voidSetPinValue+0x13e>
    1ea8:	40 c0       	rjmp	.+128    	; 0x1f2a <DIO_voidSetPinValue+0x1be>
    1eaa:	53 c0       	rjmp	.+166    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		CLR_BIT(PORTA,Copy_u8Pin);		break;
    1eac:	ab e3       	ldi	r26, 0x3B	; 59
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e3       	ldi	r30, 0x3B	; 59
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_voidSetPinValue+0x15e>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_voidSetPinValue+0x15a>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	3e c0       	rjmp	.+124    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		CLR_BIT(PORTB,Copy_u8Pin);		break;
    1ed6:	a8 e3       	ldi	r26, 0x38	; 56
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_voidSetPinValue+0x188>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_voidSetPinValue+0x184>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	29 c0       	rjmp	.+82     	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		CLR_BIT(PORTC,Copy_u8Pin);		break;
    1f00:	a5 e3       	ldi	r26, 0x35	; 53
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e3       	ldi	r30, 0x35	; 53
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_voidSetPinValue+0x1b2>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_voidSetPinValue+0x1ae>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		CLR_BIT(PORTD,Copy_u8Pin);		break;
    1f2a:	a2 e3       	ldi	r26, 0x32	; 50
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e2 e3       	ldi	r30, 0x32	; 50
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <DIO_voidSetPinValue+0x1dc>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <DIO_voidSetPinValue+0x1d8>
    1f4c:	80 95       	com	r24
    1f4e:	84 23       	and	r24, r20
    1f50:	8c 93       	st	X, r24
		}
	}
}
    1f52:	27 96       	adiw	r28, 0x07	; 7
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue       (u8 Copy_u8Port, u8 Copy_u8Pin){
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <DIO_u8GetPinValue+0x6>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <DIO_u8GetPinValue+0x8>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	8a 83       	std	Y+2, r24	; 0x02
    1f74:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
		switch(Copy_u8Port){
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3d 83       	std	Y+5, r19	; 0x05
    1f7e:	2c 83       	std	Y+4, r18	; 0x04
    1f80:	4c 81       	ldd	r20, Y+4	; 0x04
    1f82:	5d 81       	ldd	r21, Y+5	; 0x05
    1f84:	41 30       	cpi	r20, 0x01	; 1
    1f86:	51 05       	cpc	r21, r1
    1f88:	41 f1       	breq	.+80     	; 0x1fda <DIO_u8GetPinValue+0x76>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <DIO_u8GetPinValue+0x3c>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	61 f0       	breq	.+24     	; 0x1fb6 <DIO_u8GetPinValue+0x52>
    1f9e:	52 c0       	rjmp	.+164    	; 0x2044 <DIO_u8GetPinValue+0xe0>
    1fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa4:	42 30       	cpi	r20, 0x02	; 2
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	51 f1       	breq	.+84     	; 0x1ffe <DIO_u8GetPinValue+0x9a>
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	b9 f1       	breq	.+110    	; 0x2022 <DIO_u8GetPinValue+0xbe>
    1fb4:	47 c0       	rjmp	.+142    	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTA:		value = GET_BIT(PINA,Copy_u8Pin);		break;
    1fb6:	e9 e3       	ldi	r30, 0x39	; 57
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_u8GetPinValue+0x6a>
    1fca:	55 95       	asr	r21
    1fcc:	47 95       	ror	r20
    1fce:	8a 95       	dec	r24
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_u8GetPinValue+0x66>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	35 c0       	rjmp	.+106    	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB:		value = GET_BIT(PINB,Copy_u8Pin);		break;
    1fda:	e6 e3       	ldi	r30, 0x36	; 54
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a9 01       	movw	r20, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <DIO_u8GetPinValue+0x8e>
    1fee:	55 95       	asr	r21
    1ff0:	47 95       	ror	r20
    1ff2:	8a 95       	dec	r24
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <DIO_u8GetPinValue+0x8a>
    1ff6:	ca 01       	movw	r24, r20
    1ff8:	81 70       	andi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	23 c0       	rjmp	.+70     	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC:		value = GET_BIT(PINC,Copy_u8Pin);		break;
    1ffe:	e3 e3       	ldi	r30, 0x33	; 51
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a9 01       	movw	r20, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_u8GetPinValue+0xb2>
    2012:	55 95       	asr	r21
    2014:	47 95       	ror	r20
    2016:	8a 95       	dec	r24
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_u8GetPinValue+0xae>
    201a:	ca 01       	movw	r24, r20
    201c:	81 70       	andi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	11 c0       	rjmp	.+34     	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD:		value = GET_BIT(PIND,Copy_u8Pin);		break;
    2022:	e0 e3       	ldi	r30, 0x30	; 48
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_u8GetPinValue+0xd6>
    2036:	55 95       	asr	r21
    2038:	47 95       	ror	r20
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_u8GetPinValue+0xd2>
    203e:	ca 01       	movw	r24, r20
    2040:	81 70       	andi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01
		}
	return value;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <ADC_voidInit>:
#define ADC_AREF		1
#define ADC_2_56_V		2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	89 83       	std	Y+1, r24	; 0x01

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
    2062:	a6 e2       	ldi	r26, 0x26	; 38
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e6 e2       	ldi	r30, 0x26	; 38
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	8c 93       	st	X, r24

	/* Select Vref */
#if ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
    2070:	a7 e2       	ldi	r26, 0x27	; 39
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e7 e2       	ldi	r30, 0x27	; 39
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	80 64       	ori	r24, 0x40	; 64
    207c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    207e:	a7 e2       	ldi	r26, 0x27	; 39
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e7 e2       	ldi	r30, 0x27	; 39
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#endif

	/* select right adjust */
	CLR_BIT(ADMUX, ADLAR);
    208c:	a7 e2       	ldi	r26, 0x27	; 39
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e7 e2       	ldi	r30, 0x27	; 39
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 7d       	andi	r24, 0xDF	; 223
    2098:	8c 93       	st	X, r24

	/* prescaler */
	ADCSRA &= 0b11111000;
    209a:	a6 e2       	ldi	r26, 0x26	; 38
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e6 e2       	ldi	r30, 0x26	; 38
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 7f       	andi	r24, 0xF8	; 248
    20a6:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler; // 0b00000110
    20a8:	a6 e2       	ldi	r26, 0x26	; 38
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e2       	ldi	r30, 0x26	; 38
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	90 81       	ld	r25, Z
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	89 2b       	or	r24, r25
    20b6:	8c 93       	st	X, r24

}
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <ADC_u16GetDigitalValue>:


u16  ADC_u16GetDigitalValue(u8 Copy_u8Channel){
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	89 83       	std	Y+1, r24	; 0x01

	/* select Channel */
	ADMUX &= 0b11100000;
    20cc:	a7 e2       	ldi	r26, 0x27	; 39
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e7 e2       	ldi	r30, 0x27	; 39
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 7e       	andi	r24, 0xE0	; 224
    20d8:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    20da:	a7 e2       	ldi	r26, 0x27	; 39
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e7 e2       	ldi	r30, 0x27	; 39
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	90 81       	ld	r25, Z
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	89 2b       	or	r24, r25
    20e8:	8c 93       	st	X, r24

	/*  Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    20ea:	a6 e2       	ldi	r26, 0x26	; 38
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e6 e2       	ldi	r30, 0x26	; 38
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24

	/* wait flag = 1 */
	while(GET_BIT(ADCSRA, ADIF) == 0);
    20f8:	e6 e2       	ldi	r30, 0x26	; 38
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	82 95       	swap	r24
    2100:	8f 70       	andi	r24, 0x0F	; 15
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	a9 f3       	breq	.-22     	; 0x20f8 <ADC_u16GetDigitalValue+0x38>

	/* clear flag */
	CLR_BIT(ADCSRA, ADIF);
    210e:	a6 e2       	ldi	r26, 0x26	; 38
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e6 e2       	ldi	r30, 0x26	; 38
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8f 7e       	andi	r24, 0xEF	; 239
    211a:	8c 93       	st	X, r24

	/* read ADC value */
	return ADC;
    211c:	e4 e2       	ldi	r30, 0x24	; 36
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01

}
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <ADC_voidDisable>:


void ADC_voidDisable(void){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62

	/* Disable ADC */
	CLR_BIT(ADCSRA, ADEN);
    2134:	a6 e2       	ldi	r26, 0x26	; 38
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e6 e2       	ldi	r30, 0x26	; 38
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 77       	andi	r24, 0x7F	; 127
    2140:	8c 93       	st	X, r24

}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <STP_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "STPMR.h"


void STP_voidInit(void){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT, STP_COIL_BLUE,   DIO_OUTPUT);
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_PINK,   DIO_OUTPUT);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_YELLOW, DIO_OUTPUT);
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_ORANGE, DIO_OUTPUT);
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	63 e0       	ldi	r22, 0x03	; 3
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>

}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <STP_voidRotateCW>:


void STP_voidRotateCW(void){
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	e8 97       	sbiw	r28, 0x38	; 56
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	61 e0       	ldi	r22, 0x01	; 1
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	62 e0       	ldi	r22, 0x02	; 2
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	63 e0       	ldi	r22, 0x03	; 3
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	aa e7       	ldi	r26, 0x7A	; 122
    21c0:	b4 e4       	ldi	r27, 0x44	; 68
    21c2:	8d ab       	std	Y+53, r24	; 0x35
    21c4:	9e ab       	std	Y+54, r25	; 0x36
    21c6:	af ab       	std	Y+55, r26	; 0x37
    21c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6d a9       	ldd	r22, Y+53	; 0x35
    21cc:	7e a9       	ldd	r23, Y+54	; 0x36
    21ce:	8f a9       	ldd	r24, Y+55	; 0x37
    21d0:	98 ad       	ldd	r25, Y+56	; 0x38
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a ef       	ldi	r20, 0xFA	; 250
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	89 ab       	std	Y+49, r24	; 0x31
    21e4:	9a ab       	std	Y+50, r25	; 0x32
    21e6:	ab ab       	std	Y+51, r26	; 0x33
    21e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <STP_voidRotateCW+0x8e>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	98 ab       	std	Y+48, r25	; 0x30
    2208:	8f a7       	std	Y+47, r24	; 0x2f
    220a:	3f c0       	rjmp	.+126    	; 0x228a <STP_voidRotateCW+0x10c>
	else if (__tmp > 65535)
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <STP_voidRotateCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6d a9       	ldd	r22, Y+53	; 0x35
    2226:	7e a9       	ldd	r23, Y+54	; 0x36
    2228:	8f a9       	ldd	r24, Y+55	; 0x37
    222a:	98 ad       	ldd	r25, Y+56	; 0x38
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
    224c:	0f c0       	rjmp	.+30     	; 0x226c <STP_voidRotateCW+0xee>
    224e:	88 ec       	ldi	r24, 0xC8	; 200
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9e a7       	std	Y+46, r25	; 0x2e
    2254:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2256:	8d a5       	ldd	r24, Y+45	; 0x2d
    2258:	9e a5       	ldd	r25, Y+46	; 0x2e
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <STP_voidRotateCW+0xdc>
    225e:	9e a7       	std	Y+46, r25	; 0x2e
    2260:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8f a5       	ldd	r24, Y+47	; 0x2f
    2264:	98 a9       	ldd	r25, Y+48	; 0x30
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <STP_voidRotateCW+0xd0>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <STP_voidRotateCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	69 a9       	ldd	r22, Y+49	; 0x31
    2278:	7a a9       	ldd	r23, Y+50	; 0x32
    227a:	8b a9       	ldd	r24, Y+51	; 0x33
    227c:	9c a9       	ldd	r25, Y+52	; 0x34
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	98 ab       	std	Y+48, r25	; 0x30
    2288:	8f a7       	std	Y+47, r24	; 0x2f
    228a:	8f a5       	ldd	r24, Y+47	; 0x2f
    228c:	98 a9       	ldd	r25, Y+48	; 0x30
    228e:	9c a7       	std	Y+44, r25	; 0x2c
    2290:	8b a7       	std	Y+43, r24	; 0x2b
    2292:	8b a5       	ldd	r24, Y+43	; 0x2b
    2294:	9c a5       	ldd	r25, Y+44	; 0x2c
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <STP_voidRotateCW+0x118>
    229a:	9c a7       	std	Y+44, r25	; 0x2c
    229c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	63 e0       	ldi	r22, 0x03	; 3
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	aa e7       	ldi	r26, 0x7A	; 122
    22cc:	b4 e4       	ldi	r27, 0x44	; 68
    22ce:	8f a3       	std	Y+39, r24	; 0x27
    22d0:	98 a7       	std	Y+40, r25	; 0x28
    22d2:	a9 a7       	std	Y+41, r26	; 0x29
    22d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	6f a1       	ldd	r22, Y+39	; 0x27
    22d8:	78 a5       	ldd	r23, Y+40	; 0x28
    22da:	89 a5       	ldd	r24, Y+41	; 0x29
    22dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a ef       	ldi	r20, 0xFA	; 250
    22e4:	54 e4       	ldi	r21, 0x44	; 68
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8b a3       	std	Y+35, r24	; 0x23
    22f0:	9c a3       	std	Y+36, r25	; 0x24
    22f2:	ad a3       	std	Y+37, r26	; 0x25
    22f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f6:	6b a1       	ldd	r22, Y+35	; 0x23
    22f8:	7c a1       	ldd	r23, Y+36	; 0x24
    22fa:	8d a1       	ldd	r24, Y+37	; 0x25
    22fc:	9e a1       	ldd	r25, Y+38	; 0x26
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <STP_voidRotateCW+0x19a>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9a a3       	std	Y+34, r25	; 0x22
    2314:	89 a3       	std	Y+33, r24	; 0x21
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <STP_voidRotateCW+0x218>
	else if (__tmp > 65535)
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <STP_voidRotateCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	6f a1       	ldd	r22, Y+39	; 0x27
    2332:	78 a5       	ldd	r23, Y+40	; 0x28
    2334:	89 a5       	ldd	r24, Y+41	; 0x29
    2336:	9a a5       	ldd	r25, Y+42	; 0x2a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <STP_voidRotateCW+0x1fa>
    235a:	88 ec       	ldi	r24, 0xC8	; 200
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	98 a3       	std	Y+32, r25	; 0x20
    2360:	8f 8f       	std	Y+31, r24	; 0x1f
    2362:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2364:	98 a1       	ldd	r25, Y+32	; 0x20
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <STP_voidRotateCW+0x1e8>
    236a:	98 a3       	std	Y+32, r25	; 0x20
    236c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9a a3       	std	Y+34, r25	; 0x22
    2376:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <STP_voidRotateCW+0x1dc>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <STP_voidRotateCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6b a1       	ldd	r22, Y+35	; 0x23
    2384:	7c a1       	ldd	r23, Y+36	; 0x24
    2386:	8d a1       	ldd	r24, Y+37	; 0x25
    2388:	9e a1       	ldd	r25, Y+38	; 0x26
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9a a3       	std	Y+34, r25	; 0x22
    2394:	89 a3       	std	Y+33, r24	; 0x21
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	9e 8f       	std	Y+30, r25	; 0x1e
    239c:	8d 8f       	std	Y+29, r24	; 0x1d
    239e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <STP_voidRotateCW+0x224>
    23a6:	9e 8f       	std	Y+30, r25	; 0x1e
    23a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	62 e0       	ldi	r22, 0x02	; 2
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	63 e0       	ldi	r22, 0x03	; 3
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	aa e7       	ldi	r26, 0x7A	; 122
    23d8:	b4 e4       	ldi	r27, 0x44	; 68
    23da:	89 8f       	std	Y+25, r24	; 0x19
    23dc:	9a 8f       	std	Y+26, r25	; 0x1a
    23de:	ab 8f       	std	Y+27, r26	; 0x1b
    23e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	69 8d       	ldd	r22, Y+25	; 0x19
    23e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a ef       	ldi	r20, 0xFA	; 250
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8d 8b       	std	Y+21, r24	; 0x15
    23fc:	9e 8b       	std	Y+22, r25	; 0x16
    23fe:	af 8b       	std	Y+23, r26	; 0x17
    2400:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <STP_voidRotateCW+0x2a6>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <STP_voidRotateCW+0x324>
	else if (__tmp > 65535)
    2424:	6d 89       	ldd	r22, Y+21	; 0x15
    2426:	7e 89       	ldd	r23, Y+22	; 0x16
    2428:	8f 89       	ldd	r24, Y+23	; 0x17
    242a:	98 8d       	ldd	r25, Y+24	; 0x18
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <STP_voidRotateCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	69 8d       	ldd	r22, Y+25	; 0x19
    243e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9c 8b       	std	Y+20, r25	; 0x14
    2462:	8b 8b       	std	Y+19, r24	; 0x13
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <STP_voidRotateCW+0x306>
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9a 8b       	std	Y+18, r25	; 0x12
    246c:	89 8b       	std	Y+17, r24	; 0x11
    246e:	89 89       	ldd	r24, Y+17	; 0x11
    2470:	9a 89       	ldd	r25, Y+18	; 0x12
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <STP_voidRotateCW+0x2f4>
    2476:	9a 8b       	std	Y+18, r25	; 0x12
    2478:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	8b 89       	ldd	r24, Y+19	; 0x13
    247c:	9c 89       	ldd	r25, Y+20	; 0x14
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	8b 89       	ldd	r24, Y+19	; 0x13
    2486:	9c 89       	ldd	r25, Y+20	; 0x14
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <STP_voidRotateCW+0x2e8>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <STP_voidRotateCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9c 8b       	std	Y+20, r25	; 0x14
    24a0:	8b 8b       	std	Y+19, r24	; 0x13
    24a2:	8b 89       	ldd	r24, Y+19	; 0x13
    24a4:	9c 89       	ldd	r25, Y+20	; 0x14
    24a6:	98 8b       	std	Y+16, r25	; 0x10
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
    24aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ac:	98 89       	ldd	r25, Y+16	; 0x10
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <STP_voidRotateCW+0x330>
    24b2:	98 8b       	std	Y+16, r25	; 0x10
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	62 e0       	ldi	r22, 0x02	; 2
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	63 e0       	ldi	r22, 0x03	; 3
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	aa e7       	ldi	r26, 0x7A	; 122
    24e4:	b4 e4       	ldi	r27, 0x44	; 68
    24e6:	8b 87       	std	Y+11, r24	; 0x0b
    24e8:	9c 87       	std	Y+12, r25	; 0x0c
    24ea:	ad 87       	std	Y+13, r26	; 0x0d
    24ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a ef       	ldi	r20, 0xFA	; 250
    24fc:	54 e4       	ldi	r21, 0x44	; 68
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8f 83       	std	Y+7, r24	; 0x07
    2508:	98 87       	std	Y+8, r25	; 0x08
    250a:	a9 87       	std	Y+9, r26	; 0x09
    250c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <STP_voidRotateCW+0x3b2>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <STP_voidRotateCW+0x430>
	else if (__tmp > 65535)
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <STP_voidRotateCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	6b 85       	ldd	r22, Y+11	; 0x0b
    254a:	7c 85       	ldd	r23, Y+12	; 0x0c
    254c:	8d 85       	ldd	r24, Y+13	; 0x0d
    254e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <STP_voidRotateCW+0x412>
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9c 83       	std	Y+4, r25	; 0x04
    2578:	8b 83       	std	Y+3, r24	; 0x03
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <STP_voidRotateCW+0x400>
    2582:	9c 83       	std	Y+4, r25	; 0x04
    2584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <STP_voidRotateCW+0x3f4>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <STP_voidRotateCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <STP_voidRotateCW+0x43c>
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    25c2:	e8 96       	adiw	r28, 0x38	; 56
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <STP_voidRotateACW>:


void STP_voidRotateACW(void){
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	e8 97       	sbiw	r28, 0x38	; 56
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	62 e0       	ldi	r22, 0x02	; 2
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	63 e0       	ldi	r22, 0x03	; 3
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	aa ef       	ldi	r26, 0xFA	; 250
    2616:	b3 e4       	ldi	r27, 0x43	; 67
    2618:	8d ab       	std	Y+53, r24	; 0x35
    261a:	9e ab       	std	Y+54, r25	; 0x36
    261c:	af ab       	std	Y+55, r26	; 0x37
    261e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6d a9       	ldd	r22, Y+53	; 0x35
    2622:	7e a9       	ldd	r23, Y+54	; 0x36
    2624:	8f a9       	ldd	r24, Y+55	; 0x37
    2626:	98 ad       	ldd	r25, Y+56	; 0x38
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a ef       	ldi	r20, 0xFA	; 250
    262e:	54 e4       	ldi	r21, 0x44	; 68
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	89 ab       	std	Y+49, r24	; 0x31
    263a:	9a ab       	std	Y+50, r25	; 0x32
    263c:	ab ab       	std	Y+51, r26	; 0x33
    263e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2640:	69 a9       	ldd	r22, Y+49	; 0x31
    2642:	7a a9       	ldd	r23, Y+50	; 0x32
    2644:	8b a9       	ldd	r24, Y+51	; 0x33
    2646:	9c a9       	ldd	r25, Y+52	; 0x34
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <STP_voidRotateACW+0x8e>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	98 ab       	std	Y+48, r25	; 0x30
    265e:	8f a7       	std	Y+47, r24	; 0x2f
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <STP_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    2662:	69 a9       	ldd	r22, Y+49	; 0x31
    2664:	7a a9       	ldd	r23, Y+50	; 0x32
    2666:	8b a9       	ldd	r24, Y+51	; 0x33
    2668:	9c a9       	ldd	r25, Y+52	; 0x34
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <STP_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	6d a9       	ldd	r22, Y+53	; 0x35
    267c:	7e a9       	ldd	r23, Y+54	; 0x36
    267e:	8f a9       	ldd	r24, Y+55	; 0x37
    2680:	98 ad       	ldd	r25, Y+56	; 0x38
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	98 ab       	std	Y+48, r25	; 0x30
    26a0:	8f a7       	std	Y+47, r24	; 0x2f
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <STP_voidRotateACW+0xee>
    26a4:	88 ec       	ldi	r24, 0xC8	; 200
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9e a7       	std	Y+46, r25	; 0x2e
    26aa:	8d a7       	std	Y+45, r24	; 0x2d
    26ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <STP_voidRotateACW+0xdc>
    26b4:	9e a7       	std	Y+46, r25	; 0x2e
    26b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c4:	98 a9       	ldd	r25, Y+48	; 0x30
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <STP_voidRotateACW+0xd0>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <STP_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	69 a9       	ldd	r22, Y+49	; 0x31
    26ce:	7a a9       	ldd	r23, Y+50	; 0x32
    26d0:	8b a9       	ldd	r24, Y+51	; 0x33
    26d2:	9c a9       	ldd	r25, Y+52	; 0x34
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e2:	98 a9       	ldd	r25, Y+48	; 0x30
    26e4:	9c a7       	std	Y+44, r25	; 0x2c
    26e6:	8b a7       	std	Y+43, r24	; 0x2b
    26e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <STP_voidRotateACW+0x118>
    26f0:	9c a7       	std	Y+44, r25	; 0x2c
    26f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    26f4:	83 e0       	ldi	r24, 0x03	; 3
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	63 e0       	ldi	r22, 0x03	; 3
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	aa ef       	ldi	r26, 0xFA	; 250
    2722:	b3 e4       	ldi	r27, 0x43	; 67
    2724:	8f a3       	std	Y+39, r24	; 0x27
    2726:	98 a7       	std	Y+40, r25	; 0x28
    2728:	a9 a7       	std	Y+41, r26	; 0x29
    272a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	6f a1       	ldd	r22, Y+39	; 0x27
    272e:	78 a5       	ldd	r23, Y+40	; 0x28
    2730:	89 a5       	ldd	r24, Y+41	; 0x29
    2732:	9a a5       	ldd	r25, Y+42	; 0x2a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a ef       	ldi	r20, 0xFA	; 250
    273a:	54 e4       	ldi	r21, 0x44	; 68
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8b a3       	std	Y+35, r24	; 0x23
    2746:	9c a3       	std	Y+36, r25	; 0x24
    2748:	ad a3       	std	Y+37, r26	; 0x25
    274a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <STP_voidRotateACW+0x19a>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9a a3       	std	Y+34, r25	; 0x22
    276a:	89 a3       	std	Y+33, r24	; 0x21
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <STP_voidRotateACW+0x218>
	else if (__tmp > 65535)
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	3f ef       	ldi	r19, 0xFF	; 255
    277a:	4f e7       	ldi	r20, 0x7F	; 127
    277c:	57 e4       	ldi	r21, 0x47	; 71
    277e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2782:	18 16       	cp	r1, r24
    2784:	4c f5       	brge	.+82     	; 0x27d8 <STP_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	6f a1       	ldd	r22, Y+39	; 0x27
    2788:	78 a5       	ldd	r23, Y+40	; 0x28
    278a:	89 a5       	ldd	r24, Y+41	; 0x29
    278c:	9a a5       	ldd	r25, Y+42	; 0x2a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e2       	ldi	r20, 0x20	; 32
    2794:	51 e4       	ldi	r21, 0x41	; 65
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9a a3       	std	Y+34, r25	; 0x22
    27ac:	89 a3       	std	Y+33, r24	; 0x21
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <STP_voidRotateACW+0x1fa>
    27b0:	88 ec       	ldi	r24, 0xC8	; 200
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	98 a3       	std	Y+32, r25	; 0x20
    27b6:	8f 8f       	std	Y+31, r24	; 0x1f
    27b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ba:	98 a1       	ldd	r25, Y+32	; 0x20
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <STP_voidRotateACW+0x1e8>
    27c0:	98 a3       	std	Y+32, r25	; 0x20
    27c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	89 a1       	ldd	r24, Y+33	; 0x21
    27c6:	9a a1       	ldd	r25, Y+34	; 0x22
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	9a a3       	std	Y+34, r25	; 0x22
    27cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	89 a1       	ldd	r24, Y+33	; 0x21
    27d0:	9a a1       	ldd	r25, Y+34	; 0x22
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <STP_voidRotateACW+0x1dc>
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <STP_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d8:	6b a1       	ldd	r22, Y+35	; 0x23
    27da:	7c a1       	ldd	r23, Y+36	; 0x24
    27dc:	8d a1       	ldd	r24, Y+37	; 0x25
    27de:	9e a1       	ldd	r25, Y+38	; 0x26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9a a3       	std	Y+34, r25	; 0x22
    27ea:	89 a3       	std	Y+33, r24	; 0x21
    27ec:	89 a1       	ldd	r24, Y+33	; 0x21
    27ee:	9a a1       	ldd	r25, Y+34	; 0x22
    27f0:	9e 8f       	std	Y+30, r25	; 0x1e
    27f2:	8d 8f       	std	Y+29, r24	; 0x1d
    27f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <STP_voidRotateACW+0x224>
    27fc:	9e 8f       	std	Y+30, r25	; 0x1e
    27fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2800:	83 e0       	ldi	r24, 0x03	; 3
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	63 e0       	ldi	r22, 0x03	; 3
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	aa ef       	ldi	r26, 0xFA	; 250
    282e:	b3 e4       	ldi	r27, 0x43	; 67
    2830:	89 8f       	std	Y+25, r24	; 0x19
    2832:	9a 8f       	std	Y+26, r25	; 0x1a
    2834:	ab 8f       	std	Y+27, r26	; 0x1b
    2836:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	69 8d       	ldd	r22, Y+25	; 0x19
    283a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8d 8b       	std	Y+21, r24	; 0x15
    2852:	9e 8b       	std	Y+22, r25	; 0x16
    2854:	af 8b       	std	Y+23, r26	; 0x17
    2856:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <STP_voidRotateACW+0x2a6>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <STP_voidRotateACW+0x324>
	else if (__tmp > 65535)
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <STP_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	69 8d       	ldd	r22, Y+25	; 0x19
    2894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <STP_voidRotateACW+0x306>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	89 8b       	std	Y+17, r24	; 0x11
    28c4:	89 89       	ldd	r24, Y+17	; 0x11
    28c6:	9a 89       	ldd	r25, Y+18	; 0x12
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <STP_voidRotateACW+0x2f4>
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9c 8b       	std	Y+20, r25	; 0x14
    28d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8b 89       	ldd	r24, Y+19	; 0x13
    28dc:	9c 89       	ldd	r25, Y+20	; 0x14
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <STP_voidRotateACW+0x2e8>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <STP_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6d 89       	ldd	r22, Y+21	; 0x15
    28e6:	7e 89       	ldd	r23, Y+22	; 0x16
    28e8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ea:	98 8d       	ldd	r25, Y+24	; 0x18
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
    28f8:	8b 89       	ldd	r24, Y+19	; 0x13
    28fa:	9c 89       	ldd	r25, Y+20	; 0x14
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
    2900:	8f 85       	ldd	r24, Y+15	; 0x0f
    2902:	98 89       	ldd	r25, Y+16	; 0x10
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <STP_voidRotateACW+0x330>
    2908:	98 8b       	std	Y+16, r25	; 0x10
    290a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	aa ef       	ldi	r26, 0xFA	; 250
    293a:	b3 e4       	ldi	r27, 0x43	; 67
    293c:	8b 87       	std	Y+11, r24	; 0x0b
    293e:	9c 87       	std	Y+12, r25	; 0x0c
    2940:	ad 87       	std	Y+13, r26	; 0x0d
    2942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a ef       	ldi	r20, 0xFA	; 250
    2952:	54 e4       	ldi	r21, 0x44	; 68
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	98 87       	std	Y+8, r25	; 0x08
    2960:	a9 87       	std	Y+9, r26	; 0x09
    2962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <STP_voidRotateACW+0x3b2>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <STP_voidRotateACW+0x430>
	else if (__tmp > 65535)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <STP_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <STP_voidRotateACW+0x412>
    29c8:	88 ec       	ldi	r24, 0xC8	; 200
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <STP_voidRotateACW+0x400>
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <STP_voidRotateACW+0x3f4>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <STP_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <STP_voidRotateACW+0x43c>
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    2a18:	e8 96       	adiw	r28, 0x38	; 56
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	cc 54       	subi	r28, 0x4C	; 76
    2a38:	d0 40       	sbci	r29, 0x00	; 0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	6f ef       	ldi	r22, 0xFF	; 255
    2a48:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	62 e0       	ldi	r22, 0x02	; 2
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5b       	subi	r30, 0xB7	; 183
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	ac e0       	ldi	r26, 0x0C	; 12
    2a76:	b2 e4       	ldi	r27, 0x42	; 66
    2a78:	80 83       	st	Z, r24
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	a2 83       	std	Z+2, r26	; 0x02
    2a7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	8e 01       	movw	r16, r28
    2a82:	0b 5b       	subi	r16, 0xBB	; 187
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 5b       	subi	r30, 0xB7	; 183
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a ef       	ldi	r20, 0xFA	; 250
    2a9a:	54 e4       	ldi	r21, 0x44	; 68
    2a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 5b       	subi	r30, 0xBB	; 187
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	44 f4       	brge	.+16     	; 0x2adc <LCD_voidInit+0xb2>
		__ticks = 1;
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 5b       	subi	r30, 0xBD	; 189
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	64 c0       	rjmp	.+200    	; 0x2ba4 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    2adc:	fe 01       	movw	r30, r28
    2ade:	eb 5b       	subi	r30, 0xBB	; 187
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	0c f0       	brlt	.+2      	; 0x2afc <LCD_voidInit+0xd2>
    2afa:	43 c0       	rjmp	.+134    	; 0x2b82 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	fe 01       	movw	r30, r28
    2afe:	e7 5b       	subi	r30, 0xB7	; 183
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0d 5b       	subi	r16, 0xBD	; 189
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
    2b32:	1f c0       	rjmp	.+62     	; 0x2b72 <LCD_voidInit+0x148>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ef 5b       	subi	r30, 0xBF	; 191
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	fe 01       	movw	r30, r28
    2b44:	ef 5b       	subi	r30, 0xBF	; 191
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_voidInit+0x122>
    2b50:	fe 01       	movw	r30, r28
    2b52:	ef 5b       	subi	r30, 0xBF	; 191
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	de 01       	movw	r26, r28
    2b5c:	ad 5b       	subi	r26, 0xBD	; 189
    2b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	11 96       	adiw	r26, 0x01	; 1
    2b6e:	9c 93       	st	X, r25
    2b70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b72:	fe 01       	movw	r30, r28
    2b74:	ed 5b       	subi	r30, 0xBD	; 189
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	d1 f6       	brne	.-76     	; 0x2b34 <LCD_voidInit+0x10a>
    2b80:	24 c0       	rjmp	.+72     	; 0x2bca <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	8e 01       	movw	r16, r28
    2b84:	0d 5b       	subi	r16, 0xBD	; 189
    2b86:	1f 4f       	sbci	r17, 0xFF	; 255
    2b88:	fe 01       	movw	r30, r28
    2b8a:	eb 5b       	subi	r30, 0xBB	; 187
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ed 5b       	subi	r30, 0xBD	; 189
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ff 96       	adiw	r30, 0x3f	; 63
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ff 96       	adiw	r30, 0x3f	; 63
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_voidInit+0x194>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ff 96       	adiw	r30, 0x3f	; 63
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    2bca:	88 e3       	ldi	r24, 0x38	; 56
    2bcc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a8 e4       	ldi	r26, 0x48	; 72
    2bd6:	b2 e4       	ldi	r27, 0x42	; 66
    2bd8:	8b af       	std	Y+59, r24	; 0x3b
    2bda:	9c af       	std	Y+60, r25	; 0x3c
    2bdc:	ad af       	std	Y+61, r26	; 0x3d
    2bde:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2be0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2be2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2be8:	2b ea       	ldi	r18, 0xAB	; 171
    2bea:	3a ea       	ldi	r19, 0xAA	; 170
    2bec:	4a e2       	ldi	r20, 0x2A	; 42
    2bee:	50 e4       	ldi	r21, 0x40	; 64
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8f ab       	std	Y+55, r24	; 0x37
    2bfa:	98 af       	std	Y+56, r25	; 0x38
    2bfc:	a9 af       	std	Y+57, r26	; 0x39
    2bfe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c00:	6f a9       	ldd	r22, Y+55	; 0x37
    2c02:	78 ad       	ldd	r23, Y+56	; 0x38
    2c04:	89 ad       	ldd	r24, Y+57	; 0x39
    2c06:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	1c f4       	brge	.+6      	; 0x2c1e <LCD_voidInit+0x1f4>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	8e ab       	std	Y+54, r24	; 0x36
    2c1c:	91 c0       	rjmp	.+290    	; 0x2d40 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    2c1e:	6f a9       	ldd	r22, Y+55	; 0x37
    2c20:	78 ad       	ldd	r23, Y+56	; 0x38
    2c22:	89 ad       	ldd	r24, Y+57	; 0x39
    2c24:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	53 e4       	ldi	r21, 0x43	; 67
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <LCD_voidInit+0x20e>
    2c36:	7b c0       	rjmp	.+246    	; 0x2d2e <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2c38:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c3a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a e7       	ldi	r20, 0x7A	; 122
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8a ab       	std	Y+50, r24	; 0x32
    2c52:	9b ab       	std	Y+51, r25	; 0x33
    2c54:	ac ab       	std	Y+52, r26	; 0x34
    2c56:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6a a9       	ldd	r22, Y+50	; 0x32
    2c5a:	7b a9       	ldd	r23, Y+51	; 0x33
    2c5c:	8c a9       	ldd	r24, Y+52	; 0x34
    2c5e:	9d a9       	ldd	r25, Y+53	; 0x35
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a ef       	ldi	r20, 0xFA	; 250
    2c66:	54 e4       	ldi	r21, 0x44	; 68
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8e a7       	std	Y+46, r24	; 0x2e
    2c72:	9f a7       	std	Y+47, r25	; 0x2f
    2c74:	a8 ab       	std	Y+48, r26	; 0x30
    2c76:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c78:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c7a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c7c:	88 a9       	ldd	r24, Y+48	; 0x30
    2c7e:	99 a9       	ldd	r25, Y+49	; 0x31
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <LCD_voidInit+0x270>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9d a7       	std	Y+45, r25	; 0x2d
    2c96:	8c a7       	std	Y+44, r24	; 0x2c
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    2c9a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c9c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c9e:	88 a9       	ldd	r24, Y+48	; 0x30
    2ca0:	99 a9       	ldd	r25, Y+49	; 0x31
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6a a9       	ldd	r22, Y+50	; 0x32
    2cb4:	7b a9       	ldd	r23, Y+51	; 0x33
    2cb6:	8c a9       	ldd	r24, Y+52	; 0x34
    2cb8:	9d a9       	ldd	r25, Y+53	; 0x35
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9d a7       	std	Y+45, r25	; 0x2d
    2cd8:	8c a7       	std	Y+44, r24	; 0x2c
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <LCD_voidInit+0x2d0>
    2cdc:	88 ec       	ldi	r24, 0xC8	; 200
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9b a7       	std	Y+43, r25	; 0x2b
    2ce2:	8a a7       	std	Y+42, r24	; 0x2a
    2ce4:	8a a5       	ldd	r24, Y+42	; 0x2a
    2ce6:	9b a5       	ldd	r25, Y+43	; 0x2b
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_voidInit+0x2be>
    2cec:	9b a7       	std	Y+43, r25	; 0x2b
    2cee:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cf2:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9d a7       	std	Y+45, r25	; 0x2d
    2cf8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cfc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <LCD_voidInit+0x2b2>
    2d02:	24 c0       	rjmp	.+72     	; 0x2d4c <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d06:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d08:	88 a9       	ldd	r24, Y+48	; 0x30
    2d0a:	99 a9       	ldd	r25, Y+49	; 0x31
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9d a7       	std	Y+45, r25	; 0x2d
    2d16:	8c a7       	std	Y+44, r24	; 0x2c
    2d18:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d1c:	99 a7       	std	Y+41, r25	; 0x29
    2d1e:	88 a7       	std	Y+40, r24	; 0x28
    2d20:	88 a5       	ldd	r24, Y+40	; 0x28
    2d22:	99 a5       	ldd	r25, Y+41	; 0x29
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <LCD_voidInit+0x2fa>
    2d28:	99 a7       	std	Y+41, r25	; 0x29
    2d2a:	88 a7       	std	Y+40, r24	; 0x28
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d2e:	6f a9       	ldd	r22, Y+55	; 0x37
    2d30:	78 ad       	ldd	r23, Y+56	; 0x38
    2d32:	89 ad       	ldd	r24, Y+57	; 0x39
    2d34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8e ab       	std	Y+54, r24	; 0x36
    2d40:	8e a9       	ldd	r24, Y+54	; 0x36
    2d42:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d44:	8f a1       	ldd	r24, Y+39	; 0x27
    2d46:	8a 95       	dec	r24
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_voidInit+0x31c>
    2d4a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    2d4c:	8f e0       	ldi	r24, 0x0F	; 15
    2d4e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a8 e4       	ldi	r26, 0x48	; 72
    2d58:	b2 e4       	ldi	r27, 0x42	; 66
    2d5a:	8b a3       	std	Y+35, r24	; 0x23
    2d5c:	9c a3       	std	Y+36, r25	; 0x24
    2d5e:	ad a3       	std	Y+37, r26	; 0x25
    2d60:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d62:	6b a1       	ldd	r22, Y+35	; 0x23
    2d64:	7c a1       	ldd	r23, Y+36	; 0x24
    2d66:	8d a1       	ldd	r24, Y+37	; 0x25
    2d68:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6a:	2b ea       	ldi	r18, 0xAB	; 171
    2d6c:	3a ea       	ldi	r19, 0xAA	; 170
    2d6e:	4a e2       	ldi	r20, 0x2A	; 42
    2d70:	50 e4       	ldi	r21, 0x40	; 64
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7c:	98 a3       	std	Y+32, r25	; 0x20
    2d7e:	a9 a3       	std	Y+33, r26	; 0x21
    2d80:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d84:	78 a1       	ldd	r23, Y+32	; 0x20
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	1c f4       	brge	.+6      	; 0x2da0 <LCD_voidInit+0x376>
		__ticks = 1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d9e:	91 c0       	rjmp	.+290    	; 0x2ec2 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    2da0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2da2:	78 a1       	ldd	r23, Y+32	; 0x20
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	53 e4       	ldi	r21, 0x43	; 67
    2db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	0c f0       	brlt	.+2      	; 0x2dba <LCD_voidInit+0x390>
    2db8:	7b c0       	rjmp	.+246    	; 0x2eb0 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2dba:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	54 e4       	ldi	r21, 0x44	; 68
    2dca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8a 8f       	std	Y+26, r24	; 0x1a
    2dd4:	9b 8f       	std	Y+27, r25	; 0x1b
    2dd6:	ac 8f       	std	Y+28, r26	; 0x1c
    2dd8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ddc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dde:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2de0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a ef       	ldi	r20, 0xFA	; 250
    2de8:	54 e4       	ldi	r21, 0x44	; 68
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8e 8b       	std	Y+22, r24	; 0x16
    2df4:	9f 8b       	std	Y+23, r25	; 0x17
    2df6:	a8 8f       	std	Y+24, r26	; 0x18
    2df8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2dfa:	6e 89       	ldd	r22, Y+22	; 0x16
    2dfc:	7f 89       	ldd	r23, Y+23	; 0x17
    2dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    2e00:	99 8d       	ldd	r25, Y+25	; 0x19
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <LCD_voidInit+0x3f2>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9d 8b       	std	Y+21, r25	; 0x15
    2e18:	8c 8b       	std	Y+20, r24	; 0x14
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    2e1c:	6e 89       	ldd	r22, Y+22	; 0x16
    2e1e:	7f 89       	ldd	r23, Y+23	; 0x17
    2e20:	88 8d       	ldd	r24, Y+24	; 0x18
    2e22:	99 8d       	ldd	r25, Y+25	; 0x19
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e36:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9d 8b       	std	Y+21, r25	; 0x15
    2e5a:	8c 8b       	std	Y+20, r24	; 0x14
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <LCD_voidInit+0x452>
    2e5e:	88 ec       	ldi	r24, 0xC8	; 200
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9b 8b       	std	Y+19, r25	; 0x13
    2e64:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e66:	8a 89       	ldd	r24, Y+18	; 0x12
    2e68:	9b 89       	ldd	r25, Y+19	; 0x13
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_voidInit+0x440>
    2e6e:	9b 8b       	std	Y+19, r25	; 0x13
    2e70:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8c 89       	ldd	r24, Y+20	; 0x14
    2e74:	9d 89       	ldd	r25, Y+21	; 0x15
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9d 8b       	std	Y+21, r25	; 0x15
    2e7a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e7e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <LCD_voidInit+0x434>
    2e84:	24 c0       	rjmp	.+72     	; 0x2ece <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6e 89       	ldd	r22, Y+22	; 0x16
    2e88:	7f 89       	ldd	r23, Y+23	; 0x17
    2e8a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e8c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9d 8b       	std	Y+21, r25	; 0x15
    2e98:	8c 8b       	std	Y+20, r24	; 0x14
    2e9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e9e:	99 8b       	std	Y+17, r25	; 0x11
    2ea0:	88 8b       	std	Y+16, r24	; 0x10
    2ea2:	88 89       	ldd	r24, Y+16	; 0x10
    2ea4:	99 89       	ldd	r25, Y+17	; 0x11
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <LCD_voidInit+0x47c>
    2eaa:	99 8b       	std	Y+17, r25	; 0x11
    2eac:	88 8b       	std	Y+16, r24	; 0x10
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eb0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2eb2:	78 a1       	ldd	r23, Y+32	; 0x20
    2eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ec2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ec4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec8:	8a 95       	dec	r24
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_voidInit+0x49e>
    2ecc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e4       	ldi	r27, 0x40	; 64
    2edc:	8b 87       	std	Y+11, r24	; 0x0b
    2ede:	9c 87       	std	Y+12, r25	; 0x0c
    2ee0:	ad 87       	std	Y+13, r26	; 0x0d
    2ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a ef       	ldi	r20, 0xFA	; 250
    2ef2:	54 e4       	ldi	r21, 0x44	; 68
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8f 83       	std	Y+7, r24	; 0x07
    2efe:	98 87       	std	Y+8, r25	; 0x08
    2f00:	a9 87       	std	Y+9, r26	; 0x09
    2f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <LCD_voidInit+0x4fc>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <LCD_voidInit+0x55c>
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9c 83       	std	Y+4, r25	; 0x04
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <LCD_voidInit+0x54a>
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <LCD_voidInit+0x53e>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_voidInit+0x586>
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2fb8:	c4 5b       	subi	r28, 0xB4	; 180
    2fba:	df 4f       	sbci	r29, 0xFF	; 255
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	69 97       	sbiw	r28, 0x19	; 25
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffe:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	62 e0       	ldi	r22, 0x02	; 2
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a0 e8       	ldi	r26, 0x80	; 128
    3012:	bf e3       	ldi	r27, 0x3F	; 63
    3014:	8d 8b       	std	Y+21, r24	; 0x15
    3016:	9e 8b       	std	Y+22, r25	; 0x16
    3018:	af 8b       	std	Y+23, r26	; 0x17
    301a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    301c:	6d 89       	ldd	r22, Y+21	; 0x15
    301e:	7e 89       	ldd	r23, Y+22	; 0x16
    3020:	8f 89       	ldd	r24, Y+23	; 0x17
    3022:	98 8d       	ldd	r25, Y+24	; 0x18
    3024:	2b ea       	ldi	r18, 0xAB	; 171
    3026:	3a ea       	ldi	r19, 0xAA	; 170
    3028:	4a e2       	ldi	r20, 0x2A	; 42
    302a:	50 e4       	ldi	r21, 0x40	; 64
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	89 8b       	std	Y+17, r24	; 0x11
    3036:	9a 8b       	std	Y+18, r25	; 0x12
    3038:	ab 8b       	std	Y+19, r26	; 0x13
    303a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    303c:	69 89       	ldd	r22, Y+17	; 0x11
    303e:	7a 89       	ldd	r23, Y+18	; 0x12
    3040:	8b 89       	ldd	r24, Y+19	; 0x13
    3042:	9c 89       	ldd	r25, Y+20	; 0x14
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e8       	ldi	r20, 0x80	; 128
    304a:	5f e3       	ldi	r21, 0x3F	; 63
    304c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3050:	88 23       	and	r24, r24
    3052:	1c f4       	brge	.+6      	; 0x305a <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	88 8b       	std	Y+16, r24	; 0x10
    3058:	91 c0       	rjmp	.+290    	; 0x317c <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    305a:	69 89       	ldd	r22, Y+17	; 0x11
    305c:	7a 89       	ldd	r23, Y+18	; 0x12
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4f e7       	ldi	r20, 0x7F	; 127
    3068:	53 e4       	ldi	r21, 0x43	; 67
    306a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306e:	18 16       	cp	r1, r24
    3070:	0c f0       	brlt	.+2      	; 0x3074 <LCD_voidSendCommand+0xa4>
    3072:	7b c0       	rjmp	.+246    	; 0x316a <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a e7       	ldi	r20, 0x7A	; 122
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8c 87       	std	Y+12, r24	; 0x0c
    308e:	9d 87       	std	Y+13, r25	; 0x0d
    3090:	ae 87       	std	Y+14, r26	; 0x0e
    3092:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6c 85       	ldd	r22, Y+12	; 0x0c
    3096:	7d 85       	ldd	r23, Y+13	; 0x0d
    3098:	8e 85       	ldd	r24, Y+14	; 0x0e
    309a:	9f 85       	ldd	r25, Y+15	; 0x0f
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a ef       	ldi	r20, 0xFA	; 250
    30a2:	54 e4       	ldi	r21, 0x44	; 68
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	88 87       	std	Y+8, r24	; 0x08
    30ae:	99 87       	std	Y+9, r25	; 0x09
    30b0:	aa 87       	std	Y+10, r26	; 0x0a
    30b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30b4:	68 85       	ldd	r22, Y+8	; 0x08
    30b6:	79 85       	ldd	r23, Y+9	; 0x09
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9f 83       	std	Y+7, r25	; 0x07
    30d2:	8e 83       	std	Y+6, r24	; 0x06
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    30d6:	68 85       	ldd	r22, Y+8	; 0x08
    30d8:	79 85       	ldd	r23, Y+9	; 0x09
    30da:	8a 85       	ldd	r24, Y+10	; 0x0a
    30dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    30f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    30f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    30f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9f 83       	std	Y+7, r25	; 0x07
    3114:	8e 83       	std	Y+6, r24	; 0x06
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <LCD_voidSendCommand+0x166>
    3118:	88 ec       	ldi	r24, 0xC8	; 200
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9d 83       	std	Y+5, r25	; 0x05
    311e:	8c 83       	std	Y+4, r24	; 0x04
    3120:	8c 81       	ldd	r24, Y+4	; 0x04
    3122:	9d 81       	ldd	r25, Y+5	; 0x05
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <LCD_voidSendCommand+0x154>
    3128:	9d 83       	std	Y+5, r25	; 0x05
    312a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8e 81       	ldd	r24, Y+6	; 0x06
    312e:	9f 81       	ldd	r25, Y+7	; 0x07
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9f 83       	std	Y+7, r25	; 0x07
    3134:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8e 81       	ldd	r24, Y+6	; 0x06
    3138:	9f 81       	ldd	r25, Y+7	; 0x07
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <LCD_voidSendCommand+0x148>
    313e:	24 c0       	rjmp	.+72     	; 0x3188 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	68 85       	ldd	r22, Y+8	; 0x08
    3142:	79 85       	ldd	r23, Y+9	; 0x09
    3144:	8a 85       	ldd	r24, Y+10	; 0x0a
    3146:	9b 85       	ldd	r25, Y+11	; 0x0b
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9f 83       	std	Y+7, r25	; 0x07
    3152:	8e 83       	std	Y+6, r24	; 0x06
    3154:	8e 81       	ldd	r24, Y+6	; 0x06
    3156:	9f 81       	ldd	r25, Y+7	; 0x07
    3158:	9b 83       	std	Y+3, r25	; 0x03
    315a:	8a 83       	std	Y+2, r24	; 0x02
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	9b 81       	ldd	r25, Y+3	; 0x03
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <LCD_voidSendCommand+0x190>
    3164:	9b 83       	std	Y+3, r25	; 0x03
    3166:	8a 83       	std	Y+2, r24	; 0x02
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    316a:	69 89       	ldd	r22, Y+17	; 0x11
    316c:	7a 89       	ldd	r23, Y+18	; 0x12
    316e:	8b 89       	ldd	r24, Y+19	; 0x13
    3170:	9c 89       	ldd	r25, Y+20	; 0x14
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	88 8b       	std	Y+16, r24	; 0x10
    317c:	88 89       	ldd	r24, Y+16	; 0x10
    317e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	8a 95       	dec	r24
    3184:	f1 f7       	brne	.-4      	; 0x3182 <LCD_voidSendCommand+0x1b2>
    3186:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	62 e0       	ldi	r22, 0x02	; 2
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
}
    3192:	69 96       	adiw	r28, 0x19	; 25
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	69 97       	sbiw	r28, 0x19	; 25
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	69 8d       	ldd	r22, Y+25	; 0x19
    31d2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	62 e0       	ldi	r22, 0x02	; 2
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e8       	ldi	r26, 0x80	; 128
    31e6:	bf e3       	ldi	r27, 0x3F	; 63
    31e8:	8d 8b       	std	Y+21, r24	; 0x15
    31ea:	9e 8b       	std	Y+22, r25	; 0x16
    31ec:	af 8b       	std	Y+23, r26	; 0x17
    31ee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31f0:	6d 89       	ldd	r22, Y+21	; 0x15
    31f2:	7e 89       	ldd	r23, Y+22	; 0x16
    31f4:	8f 89       	ldd	r24, Y+23	; 0x17
    31f6:	98 8d       	ldd	r25, Y+24	; 0x18
    31f8:	2b ea       	ldi	r18, 0xAB	; 171
    31fa:	3a ea       	ldi	r19, 0xAA	; 170
    31fc:	4a e2       	ldi	r20, 0x2A	; 42
    31fe:	50 e4       	ldi	r21, 0x40	; 64
    3200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	89 8b       	std	Y+17, r24	; 0x11
    320a:	9a 8b       	std	Y+18, r25	; 0x12
    320c:	ab 8b       	std	Y+19, r26	; 0x13
    320e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3210:	69 89       	ldd	r22, Y+17	; 0x11
    3212:	7a 89       	ldd	r23, Y+18	; 0x12
    3214:	8b 89       	ldd	r24, Y+19	; 0x13
    3216:	9c 89       	ldd	r25, Y+20	; 0x14
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	1c f4       	brge	.+6      	; 0x322e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	88 8b       	std	Y+16, r24	; 0x10
    322c:	91 c0       	rjmp	.+290    	; 0x3350 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    322e:	69 89       	ldd	r22, Y+17	; 0x11
    3230:	7a 89       	ldd	r23, Y+18	; 0x12
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	53 e4       	ldi	r21, 0x43	; 67
    323e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <LCD_voidSendChar+0xa4>
    3246:	7b c0       	rjmp	.+246    	; 0x333e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3248:	6d 89       	ldd	r22, Y+21	; 0x15
    324a:	7e 89       	ldd	r23, Y+22	; 0x16
    324c:	8f 89       	ldd	r24, Y+23	; 0x17
    324e:	98 8d       	ldd	r25, Y+24	; 0x18
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	4a e7       	ldi	r20, 0x7A	; 122
    3256:	54 e4       	ldi	r21, 0x44	; 68
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8c 87       	std	Y+12, r24	; 0x0c
    3262:	9d 87       	std	Y+13, r25	; 0x0d
    3264:	ae 87       	std	Y+14, r26	; 0x0e
    3266:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3268:	6c 85       	ldd	r22, Y+12	; 0x0c
    326a:	7d 85       	ldd	r23, Y+13	; 0x0d
    326c:	8e 85       	ldd	r24, Y+14	; 0x0e
    326e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	4a ef       	ldi	r20, 0xFA	; 250
    3276:	54 e4       	ldi	r21, 0x44	; 68
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	88 87       	std	Y+8, r24	; 0x08
    3282:	99 87       	std	Y+9, r25	; 0x09
    3284:	aa 87       	std	Y+10, r26	; 0x0a
    3286:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3288:	68 85       	ldd	r22, Y+8	; 0x08
    328a:	79 85       	ldd	r23, Y+9	; 0x09
    328c:	8a 85       	ldd	r24, Y+10	; 0x0a
    328e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	40 e8       	ldi	r20, 0x80	; 128
    3296:	5f e3       	ldi	r21, 0x3F	; 63
    3298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329c:	88 23       	and	r24, r24
    329e:	2c f4       	brge	.+10     	; 0x32aa <LCD_voidSendChar+0x106>
		__ticks = 1;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	9f 83       	std	Y+7, r25	; 0x07
    32a6:	8e 83       	std	Y+6, r24	; 0x06
    32a8:	3f c0       	rjmp	.+126    	; 0x3328 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    32aa:	68 85       	ldd	r22, Y+8	; 0x08
    32ac:	79 85       	ldd	r23, Y+9	; 0x09
    32ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	3f ef       	ldi	r19, 0xFF	; 255
    32b6:	4f e7       	ldi	r20, 0x7F	; 127
    32b8:	57 e4       	ldi	r21, 0x47	; 71
    32ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32be:	18 16       	cp	r1, r24
    32c0:	4c f5       	brge	.+82     	; 0x3314 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    32c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    32c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    32c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e2       	ldi	r20, 0x20	; 32
    32d0:	51 e4       	ldi	r21, 0x41	; 65
    32d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9f 83       	std	Y+7, r25	; 0x07
    32e8:	8e 83       	std	Y+6, r24	; 0x06
    32ea:	0f c0       	rjmp	.+30     	; 0x330a <LCD_voidSendChar+0x166>
    32ec:	88 ec       	ldi	r24, 0xC8	; 200
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9d 83       	std	Y+5, r25	; 0x05
    32f2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32f4:	8c 81       	ldd	r24, Y+4	; 0x04
    32f6:	9d 81       	ldd	r25, Y+5	; 0x05
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <LCD_voidSendChar+0x154>
    32fc:	9d 83       	std	Y+5, r25	; 0x05
    32fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3300:	8e 81       	ldd	r24, Y+6	; 0x06
    3302:	9f 81       	ldd	r25, Y+7	; 0x07
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	9f 83       	std	Y+7, r25	; 0x07
    3308:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	9f 81       	ldd	r25, Y+7	; 0x07
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	69 f7       	brne	.-38     	; 0x32ec <LCD_voidSendChar+0x148>
    3312:	24 c0       	rjmp	.+72     	; 0x335c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3314:	68 85       	ldd	r22, Y+8	; 0x08
    3316:	79 85       	ldd	r23, Y+9	; 0x09
    3318:	8a 85       	ldd	r24, Y+10	; 0x0a
    331a:	9b 85       	ldd	r25, Y+11	; 0x0b
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9f 83       	std	Y+7, r25	; 0x07
    3326:	8e 83       	std	Y+6, r24	; 0x06
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	8a 81       	ldd	r24, Y+2	; 0x02
    3332:	9b 81       	ldd	r25, Y+3	; 0x03
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <LCD_voidSendChar+0x190>
    3338:	9b 83       	std	Y+3, r25	; 0x03
    333a:	8a 83       	std	Y+2, r24	; 0x02
    333c:	0f c0       	rjmp	.+30     	; 0x335c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    333e:	69 89       	ldd	r22, Y+17	; 0x11
    3340:	7a 89       	ldd	r23, Y+18	; 0x12
    3342:	8b 89       	ldd	r24, Y+19	; 0x13
    3344:	9c 89       	ldd	r25, Y+20	; 0x14
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	88 8b       	std	Y+16, r24	; 0x10
    3350:	88 89       	ldd	r24, Y+16	; 0x10
    3352:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	8a 95       	dec	r24
    3358:	f1 f7       	brne	.-4      	; 0x3356 <LCD_voidSendChar+0x1b2>
    335a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	62 e0       	ldi	r22, 0x02	; 2
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	
}
    3366:	69 96       	adiw	r28, 0x19	; 25
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	00 d0       	rcall	.+0      	; 0x337e <LCD_voidSendString+0x6>
    337e:	0f 92       	push	r0
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	9b 83       	std	Y+3, r25	; 0x03
    3386:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    3388:	19 82       	std	Y+1, r1	; 0x01
    338a:	0e c0       	rjmp	.+28     	; 0x33a8 <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	fc 01       	movw	r30, r24
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	80 81       	ld	r24, Z
    339e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	8f 5f       	subi	r24, 0xFF	; 255
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
    33b2:	fc 01       	movw	r30, r24
    33b4:	e2 0f       	add	r30, r18
    33b6:	f3 1f       	adc	r31, r19
    33b8:	80 81       	ld	r24, Z
    33ba:	88 23       	and	r24, r24
    33bc:	39 f7       	brne	.-50     	; 0x338c <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <LCD_voidSetLocation+0x6>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <LCD_voidSetLocation+0x8>
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	3c 83       	std	Y+4, r19	; 0x04
    33e2:	2b 83       	std	Y+3, r18	; 0x03
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	9c 81       	ldd	r25, Y+4	; 0x04
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	91 05       	cpc	r25, r1
    33ec:	31 f0       	breq	.+12     	; 0x33fa <LCD_voidSetLocation+0x30>
    33ee:	2b 81       	ldd	r18, Y+3	; 0x03
    33f0:	3c 81       	ldd	r19, Y+4	; 0x04
    33f2:	22 30       	cpi	r18, 0x02	; 2
    33f4:	31 05       	cpc	r19, r1
    33f6:	31 f0       	breq	.+12     	; 0x3404 <LCD_voidSetLocation+0x3a>
    33f8:	09 c0       	rjmp	.+18     	; 0x340c <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	80 58       	subi	r24, 0x80	; 128
    33fe:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>
    3402:	04 c0       	rjmp	.+8      	; 0x340c <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	80 54       	subi	r24, 0x40	; 64
    3408:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>

	}
	
}
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	60 97       	sbiw	r28, 0x10	; 16
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	6d 87       	std	Y+13, r22	; 0x0d
    3434:	7e 87       	std	Y+14, r23	; 0x0e
    3436:	8f 87       	std	Y+15, r24	; 0x0f
    3438:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    343a:	89 e0       	ldi	r24, 0x09	; 9
    343c:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    343e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3440:	9e 85       	ldd	r25, Y+14	; 0x0e
    3442:	af 85       	ldd	r26, Y+15	; 0x0f
    3444:	b8 89       	ldd	r27, Y+16	; 0x10
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	a1 05       	cpc	r26, r1
    344a:	b1 05       	cpc	r27, r1
    344c:	21 f4       	brne	.+8      	; 0x3456 <LCD_voidSendNumber+0x3c>
    344e:	80 e3       	ldi	r24, 0x30	; 48
    3450:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidSendChar>
    3454:	44 c0       	rjmp	.+136    	; 0x34de <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    3456:	1c 86       	std	Y+12, r1	; 0x0c
    3458:	2e c0       	rjmp	.+92     	; 0x34b6 <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	08 2f       	mov	r16, r24
    345e:	10 e0       	ldi	r17, 0x00	; 0
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	af 85       	ldd	r26, Y+15	; 0x0f
    3466:	b8 89       	ldd	r27, Y+16	; 0x10
    3468:	2a e0       	ldi	r18, 0x0A	; 10
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__udivmodsi4>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	28 2f       	mov	r18, r24
    347e:	20 5d       	subi	r18, 0xD0	; 208
    3480:	ce 01       	movw	r24, r28
    3482:	02 96       	adiw	r24, 0x02	; 2
    3484:	fc 01       	movw	r30, r24
    3486:	e0 0f       	add	r30, r16
    3488:	f1 1f       	adc	r31, r17
    348a:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    348c:	8d 85       	ldd	r24, Y+13	; 0x0d
    348e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3490:	af 85       	ldd	r26, Y+15	; 0x0f
    3492:	b8 89       	ldd	r27, Y+16	; 0x10
    3494:	2a e0       	ldi	r18, 0x0A	; 10
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__udivmodsi4>
    34a4:	da 01       	movw	r26, r20
    34a6:	c9 01       	movw	r24, r18
    34a8:	8d 87       	std	Y+13, r24	; 0x0d
    34aa:	9e 87       	std	Y+14, r25	; 0x0e
    34ac:	af 87       	std	Y+15, r26	; 0x0f
    34ae:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	81 50       	subi	r24, 0x01	; 1
    34b4:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    34b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ba:	af 85       	ldd	r26, Y+15	; 0x0f
    34bc:	b8 89       	ldd	r27, Y+16	; 0x10
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	a1 05       	cpc	r26, r1
    34c2:	b1 05       	cpc	r27, r1
    34c4:	51 f6       	brne	.-108    	; 0x345a <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	88 2f       	mov	r24, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9c 01       	movw	r18, r24
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	ce 01       	movw	r24, r28
    34d4:	02 96       	adiw	r24, 0x02	; 2
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	0e 94 bc 19 	call	0x3378	; 0x3378 <LCD_voidSendString>
	}
}
    34de:	60 96       	adiw	r28, 0x10	; 16
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	08 95       	ret

000034f4 <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	6c 97       	sbiw	r28, 0x1c	; 28
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	8a 8f       	std	Y+26, r24	; 0x1a
    350a:	7c 8f       	std	Y+28, r23	; 0x1c
    350c:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    350e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	08 96       	adiw	r24, 0x08	; 8
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidSendCommand>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a0 e2       	ldi	r26, 0x20	; 32
    352c:	b2 e4       	ldi	r27, 0x42	; 66
    352e:	8d 8b       	std	Y+21, r24	; 0x15
    3530:	9e 8b       	std	Y+22, r25	; 0x16
    3532:	af 8b       	std	Y+23, r26	; 0x17
    3534:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3536:	6d 89       	ldd	r22, Y+21	; 0x15
    3538:	7e 89       	ldd	r23, Y+22	; 0x16
    353a:	8f 89       	ldd	r24, Y+23	; 0x17
    353c:	98 8d       	ldd	r25, Y+24	; 0x18
    353e:	2b ea       	ldi	r18, 0xAB	; 171
    3540:	3a ea       	ldi	r19, 0xAA	; 170
    3542:	4a e2       	ldi	r20, 0x2A	; 42
    3544:	50 e4       	ldi	r21, 0x40	; 64
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	89 8b       	std	Y+17, r24	; 0x11
    3550:	9a 8b       	std	Y+18, r25	; 0x12
    3552:	ab 8b       	std	Y+19, r26	; 0x13
    3554:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3556:	69 89       	ldd	r22, Y+17	; 0x11
    3558:	7a 89       	ldd	r23, Y+18	; 0x12
    355a:	8b 89       	ldd	r24, Y+19	; 0x13
    355c:	9c 89       	ldd	r25, Y+20	; 0x14
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	1c f4       	brge	.+6      	; 0x3574 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	88 8b       	std	Y+16, r24	; 0x10
    3572:	91 c0       	rjmp	.+290    	; 0x3696 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    3574:	69 89       	ldd	r22, Y+17	; 0x11
    3576:	7a 89       	ldd	r23, Y+18	; 0x12
    3578:	8b 89       	ldd	r24, Y+19	; 0x13
    357a:	9c 89       	ldd	r25, Y+20	; 0x14
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	4f e7       	ldi	r20, 0x7F	; 127
    3582:	53 e4       	ldi	r21, 0x43	; 67
    3584:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3588:	18 16       	cp	r1, r24
    358a:	0c f0       	brlt	.+2      	; 0x358e <LCD_voidDrawSpecialChar+0x9a>
    358c:	7b c0       	rjmp	.+246    	; 0x3684 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    358e:	6d 89       	ldd	r22, Y+21	; 0x15
    3590:	7e 89       	ldd	r23, Y+22	; 0x16
    3592:	8f 89       	ldd	r24, Y+23	; 0x17
    3594:	98 8d       	ldd	r25, Y+24	; 0x18
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	4a e7       	ldi	r20, 0x7A	; 122
    359c:	54 e4       	ldi	r21, 0x44	; 68
    359e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	8c 87       	std	Y+12, r24	; 0x0c
    35a8:	9d 87       	std	Y+13, r25	; 0x0d
    35aa:	ae 87       	std	Y+14, r26	; 0x0e
    35ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    35b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    35b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    35b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	4a ef       	ldi	r20, 0xFA	; 250
    35bc:	54 e4       	ldi	r21, 0x44	; 68
    35be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	88 87       	std	Y+8, r24	; 0x08
    35c8:	99 87       	std	Y+9, r25	; 0x09
    35ca:	aa 87       	std	Y+10, r26	; 0x0a
    35cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35ce:	68 85       	ldd	r22, Y+8	; 0x08
    35d0:	79 85       	ldd	r23, Y+9	; 0x09
    35d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    35d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e8       	ldi	r20, 0x80	; 128
    35dc:	5f e3       	ldi	r21, 0x3F	; 63
    35de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e2:	88 23       	and	r24, r24
    35e4:	2c f4       	brge	.+10     	; 0x35f0 <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	9f 83       	std	Y+7, r25	; 0x07
    35ec:	8e 83       	std	Y+6, r24	; 0x06
    35ee:	3f c0       	rjmp	.+126    	; 0x366e <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    35f0:	68 85       	ldd	r22, Y+8	; 0x08
    35f2:	79 85       	ldd	r23, Y+9	; 0x09
    35f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	3f ef       	ldi	r19, 0xFF	; 255
    35fc:	4f e7       	ldi	r20, 0x7F	; 127
    35fe:	57 e4       	ldi	r21, 0x47	; 71
    3600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3604:	18 16       	cp	r1, r24
    3606:	4c f5       	brge	.+82     	; 0x365a <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3608:	6c 85       	ldd	r22, Y+12	; 0x0c
    360a:	7d 85       	ldd	r23, Y+13	; 0x0d
    360c:	8e 85       	ldd	r24, Y+14	; 0x0e
    360e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e2       	ldi	r20, 0x20	; 32
    3616:	51 e4       	ldi	r21, 0x41	; 65
    3618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	bc 01       	movw	r22, r24
    3622:	cd 01       	movw	r24, r26
    3624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	9f 83       	std	Y+7, r25	; 0x07
    362e:	8e 83       	std	Y+6, r24	; 0x06
    3630:	0f c0       	rjmp	.+30     	; 0x3650 <LCD_voidDrawSpecialChar+0x15c>
    3632:	88 ec       	ldi	r24, 0xC8	; 200
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	9d 83       	std	Y+5, r25	; 0x05
    3638:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    363a:	8c 81       	ldd	r24, Y+4	; 0x04
    363c:	9d 81       	ldd	r25, Y+5	; 0x05
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <LCD_voidDrawSpecialChar+0x14a>
    3642:	9d 83       	std	Y+5, r25	; 0x05
    3644:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3646:	8e 81       	ldd	r24, Y+6	; 0x06
    3648:	9f 81       	ldd	r25, Y+7	; 0x07
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	9f 83       	std	Y+7, r25	; 0x07
    364e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3650:	8e 81       	ldd	r24, Y+6	; 0x06
    3652:	9f 81       	ldd	r25, Y+7	; 0x07
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	69 f7       	brne	.-38     	; 0x3632 <LCD_voidDrawSpecialChar+0x13e>
    3658:	24 c0       	rjmp	.+72     	; 0x36a2 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365a:	68 85       	ldd	r22, Y+8	; 0x08
    365c:	79 85       	ldd	r23, Y+9	; 0x09
    365e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3660:	9b 85       	ldd	r25, Y+11	; 0x0b
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9f 83       	std	Y+7, r25	; 0x07
    366c:	8e 83       	std	Y+6, r24	; 0x06
    366e:	8e 81       	ldd	r24, Y+6	; 0x06
    3670:	9f 81       	ldd	r25, Y+7	; 0x07
    3672:	9b 83       	std	Y+3, r25	; 0x03
    3674:	8a 83       	std	Y+2, r24	; 0x02
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	9b 81       	ldd	r25, Y+3	; 0x03
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <LCD_voidDrawSpecialChar+0x186>
    367e:	9b 83       	std	Y+3, r25	; 0x03
    3680:	8a 83       	std	Y+2, r24	; 0x02
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3684:	69 89       	ldd	r22, Y+17	; 0x11
    3686:	7a 89       	ldd	r23, Y+18	; 0x12
    3688:	8b 89       	ldd	r24, Y+19	; 0x13
    368a:	9c 89       	ldd	r25, Y+20	; 0x14
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	88 8b       	std	Y+16, r24	; 0x10
    3696:	88 89       	ldd	r24, Y+16	; 0x10
    3698:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	8a 95       	dec	r24
    369e:	f1 f7       	brne	.-4      	; 0x369c <LCD_voidDrawSpecialChar+0x1a8>
    36a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    36a2:	19 8e       	std	Y+25, r1	; 0x19
    36a4:	0e c0       	rjmp	.+28     	; 0x36c2 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    36a6:	89 8d       	ldd	r24, Y+25	; 0x19
    36a8:	28 2f       	mov	r18, r24
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36b0:	fc 01       	movw	r30, r24
    36b2:	e2 0f       	add	r30, r18
    36b4:	f3 1f       	adc	r31, r19
    36b6:	80 81       	ld	r24, Z
    36b8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    36bc:	89 8d       	ldd	r24, Y+25	; 0x19
    36be:	8f 5f       	subi	r24, 0xFF	; 255
    36c0:	89 8f       	std	Y+25, r24	; 0x19
    36c2:	89 8d       	ldd	r24, Y+25	; 0x19
    36c4:	88 30       	cpi	r24, 0x08	; 8
    36c6:	78 f3       	brcs	.-34     	; 0x36a6 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    36c8:	6c 96       	adiw	r28, 0x1c	; 28
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	0f 92       	push	r0
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidSendChar>
}
    36ec:	0f 90       	pop	r0
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <KPD_voidInit>:

u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};     // rows -> output
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};	// columns -> input


void KPD_voidInit(void){
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	0f 92       	push	r0
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	20 c0       	rjmp	.+64     	; 0x3742 <KPD_voidInit+0x4e>
		if (Local_u8Count < 4) {
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	84 30       	cpi	r24, 0x04	; 4
    3706:	68 f4       	brcc	.+26     	; 0x3722 <KPD_voidInit+0x2e>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_OUTPUT);
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	fc 01       	movw	r30, r24
    3710:	e8 58       	subi	r30, 0x88	; 136
    3712:	fe 4f       	sbci	r31, 0xFE	; 254
    3714:	90 81       	ld	r25, Z
    3716:	82 e0       	ldi	r24, 0x02	; 2
    3718:	69 2f       	mov	r22, r25
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
    3720:	0d c0       	rjmp	.+26     	; 0x373c <KPD_voidInit+0x48>

		} else {
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	04 97       	sbiw	r24, 0x04	; 4
    372a:	fc 01       	movw	r30, r24
    372c:	e4 58       	subi	r30, 0x84	; 132
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	90 81       	ld	r25, Z
    3732:	82 e0       	ldi	r24, 0x02	; 2
    3734:	69 2f       	mov	r22, r25
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>


void KPD_voidInit(void){

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	8f 5f       	subi	r24, 0xFF	; 255
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	88 30       	cpi	r24, 0x08	; 8
    3746:	e8 f2       	brcs	.-70     	; 0x3702 <KPD_voidInit+0xe>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
		}

	}

	DIO_voidSetPortValue(KPD_PORT, 0xff);
    3748:	82 e0       	ldi	r24, 0x02	; 2
    374a:	6f ef       	ldi	r22, 0xFF	; 255
    374c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>

}
    3750:	0f 90       	pop	r0
    3752:	cf 91       	pop	r28
    3754:	df 91       	pop	r29
    3756:	08 95       	ret

00003758 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	63 97       	sbiw	r28, 0x13	; 19
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
    376c:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;
    376e:	8f ef       	ldi	r24, 0xFF	; 255
    3770:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    3772:	1b 8a       	std	Y+19, r1	; 0x13
    3774:	dd c0       	rjmp	.+442    	; 0x3930 <KPD_u8GetPressedKey+0x1d8>
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    3776:	8b 89       	ldd	r24, Y+19	; 0x13
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	fc 01       	movw	r30, r24
    377e:	e8 58       	subi	r30, 0x88	; 136
    3780:	fe 4f       	sbci	r31, 0xFE	; 254
    3782:	90 81       	ld	r25, Z
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	69 2f       	mov	r22, r25
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    378e:	1a 8a       	std	Y+18, r1	; 0x12
    3790:	b9 c0       	rjmp	.+370    	; 0x3904 <KPD_u8GetPressedKey+0x1ac>
			/* check if any button was pressed*/
			Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3792:	8a 89       	ldd	r24, Y+18	; 0x12
    3794:	88 2f       	mov	r24, r24
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	fc 01       	movw	r30, r24
    379a:	e4 58       	subi	r30, 0x84	; 132
    379c:	fe 4f       	sbci	r31, 0xFE	; 254
    379e:	90 81       	ld	r25, Z
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	69 2f       	mov	r22, r25
    37a4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    37a8:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8Pressed == 0){
    37aa:	89 89       	ldd	r24, Y+17	; 0x11
    37ac:	88 23       	and	r24, r24
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <KPD_u8GetPressedKey+0x5a>
    37b0:	a6 c0       	rjmp	.+332    	; 0x38fe <KPD_u8GetPressedKey+0x1a6>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a8 ec       	ldi	r26, 0xC8	; 200
    37b8:	b1 e4       	ldi	r27, 0x41	; 65
    37ba:	8b 87       	std	Y+11, r24	; 0x0b
    37bc:	9c 87       	std	Y+12, r25	; 0x0c
    37be:	ad 87       	std	Y+13, r26	; 0x0d
    37c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	8f 83       	std	Y+7, r24	; 0x07
    37dc:	98 87       	std	Y+8, r25	; 0x08
    37de:	a9 87       	std	Y+9, r26	; 0x09
    37e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <KPD_u8GetPressedKey+0xac>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <KPD_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <KPD_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6b 85       	ldd	r22, Y+11	; 0x0b
    381e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3820:	8d 85       	ldd	r24, Y+13	; 0x0d
    3822:	9e 85       	ldd	r25, Y+14	; 0x0e
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9e 83       	std	Y+6, r25	; 0x06
    3842:	8d 83       	std	Y+5, r24	; 0x05
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <KPD_u8GetPressedKey+0x10c>
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9c 83       	std	Y+4, r25	; 0x04
    384c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	9c 81       	ldd	r25, Y+4	; 0x04
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <KPD_u8GetPressedKey+0xfa>
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	9e 81       	ldd	r25, Y+6	; 0x06
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <KPD_u8GetPressedKey+0xee>
    386c:	14 c0       	rjmp	.+40     	; 0x3896 <KPD_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	6f 81       	ldd	r22, Y+7	; 0x07
    3870:	78 85       	ldd	r23, Y+8	; 0x08
    3872:	89 85       	ldd	r24, Y+9	; 0x09
    3874:	9a 85       	ldd	r25, Y+10	; 0x0a
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	9a 81       	ldd	r25, Y+2	; 0x02
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <KPD_u8GetPressedKey+0x136>
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	89 83       	std	Y+1, r24	; 0x01
				/* waite for debouncing*/
				_delay_ms(25);
				/* checking for noise*/
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3896:	8a 89       	ldd	r24, Y+18	; 0x12
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	fc 01       	movw	r30, r24
    389e:	e4 58       	subi	r30, 0x84	; 132
    38a0:	fe 4f       	sbci	r31, 0xFE	; 254
    38a2:	90 81       	ld	r25, Z
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	69 2f       	mov	r22, r25
    38a8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    38ac:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8Pressed == 0){
    38ae:	89 89       	ldd	r24, Y+17	; 0x11
    38b0:	88 23       	and	r24, r24
    38b2:	29 f5       	brne	.+74     	; 0x38fe <KPD_u8GetPressedKey+0x1a6>
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];
    38b4:	8b 89       	ldd	r24, Y+19	; 0x13
    38b6:	48 2f       	mov	r20, r24
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	8a 89       	ldd	r24, Y+18	; 0x12
    38bc:	28 2f       	mov	r18, r24
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	ca 01       	movw	r24, r20
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	82 0f       	add	r24, r18
    38cc:	93 1f       	adc	r25, r19
    38ce:	fc 01       	movw	r30, r24
    38d0:	e8 59       	subi	r30, 0x98	; 152
    38d2:	fe 4f       	sbci	r31, 0xFE	; 254
    38d4:	80 81       	ld	r24, Z
    38d6:	8f 87       	std	Y+15, r24	; 0x0f
    38d8:	0c c0       	rjmp	.+24     	; 0x38f2 <KPD_u8GetPressedKey+0x19a>

					/* handling long press*/
					while(Local_u8Pressed == 0){
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    38da:	8a 89       	ldd	r24, Y+18	; 0x12
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	fc 01       	movw	r30, r24
    38e2:	e4 58       	subi	r30, 0x84	; 132
    38e4:	fe 4f       	sbci	r31, 0xFE	; 254
    38e6:	90 81       	ld	r25, Z
    38e8:	82 e0       	ldi	r24, 0x02	; 2
    38ea:	69 2f       	mov	r22, r25
    38ec:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    38f0:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
				if(Local_u8Pressed == 0){
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];

					/* handling long press*/
					while(Local_u8Pressed == 0){
    38f2:	89 89       	ldd	r24, Y+17	; 0x11
    38f4:	88 23       	and	r24, r24
    38f6:	89 f3       	breq	.-30     	; 0x38da <KPD_u8GetPressedKey+0x182>
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
					}
					Local_u8Flag =1;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	88 8b       	std	Y+16, r24	; 0x10
    38fc:	07 c0       	rjmp	.+14     	; 0x390c <KPD_u8GetPressedKey+0x1b4>

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    38fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3900:	8f 5f       	subi	r24, 0xFF	; 255
    3902:	8a 8b       	std	Y+18, r24	; 0x12
    3904:	8a 89       	ldd	r24, Y+18	; 0x12
    3906:	84 30       	cpi	r24, 0x04	; 4
    3908:	08 f4       	brcc	.+2      	; 0x390c <KPD_u8GetPressedKey+0x1b4>
    390a:	43 cf       	rjmp	.-378    	; 0x3792 <KPD_u8GetPressedKey+0x3a>
					break;
				}
			}
		}

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    390c:	8b 89       	ldd	r24, Y+19	; 0x13
    390e:	88 2f       	mov	r24, r24
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	fc 01       	movw	r30, r24
    3914:	e8 58       	subi	r30, 0x88	; 136
    3916:	fe 4f       	sbci	r31, 0xFE	; 254
    3918:	90 81       	ld	r25, Z
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	69 2f       	mov	r22, r25
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		if (Local_u8Flag == 1) {break;}
    3924:	88 89       	ldd	r24, Y+16	; 0x10
    3926:	81 30       	cpi	r24, 0x01	; 1
    3928:	39 f0       	breq	.+14     	; 0x3938 <KPD_u8GetPressedKey+0x1e0>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    392a:	8b 89       	ldd	r24, Y+19	; 0x13
    392c:	8f 5f       	subi	r24, 0xFF	; 255
    392e:	8b 8b       	std	Y+19, r24	; 0x13
    3930:	8b 89       	ldd	r24, Y+19	; 0x13
    3932:	84 30       	cpi	r24, 0x04	; 4
    3934:	08 f4       	brcc	.+2      	; 0x3938 <KPD_u8GetPressedKey+0x1e0>
    3936:	1f cf       	rjmp	.-450    	; 0x3776 <KPD_u8GetPressedKey+0x1e>

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
		if (Local_u8Flag == 1) {break;}
	}

	return Local_u8ReturnedVal;
    3938:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    393a:	63 96       	adiw	r28, 0x13	; 19
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <EEPROM_VidWriteDataByte>:
#define uniquAdderess		0x50		// 0b01010000
/***********************************************/


void EEPROM_VidWriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8Data) // 0b01010011
{
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	61 97       	sbiw	r28, 0x11	; 17
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	98 8b       	std	Y+16, r25	; 0x10
    3962:	8f 87       	std	Y+15, r24	; 0x0f
    3964:	69 8b       	std	Y+17, r22	; 0x11
	/* Start condition */
	TWI_voidStartCondition();
    3966:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/* Send Byte Address with write operation */
	TWI_voidSlaveAddressWrite(uniquAdderess|(A2<<2)|(Copy_u16ByteAddress>>8));
    396a:	8f 85       	ldd	r24, Y+15	; 0x0f
    396c:	98 89       	ldd	r25, Y+16	; 0x10
    396e:	89 2f       	mov	r24, r25
    3970:	99 27       	eor	r25, r25
    3972:	80 65       	ori	r24, 0x50	; 80
    3974:	0e 94 96 0c 	call	0x192c	; 0x192c <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3978:	8f 85       	ldd	r24, Y+15	; 0x0f
    397a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/*Send Data*/
	TWI_voidMasterSendData(Copy_u8Data);
    397e:	89 89       	ldd	r24, Y+17	; 0x11
    3980:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/* stop condition */
	TWI_voidStopCondition();
    3984:	0e 94 81 0c 	call	0x1902	; 0x1902 <TWI_voidStopCondition>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a0 e2       	ldi	r26, 0x20	; 32
    398e:	b1 e4       	ldi	r27, 0x41	; 65
    3990:	8b 87       	std	Y+11, r24	; 0x0b
    3992:	9c 87       	std	Y+12, r25	; 0x0c
    3994:	ad 87       	std	Y+13, r26	; 0x0d
    3996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	6b 85       	ldd	r22, Y+11	; 0x0b
    399a:	7c 85       	ldd	r23, Y+12	; 0x0c
    399c:	8d 85       	ldd	r24, Y+13	; 0x0d
    399e:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	4a ef       	ldi	r20, 0xFA	; 250
    39a6:	54 e4       	ldi	r21, 0x44	; 68
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	8f 83       	std	Y+7, r24	; 0x07
    39b2:	98 87       	std	Y+8, r25	; 0x08
    39b4:	a9 87       	std	Y+9, r26	; 0x09
    39b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e8       	ldi	r20, 0x80	; 128
    39c6:	5f e3       	ldi	r21, 0x3F	; 63
    39c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39cc:	88 23       	and	r24, r24
    39ce:	2c f4       	brge	.+10     	; 0x39da <EEPROM_VidWriteDataByte+0x8e>
		__ticks = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9e 83       	std	Y+6, r25	; 0x06
    39d6:	8d 83       	std	Y+5, r24	; 0x05
    39d8:	3f c0       	rjmp	.+126    	; 0x3a58 <EEPROM_VidWriteDataByte+0x10c>
	else if (__tmp > 65535)
    39da:	6f 81       	ldd	r22, Y+7	; 0x07
    39dc:	78 85       	ldd	r23, Y+8	; 0x08
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	4f e7       	ldi	r20, 0x7F	; 127
    39e8:	57 e4       	ldi	r21, 0x47	; 71
    39ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ee:	18 16       	cp	r1, r24
    39f0:	4c f5       	brge	.+82     	; 0x3a44 <EEPROM_VidWriteDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9e 83       	std	Y+6, r25	; 0x06
    3a18:	8d 83       	std	Y+5, r24	; 0x05
    3a1a:	0f c0       	rjmp	.+30     	; 0x3a3a <EEPROM_VidWriteDataByte+0xee>
    3a1c:	88 ec       	ldi	r24, 0xC8	; 200
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9c 83       	std	Y+4, r25	; 0x04
    3a22:	8b 83       	std	Y+3, r24	; 0x03
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	9c 81       	ldd	r25, Y+4	; 0x04
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <EEPROM_VidWriteDataByte+0xdc>
    3a2c:	9c 83       	std	Y+4, r25	; 0x04
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <EEPROM_VidWriteDataByte+0xd0>
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <EEPROM_VidWriteDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <EEPROM_VidWriteDataByte+0x118>
    3a68:	9a 83       	std	Y+2, r25	; 0x02
    3a6a:	89 83       	std	Y+1, r24	; 0x01

	/* delay 5 ms for rewrite */
	_delay_ms(10);
}
    3a6c:	61 96       	adiw	r28, 0x11	; 17
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <EEPROM_u8ReadDataByte+0x6>
    3a84:	0f 92       	push	r0
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	9b 83       	std	Y+3, r25	; 0x03
    3a8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8data;
	/* Start condition */
	TWI_voidStartCondition();
    3a8e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/*Send Byte Address with Write operation*/
	TWI_voidSlaveAddressWrite((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
    3a94:	9b 81       	ldd	r25, Y+3	; 0x03
    3a96:	89 2f       	mov	r24, r25
    3a98:	99 27       	eor	r25, r25
    3a9a:	80 65       	ori	r24, 0x50	; 80
    3a9c:	0e 94 96 0c 	call	0x192c	; 0x192c <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/*Send Repeat start condition*/
	TWI_voidStartCondition();
    3aa6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/*Send Byte Address with Read operation*/
	TWI_voidSlaveAddressRead((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3aac:	9b 81       	ldd	r25, Y+3	; 0x03
    3aae:	89 2f       	mov	r24, r25
    3ab0:	99 27       	eor	r25, r25
    3ab2:	80 65       	ori	r24, 0x50	; 80
    3ab4:	0e 94 bf 0c 	call	0x197e	; 0x197e <TWI_voidSlaveAddressRead>

	Local_u8data = TWI_u8MasterReceiveData();
    3ab8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TWI_u8MasterReceiveData>
    3abc:	89 83       	std	Y+1, r24	; 0x01

	/* stop condition */
	TWI_voidStopCondition();
    3abe:	0e 94 81 0c 	call	0x1902	; 0x1902 <TWI_voidStopCondition>

	return Local_u8data;
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01

}
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <SSD_voidInit>:
#include "../../MCAL//DIO/DIO.h"
#include "SSD.h"



void SSD_voidInit(void){
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SSD_PORT,DIO_OUTPUT_PORT);
    3ad8:	83 e0       	ldi	r24, 0x03	; 3
    3ada:	6f ef       	ldi	r22, 0xFF	; 255
    3adc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_voidSetPortDirection>
}
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <SSD_voidKPDToSSD>:

void SSD_voidKPDToSSD(u8 Copy_u8Char){
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <SSD_voidKPDToSSD+0x6>
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Char){
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	3b 83       	std	Y+3, r19	; 0x03
    3afc:	2a 83       	std	Y+2, r18	; 0x02
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	85 33       	cpi	r24, 0x35	; 53
    3b04:	91 05       	cpc	r25, r1
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <SSD_voidKPDToSSD+0x24>
    3b08:	60 c0       	rjmp	.+192    	; 0x3bca <SSD_voidKPDToSSD+0xe4>
    3b0a:	2a 81       	ldd	r18, Y+2	; 0x02
    3b0c:	3b 81       	ldd	r19, Y+3	; 0x03
    3b0e:	26 33       	cpi	r18, 0x36	; 54
    3b10:	31 05       	cpc	r19, r1
    3b12:	0c f5       	brge	.+66     	; 0x3b56 <SSD_voidKPDToSSD+0x70>
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	9b 81       	ldd	r25, Y+3	; 0x03
    3b18:	82 33       	cpi	r24, 0x32	; 50
    3b1a:	91 05       	cpc	r25, r1
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <SSD_voidKPDToSSD+0x3a>
    3b1e:	46 c0       	rjmp	.+140    	; 0x3bac <SSD_voidKPDToSSD+0xc6>
    3b20:	2a 81       	ldd	r18, Y+2	; 0x02
    3b22:	3b 81       	ldd	r19, Y+3	; 0x03
    3b24:	23 33       	cpi	r18, 0x33	; 51
    3b26:	31 05       	cpc	r19, r1
    3b28:	5c f4       	brge	.+22     	; 0x3b40 <SSD_voidKPDToSSD+0x5a>
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2e:	80 33       	cpi	r24, 0x30	; 48
    3b30:	91 05       	cpc	r25, r1
    3b32:	91 f1       	breq	.+100    	; 0x3b98 <SSD_voidKPDToSSD+0xb2>
    3b34:	2a 81       	ldd	r18, Y+2	; 0x02
    3b36:	3b 81       	ldd	r19, Y+3	; 0x03
    3b38:	21 33       	cpi	r18, 0x31	; 49
    3b3a:	31 05       	cpc	r19, r1
    3b3c:	91 f1       	breq	.+100    	; 0x3ba2 <SSD_voidKPDToSSD+0xbc>
    3b3e:	63 c0       	rjmp	.+198    	; 0x3c06 <SSD_voidKPDToSSD+0x120>
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	83 33       	cpi	r24, 0x33	; 51
    3b46:	91 05       	cpc	r25, r1
    3b48:	b1 f1       	breq	.+108    	; 0x3bb6 <SSD_voidKPDToSSD+0xd0>
    3b4a:	2a 81       	ldd	r18, Y+2	; 0x02
    3b4c:	3b 81       	ldd	r19, Y+3	; 0x03
    3b4e:	24 33       	cpi	r18, 0x34	; 52
    3b50:	31 05       	cpc	r19, r1
    3b52:	b1 f1       	breq	.+108    	; 0x3bc0 <SSD_voidKPDToSSD+0xda>
    3b54:	58 c0       	rjmp	.+176    	; 0x3c06 <SSD_voidKPDToSSD+0x120>
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5a:	88 33       	cpi	r24, 0x38	; 56
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <SSD_voidKPDToSSD+0x7c>
    3b60:	43 c0       	rjmp	.+134    	; 0x3be8 <SSD_voidKPDToSSD+0x102>
    3b62:	2a 81       	ldd	r18, Y+2	; 0x02
    3b64:	3b 81       	ldd	r19, Y+3	; 0x03
    3b66:	29 33       	cpi	r18, 0x39	; 57
    3b68:	31 05       	cpc	r19, r1
    3b6a:	5c f4       	brge	.+22     	; 0x3b82 <SSD_voidKPDToSSD+0x9c>
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b70:	86 33       	cpi	r24, 0x36	; 54
    3b72:	91 05       	cpc	r25, r1
    3b74:	79 f1       	breq	.+94     	; 0x3bd4 <SSD_voidKPDToSSD+0xee>
    3b76:	2a 81       	ldd	r18, Y+2	; 0x02
    3b78:	3b 81       	ldd	r19, Y+3	; 0x03
    3b7a:	27 33       	cpi	r18, 0x37	; 55
    3b7c:	31 05       	cpc	r19, r1
    3b7e:	79 f1       	breq	.+94     	; 0x3bde <SSD_voidKPDToSSD+0xf8>
    3b80:	42 c0       	rjmp	.+132    	; 0x3c06 <SSD_voidKPDToSSD+0x120>
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	9b 81       	ldd	r25, Y+3	; 0x03
    3b86:	89 33       	cpi	r24, 0x39	; 57
    3b88:	91 05       	cpc	r25, r1
    3b8a:	99 f1       	breq	.+102    	; 0x3bf2 <SSD_voidKPDToSSD+0x10c>
    3b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b8e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b90:	23 34       	cpi	r18, 0x43	; 67
    3b92:	31 05       	cpc	r19, r1
    3b94:	99 f1       	breq	.+102    	; 0x3bfc <SSD_voidKPDToSSD+0x116>
    3b96:	37 c0       	rjmp	.+110    	; 0x3c06 <SSD_voidKPDToSSD+0x120>
	case '0': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3b98:	83 e0       	ldi	r24, 0x03	; 3
    3b9a:	6f e3       	ldi	r22, 0x3F	; 63
    3b9c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3ba0:	36 c0       	rjmp	.+108    	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '1': DIO_voidSetPortValue(SSD_PORT,ONE); break;
    3ba2:	83 e0       	ldi	r24, 0x03	; 3
    3ba4:	66 e0       	ldi	r22, 0x06	; 6
    3ba6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3baa:	31 c0       	rjmp	.+98     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '2': DIO_voidSetPortValue(SSD_PORT,TWO); break;
    3bac:	83 e0       	ldi	r24, 0x03	; 3
    3bae:	6b e5       	ldi	r22, 0x5B	; 91
    3bb0:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bb4:	2c c0       	rjmp	.+88     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '3': DIO_voidSetPortValue(SSD_PORT,THREE); break;
    3bb6:	83 e0       	ldi	r24, 0x03	; 3
    3bb8:	6f e4       	ldi	r22, 0x4F	; 79
    3bba:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bbe:	27 c0       	rjmp	.+78     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '4': DIO_voidSetPortValue(SSD_PORT,FOUR); break;
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
    3bc2:	66 e6       	ldi	r22, 0x66	; 102
    3bc4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bc8:	22 c0       	rjmp	.+68     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '5': DIO_voidSetPortValue(SSD_PORT,FIVE); break;
    3bca:	83 e0       	ldi	r24, 0x03	; 3
    3bcc:	6d e6       	ldi	r22, 0x6D	; 109
    3bce:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bd2:	1d c0       	rjmp	.+58     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '6': DIO_voidSetPortValue(SSD_PORT,SIX); break;
    3bd4:	83 e0       	ldi	r24, 0x03	; 3
    3bd6:	6d e7       	ldi	r22, 0x7D	; 125
    3bd8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bdc:	18 c0       	rjmp	.+48     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '7': DIO_voidSetPortValue(SSD_PORT,SEVEN); break;
    3bde:	83 e0       	ldi	r24, 0x03	; 3
    3be0:	67 e0       	ldi	r22, 0x07	; 7
    3be2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3be6:	13 c0       	rjmp	.+38     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '8': DIO_voidSetPortValue(SSD_PORT,EIGHT); break;
    3be8:	83 e0       	ldi	r24, 0x03	; 3
    3bea:	6f e7       	ldi	r22, 0x7F	; 127
    3bec:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bf0:	0e c0       	rjmp	.+28     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case '9': DIO_voidSetPortValue(SSD_PORT,NINE); break;
    3bf2:	83 e0       	ldi	r24, 0x03	; 3
    3bf4:	6f e6       	ldi	r22, 0x6F	; 111
    3bf6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3bfa:	09 c0       	rjmp	.+18     	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	case 'C': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3bfc:	83 e0       	ldi	r24, 0x03	; 3
    3bfe:	6f e3       	ldi	r22, 0x3F	; 63
    3c00:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3c04:	04 c0       	rjmp	.+8      	; 0x3c0e <SSD_voidKPDToSSD+0x128>
	default : DIO_voidSetPortValue(SSD_PORT,0b01001001); break;
    3c06:	83 e0       	ldi	r24, 0x03	; 3
    3c08:	69 e4       	ldi	r22, 0x49	; 73
    3c0a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	}
}
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <main>:
#include "LIB/STD_Types.h"
#include "MCAL/DIO/DIO.h"
#include <avr/io.h>
#include <util/delay.h>

int main(void){
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(DIO_PORTA,0xff);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	6f ef       	ldi	r22, 0xFF	; 255
    3c26:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_voidSetPortDirection>
	while(1){
		DIO_voidSetPortValue(DIO_PORTA,0xff);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	6f ef       	ldi	r22, 0xFF	; 255
    3c2e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3c32:	fb cf       	rjmp	.-10     	; 0x3c2a <main+0x10>

00003c34 <__udivmodsi4>:
    3c34:	a1 e2       	ldi	r26, 0x21	; 33
    3c36:	1a 2e       	mov	r1, r26
    3c38:	aa 1b       	sub	r26, r26
    3c3a:	bb 1b       	sub	r27, r27
    3c3c:	fd 01       	movw	r30, r26
    3c3e:	0d c0       	rjmp	.+26     	; 0x3c5a <__udivmodsi4_ep>

00003c40 <__udivmodsi4_loop>:
    3c40:	aa 1f       	adc	r26, r26
    3c42:	bb 1f       	adc	r27, r27
    3c44:	ee 1f       	adc	r30, r30
    3c46:	ff 1f       	adc	r31, r31
    3c48:	a2 17       	cp	r26, r18
    3c4a:	b3 07       	cpc	r27, r19
    3c4c:	e4 07       	cpc	r30, r20
    3c4e:	f5 07       	cpc	r31, r21
    3c50:	20 f0       	brcs	.+8      	; 0x3c5a <__udivmodsi4_ep>
    3c52:	a2 1b       	sub	r26, r18
    3c54:	b3 0b       	sbc	r27, r19
    3c56:	e4 0b       	sbc	r30, r20
    3c58:	f5 0b       	sbc	r31, r21

00003c5a <__udivmodsi4_ep>:
    3c5a:	66 1f       	adc	r22, r22
    3c5c:	77 1f       	adc	r23, r23
    3c5e:	88 1f       	adc	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	1a 94       	dec	r1
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <__udivmodsi4_loop>
    3c66:	60 95       	com	r22
    3c68:	70 95       	com	r23
    3c6a:	80 95       	com	r24
    3c6c:	90 95       	com	r25
    3c6e:	9b 01       	movw	r18, r22
    3c70:	ac 01       	movw	r20, r24
    3c72:	bd 01       	movw	r22, r26
    3c74:	cf 01       	movw	r24, r30
    3c76:	08 95       	ret

00003c78 <__prologue_saves__>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	ca 1b       	sub	r28, r26
    3ca2:	db 0b       	sbc	r29, r27
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	09 94       	ijmp

00003cb0 <__epilogue_restores__>:
    3cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cb2:	39 88       	ldd	r3, Y+17	; 0x11
    3cb4:	48 88       	ldd	r4, Y+16	; 0x10
    3cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cc6:	df 80       	ldd	r13, Y+7	; 0x07
    3cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cca:	fd 80       	ldd	r15, Y+5	; 0x05
    3ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cce:	1b 81       	ldd	r17, Y+3	; 0x03
    3cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cd4:	ce 0f       	add	r28, r30
    3cd6:	d1 1d       	adc	r29, r1
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	ed 01       	movw	r28, r26
    3ce4:	08 95       	ret

00003ce6 <_exit>:
    3ce6:	f8 94       	cli

00003ce8 <__stop_program>:
    3ce8:	ff cf       	rjmp	.-2      	; 0x3ce8 <__stop_program>
