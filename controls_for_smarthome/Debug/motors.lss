
motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00003e1c  00003eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800182  00800182  00003fd2  2**0
                  ALLOC
  3 .stab         000046bc  00000000  00000000  00003fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000188a  00000000  00000000  00008690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a0da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ddce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_10>
      2c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <main>
      8a:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_voidEnable>:
#include "../../LIB/BIT_Math.h"
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "WDT.h"

void WDT_voidEnable(u8 Copt_u8WaitingTime){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01

	/* enable watchdog */
	SET_BIT(WDTCR, WDE);
     ef6:	a1 e4       	ldi	r26, 0x41	; 65
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e4       	ldi	r30, 0x41	; 65
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	8c 93       	st	X, r24

	/* select prescaler */
	WDTCR &= 0b11111000;
     f04:	a1 e4       	ldi	r26, 0x41	; 65
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e1 e4       	ldi	r30, 0x41	; 65
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	8c 93       	st	X, r24
	WDTCR |= Copt_u8WaitingTime;
     f12:	a1 e4       	ldi	r26, 0x41	; 65
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e1 e4       	ldi	r30, 0x41	; 65
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	90 81       	ld	r25, Z
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	89 2b       	or	r24, r25
     f20:	8c 93       	st	X, r24

}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <WDT_voidDisable>:


void WDT_voidDisable(void){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDTCR |= (1<<WDTOE) | (1<<WDE);
     f32:	a1 e4       	ldi	r26, 0x41	; 65
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e4       	ldi	r30, 0x41	; 65
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 61       	ori	r24, 0x18	; 24
     f3e:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     f40:	e1 e4       	ldi	r30, 0x41	; 65
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	10 82       	st	Z, r1
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <UART_voidInit>:
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <UART_voidInit+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
     f58:	83 e3       	ldi	r24, 0x33	; 51
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9b 83       	std	Y+3, r25	; 0x03
     f5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
     f64:	e9 e2       	ldi	r30, 0x29	; 41
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
     f6c:	e0 e4       	ldi	r30, 0x40	; 64
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	89 2f       	mov	r24, r25
     f76:	99 27       	eor	r25, r25
     f78:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
     f7a:	ab e2       	ldi	r26, 0x2B	; 43
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e2       	ldi	r30, 0x2B	; 43
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
     f88:	ab e2       	ldi	r26, 0x2B	; 43
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	eb e2       	ldi	r30, 0x2B	; 43
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
     f96:	aa e2       	ldi	r26, 0x2A	; 42
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ea e2       	ldi	r30, 0x2A	; 42
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     fa4:	aa e2       	ldi	r26, 0x2A	; 42
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea e2       	ldi	r30, 0x2A	; 42
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 60       	ori	r24, 0x08	; 8
     fb0:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
     fb2:	aa e2       	ldi	r26, 0x2A	; 42
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e2       	ldi	r30, 0x2A	; 42
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	84 60       	ori	r24, 0x04	; 4
     fc4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 7b       	andi	r24, 0xBF	; 191
     fd0:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
     fea:	e0 e4       	ldi	r30, 0x40	; 64
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	80 83       	st	Z, r24

}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
    100a:	eb e2       	ldi	r30, 0x2B	; 43
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	82 95       	swap	r24
    1012:	86 95       	lsr	r24
    1014:	87 70       	andi	r24, 0x07	; 7
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	90 70       	andi	r25, 0x00	; 0
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	a1 f3       	breq	.-24     	; 0x100a <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
    1022:	ec e2       	ldi	r30, 0x2C	; 44
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 83       	st	Z, r24
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 23       	and	r24, r24
    1042:	dc f7       	brge	.-10     	; 0x103a <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
    1044:	ec e2       	ldi	r30, 0x2C	; 44
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#else
	SET_BIT(TCCR0, WGM00);
    1058:	a3 e5       	ldi	r26, 0x53	; 83
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e3 e5       	ldi	r30, 0x53	; 83
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	8c 93       	st	X, r24
#endif

}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
    1086:	e2 e5       	ldi	r30, 0x52	; 82
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 83       	st	Z, r24

}
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
    10a2:	a3 e5       	ldi	r26, 0x53	; 83
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	88 7f       	andi	r24, 0xF8	; 248
    10ae:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
    10b0:	a3 e5       	ldi	r26, 0x53	; 83
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e3 e5       	ldi	r30, 0x53	; 83
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	90 81       	ld	r25, Z
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	89 2b       	or	r24, r25
    10be:	8c 93       	st	X, r24

}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	41 f4       	brne	.+16     	; 0x10ea <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
    10da:	a9 e5       	ldi	r26, 0x59	; 89
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e9 e5       	ldi	r30, 0x59	; 89
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
    10ea:	a9 e5       	ldi	r26, 0x59	; 89
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e9 e5       	ldi	r30, 0x59	; 89
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	8c 93       	st	X, r24

}
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <TIM0_voidSetCompareMat+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <TIM0_voidSetCompareMat+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3c 83       	std	Y+4, r19	; 0x04
    1118:	2b 83       	std	Y+3, r18	; 0x03
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	c9 f0       	breq	.+50     	; 0x1156 <TIM0_voidSetCompareMat+0x56>
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	3c 81       	ldd	r19, Y+4	; 0x04
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	19 f1       	breq	.+70     	; 0x1174 <TIM0_voidSetCompareMat+0x74>
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	69 f5       	brne	.+90     	; 0x1192 <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 61       	ori	r24, 0x10	; 16
    1144:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8c 93       	st	X, r24
    1154:	2c c0       	rjmp	.+88     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 62       	ori	r24, 0x20	; 32
    1162:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7d       	andi	r24, 0xDF	; 223
    11ac:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    11ae:	ec e5       	ldi	r30, 0x5C	; 92
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	80 83       	st	Z, r24

}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <TIM0_voidPWMGenerator+0xa>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <TIM0_voidPWMGenerator+0x1a>
    11dc:	44 c0       	rjmp	.+136    	; 0x1266 <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
    11fa:	0c e5       	ldi	r16, 0x5C	; 92
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	aa 27       	eor	r26, r26
    1206:	97 fd       	sbrc	r25, 7
    1208:	a0 95       	com	r26
    120a:	ba 2f       	mov	r27, r26
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	48 ec       	ldi	r20, 0xC8	; 200
    1222:	52 e4       	ldi	r21, 0x42	; 66
    1224:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	53 ec       	ldi	r21, 0xC3	; 195
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	f8 01       	movw	r30, r16
    1262:	80 83       	st	Z, r24
    1264:	39 c0       	rjmp	.+114    	; 0x12d8 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 62       	ori	r24, 0x20	; 32
    1272:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7e       	andi	r24, 0xEF	; 239
    1280:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    1282:	0c e5       	ldi	r16, 0x5C	; 92
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	aa 27       	eor	r26, r26
    128e:	97 fd       	sbrc	r25, 7
    1290:	a0 95       	com	r26
    1292:	ba 2f       	mov	r27, r26
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	48 ec       	ldi	r20, 0xC8	; 200
    12aa:	52 e4       	ldi	r21, 0x42	; 66
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	53 e4       	ldi	r21, 0x43	; 67
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 83       	st	Z, r24
	}

#endif


}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    12f2:	ec e5       	ldi	r30, 0x5C	; 92
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	80 83       	st	Z, r24

}
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	41 f4       	brne	.+16     	; 0x1324 <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    1314:	a9 e5       	ldi	r26, 0x59	; 89
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e9 e5       	ldi	r30, 0x59	; 89
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	8c 93       	st	X, r24
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    1324:	a9 e5       	ldi	r26, 0x59	; 89
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e9 e5       	ldi	r30, 0x59	; 89
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8d 7f       	andi	r24, 0xFD	; 253
    1330:	8c 93       	st	X, r24

}
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	88 7f       	andi	r24, 0xF8	; 248
    134e:	8c 93       	st	X, r24

}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <TIM0_voidOvfCallback+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	90 93 85 01 	sts	0x0185, r25
    136c:	80 93 84 01 	sts	0x0184, r24
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <TIM0_voidCmpCallback+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	90 93 83 01 	sts	0x0183, r25
    1390:	80 93 82 01 	sts	0x0182, r24

}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <__vector_11>:


ISR(TIMER0_OVF_vect){
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    13c8:	e0 91 84 01 	lds	r30, 0x0184
    13cc:	f0 91 85 01 	lds	r31, 0x0185
    13d0:	09 95       	icall
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_10>:


ISR(TIMER0_COMP_vect){
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    1422:	e0 91 82 01 	lds	r30, 0x0182
    1426:	f0 91 83 01 	lds	r31, 0x0183
    142a:	09 95       	icall
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <SPI_voidInit>:
/*****************************************************/
#include "SPI.h"



void SPI_voidInit	(void){
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPSR, SPI2X);

#elif SPI_MODE == SPI_SLAVE_MODE

	/*1- Select order ==> MSB */
	CLR_BIT(SPCR , DORD);
    145a:	ad e2       	ldi	r26, 0x2D	; 45
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ed e2       	ldi	r30, 0x2D	; 45
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7d       	andi	r24, 0xDF	; 223
    1466:	8c 93       	st	X, r24

	/*2- select Slave mode */
	CLR_BIT(SPCR, MSTR);
    1468:	ad e2       	ldi	r26, 0x2D	; 45
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ed e2       	ldi	r30, 0x2D	; 45
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8f 7e       	andi	r24, 0xEF	; 239
    1474:	8c 93       	st	X, r24

	/*3- Clock Polarity & Phase ==> Rising_Falling ... Setup_Sample */
	CLR_BIT(SPCR , CPOL);
    1476:	ad e2       	ldi	r26, 0x2D	; 45
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ed e2       	ldi	r30, 0x2D	; 45
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPHA);
    1484:	ad e2       	ldi	r26, 0x2D	; 45
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ed e2       	ldi	r30, 0x2D	; 45
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	8c 93       	st	X, r24

#endif

	/* enable SPI */
	SET_BIT(SPCR, SPE);
    1492:	ad e2       	ldi	r26, 0x2D	; 45
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ed e2       	ldi	r30, 0x2D	; 45
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 64       	ori	r24, 0x40	; 64
    149e:	8c 93       	st	X, r24

}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <SPI_u8ReceiveData>:


u8   SPI_u8ReceiveData		(void){
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    14ae:	ee e2       	ldi	r30, 0x2E	; 46
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	88 23       	and	r24, r24
    14b6:	dc f7       	brge	.-10     	; 0x14ae <SPI_u8ReceiveData+0x8>

	/* Return data register */
	return SPDR;
    14b8:	ef e2       	ldi	r30, 0x2F	; 47
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z

}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <SPI_voidMasterSendData>:


void SPI_voidMasterSendData (u8 Copy_u8Data){
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	89 83       	std	Y+1, r24	; 0x01

	/* Start transmission */
	SPDR = Copy_u8Data;
    14d0:	ef e2       	ldi	r30, 0x2F	; 47
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    14d8:	ee e2       	ldi	r30, 0x2E	; 46
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	88 23       	and	r24, r24
    14e0:	dc f7       	brge	.-10     	; 0x14d8 <SPI_voidMasterSendData+0x14>

}
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <SPI_voidSalveSendData>:


void SPI_voidSalveSendData	(u8 Copy_u8Data){
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01

	SPDR = Copy_u8Data;
    14f6:	ef e2       	ldi	r30, 0x2F	; 47
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	80 83       	st	Z, r24

}
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <SPI_u8ReceiveTrans>:


u8   SPI_u8ReceiveTrans		(u8 Copy_u8Data){
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01

	/* send data */
	SPDR = Copy_u8Data;
    1512:	ef e2       	ldi	r30, 0x2F	; 47
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    151a:	ee e2       	ldi	r30, 0x2E	; 46
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	dc f7       	brge	.-10     	; 0x151a <SPI_u8ReceiveTrans+0x14>

	/* Return data register */
	return SPDR;
    1524:	ef e2       	ldi	r30, 0x2F	; 47
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
}
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <INT_voidEnable>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/interrupt.h>
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTINdex, u8 Copy_u8INTSense){
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	2a 97       	sbiw	r28, 0x0a	; 10
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8INTINdex) {
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3a 87       	std	Y+10, r19	; 0x0a
    1552:	29 87       	std	Y+9, r18	; 0x09
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <INT_voidEnable+0x2e>
    155e:	6d c0       	rjmp	.+218    	; 0x163a <INT_voidEnable+0x108>
    1560:	29 85       	ldd	r18, Y+9	; 0x09
    1562:	3a 85       	ldd	r19, Y+10	; 0x0a
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <INT_voidEnable+0x3a>
    156a:	c9 c0       	rjmp	.+402    	; 0x16fe <INT_voidEnable+0x1cc>
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	09 f0       	breq	.+2      	; 0x1576 <INT_voidEnable+0x44>
    1574:	e9 c0       	rjmp	.+466    	; 0x1748 <INT_voidEnable+0x216>
		case INT_INT0:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	38 87       	std	Y+8, r19	; 0x08
    157e:	2f 83       	std	Y+7, r18	; 0x07
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	21 f1       	breq	.+72     	; 0x15d2 <INT_voidEnable+0xa0>
    158a:	2f 81       	ldd	r18, Y+7	; 0x07
    158c:	38 85       	ldd	r19, Y+8	; 0x08
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <INT_voidEnable+0x6c>
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <INT_voidEnable+0x82>
    159c:	46 c0       	rjmp	.+140    	; 0x162a <INT_voidEnable+0xf8>
    159e:	2f 81       	ldd	r18, Y+7	; 0x07
    15a0:	38 85       	ldd	r19, Y+8	; 0x08
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	21 f1       	breq	.+72     	; 0x15f0 <INT_voidEnable+0xbe>
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	71 f1       	breq	.+92     	; 0x160e <INT_voidEnable+0xdc>
    15b2:	3b c0       	rjmp	.+118    	; 0x162a <INT_voidEnable+0xf8>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC00);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8e 7f       	andi	r24, 0xFE	; 254
    15c0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	82 60       	ori	r24, 0x02	; 2
    15ce:	8c 93       	st	X, r24
    15d0:	2c c0       	rjmp	.+88     	; 0x162a <INT_voidEnable+0xf8>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC00);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	81 60       	ori	r24, 0x01	; 1
    15de:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	82 60       	ori	r24, 0x02	; 2
    15ec:	8c 93       	st	X, r24
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <INT_voidEnable+0xf8>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC01);
    15f0:	a5 e5       	ldi	r26, 0x55	; 85
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e5       	ldi	r30, 0x55	; 85
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8d 7f       	andi	r24, 0xFD	; 253
    15fc:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC00);
    15fe:	a5 e5       	ldi	r26, 0x55	; 85
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e5       	ldi	r30, 0x55	; 85
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	81 60       	ori	r24, 0x01	; 1
    160a:	8c 93       	st	X, r24
    160c:	0e c0       	rjmp	.+28     	; 0x162a <INT_voidEnable+0xf8>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC00);
    160e:	a5 e5       	ldi	r26, 0x55	; 85
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e5       	ldi	r30, 0x55	; 85
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8e 7f       	andi	r24, 0xFE	; 254
    161a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    161c:	a5 e5       	ldi	r26, 0x55	; 85
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e5       	ldi	r30, 0x55	; 85
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8d 7f       	andi	r24, 0xFD	; 253
    1628:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 0 */
			SET_BIT(GICR, INT0);
    162a:	ab e5       	ldi	r26, 0x5B	; 91
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e5       	ldi	r30, 0x5B	; 91
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 64       	ori	r24, 0x40	; 64
    1636:	8c 93       	st	X, r24
    1638:	87 c0       	rjmp	.+270    	; 0x1748 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			/* Select sense */
			switch (Copy_u8INTSense) {
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	2d 83       	std	Y+5, r18	; 0x05
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	21 f1       	breq	.+72     	; 0x1696 <INT_voidEnable+0x164>
    164e:	2d 81       	ldd	r18, Y+5	; 0x05
    1650:	3e 81       	ldd	r19, Y+6	; 0x06
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <INT_voidEnable+0x130>
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	61 f0       	breq	.+24     	; 0x1678 <INT_voidEnable+0x146>
    1660:	46 c0       	rjmp	.+140    	; 0x16ee <INT_voidEnable+0x1bc>
    1662:	2d 81       	ldd	r18, Y+5	; 0x05
    1664:	3e 81       	ldd	r19, Y+6	; 0x06
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	21 f1       	breq	.+72     	; 0x16b4 <INT_voidEnable+0x182>
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	71 f1       	breq	.+92     	; 0x16d2 <INT_voidEnable+0x1a0>
    1676:	3b c0       	rjmp	.+118    	; 0x16ee <INT_voidEnable+0x1bc>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC10);
    1678:	a5 e5       	ldi	r26, 0x55	; 85
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e5       	ldi	r30, 0x55	; 85
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8b 7f       	andi	r24, 0xFB	; 251
    1684:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    1686:	a5 e5       	ldi	r26, 0x55	; 85
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e5       	ldi	r30, 0x55	; 85
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	88 60       	ori	r24, 0x08	; 8
    1692:	8c 93       	st	X, r24
    1694:	2c c0       	rjmp	.+88     	; 0x16ee <INT_voidEnable+0x1bc>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC10);
    1696:	a5 e5       	ldi	r26, 0x55	; 85
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e5       	ldi	r30, 0x55	; 85
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	84 60       	ori	r24, 0x04	; 4
    16a2:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    16a4:	a5 e5       	ldi	r26, 0x55	; 85
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e5       	ldi	r30, 0x55	; 85
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 60       	ori	r24, 0x08	; 8
    16b0:	8c 93       	st	X, r24
    16b2:	1d c0       	rjmp	.+58     	; 0x16ee <INT_voidEnable+0x1bc>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC11);
    16b4:	a5 e5       	ldi	r26, 0x55	; 85
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e5       	ldi	r30, 0x55	; 85
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	87 7f       	andi	r24, 0xF7	; 247
    16c0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC10);
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	84 60       	ori	r24, 0x04	; 4
    16ce:	8c 93       	st	X, r24
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <INT_voidEnable+0x1bc>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC10);
    16d2:	a5 e5       	ldi	r26, 0x55	; 85
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e5       	ldi	r30, 0x55	; 85
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8b 7f       	andi	r24, 0xFB	; 251
    16de:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    16e0:	a5 e5       	ldi	r26, 0x55	; 85
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e5       	ldi	r30, 0x55	; 85
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	87 7f       	andi	r24, 0xF7	; 247
    16ec:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 1 */
			SET_BIT(GICR, INT1);
    16ee:	ab e5       	ldi	r26, 0x5B	; 91
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	eb e5       	ldi	r30, 0x5B	; 91
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	80 68       	ori	r24, 0x80	; 128
    16fa:	8c 93       	st	X, r24
    16fc:	25 c0       	rjmp	.+74     	; 0x1748 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			/* Select sense */
			switch (Copy_u8INTSense) {
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	3c 83       	std	Y+4, r19	; 0x04
    1706:	2b 83       	std	Y+3, r18	; 0x03
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	31 f0       	breq	.+12     	; 0x171c <INT_voidEnable+0x1ea>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	21 30       	cpi	r18, 0x01	; 1
    1716:	31 05       	cpc	r19, r1
    1718:	49 f0       	breq	.+18     	; 0x172c <INT_voidEnable+0x1fa>
    171a:	0f c0       	rjmp	.+30     	; 0x173a <INT_voidEnable+0x208>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCSR, ISC2);
    171c:	a4 e5       	ldi	r26, 0x54	; 84
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e5       	ldi	r30, 0x54	; 84
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 7b       	andi	r24, 0xBF	; 191
    1728:	8c 93       	st	X, r24
    172a:	07 c0       	rjmp	.+14     	; 0x173a <INT_voidEnable+0x208>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCSR, ISC2);
    172c:	a4 e5       	ldi	r26, 0x54	; 84
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e4 e5       	ldi	r30, 0x54	; 84
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 64       	ori	r24, 0x40	; 64
    1738:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 2 */
			SET_BIT(GICR, INT2);
    173a:	ab e5       	ldi	r26, 0x5B	; 91
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	eb e5       	ldi	r30, 0x5B	; 91
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	8c 93       	st	X, r24
			break;
	}

}
    1748:	2a 96       	adiw	r28, 0x0a	; 10
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <INT_voidDisable>:



void INT_voidDisable(u8 Copy_u8INTINdex){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <INT_voidDisable+0x6>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8INTINdex) {
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3b 83       	std	Y+3, r19	; 0x03
    1770:	2a 83       	std	Y+2, r18	; 0x02
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	89 f0       	breq	.+34     	; 0x179e <INT_voidDisable+0x44>
    177c:	2a 81       	ldd	r18, Y+2	; 0x02
    177e:	3b 81       	ldd	r19, Y+3	; 0x03
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	a1 f0       	breq	.+40     	; 0x17ae <INT_voidDisable+0x54>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	b9 f4       	brne	.+46     	; 0x17bc <INT_voidDisable+0x62>
		case INT_INT0:
			CLR_BIT(GICR, INT0);
    178e:	ab e5       	ldi	r26, 0x5B	; 91
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	eb e5       	ldi	r30, 0x5B	; 91
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 7b       	andi	r24, 0xBF	; 191
    179a:	8c 93       	st	X, r24
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <INT_voidDisable+0x62>
			break;
		case INT_INT1:
			CLR_BIT(GICR, INT1);
    179e:	ab e5       	ldi	r26, 0x5B	; 91
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	eb e5       	ldi	r30, 0x5B	; 91
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 77       	andi	r24, 0x7F	; 127
    17aa:	8c 93       	st	X, r24
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <INT_voidDisable+0x62>
			break;
		case INT_INT2:
			CLR_BIT(GICR, INT2);
    17ae:	ab e5       	ldi	r26, 0x5B	; 91
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e5       	ldi	r30, 0x5B	; 91
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7d       	andi	r24, 0xDF	; 223
    17ba:	8c 93       	st	X, r24
			break;
	}

}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <ICU_voidInit>:


void (*ICU_pf) (void);


void ICU_voidInit (void){
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62

	/* Select Timer1 Normal Mode */
	CLR_BIT(TCCR1A, WGM10);
    17d0:	af e4       	ldi	r26, 0x4F	; 79
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ef e4       	ldi	r30, 0x4F	; 79
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8e 7f       	andi	r24, 0xFE	; 254
    17dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    17de:	af e4       	ldi	r26, 0x4F	; 79
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ef e4       	ldi	r30, 0x4F	; 79
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8d 7f       	andi	r24, 0xFD	; 253
    17ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    17ec:	ae e4       	ldi	r26, 0x4E	; 78
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    17fa:	ae e4       	ldi	r26, 0x4E	; 78
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ee e4       	ldi	r30, 0x4E	; 78
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 7e       	andi	r24, 0xEF	; 239
    1806:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    1808:	ae e4       	ldi	r26, 0x4E	; 78
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ee e4       	ldi	r30, 0x4E	; 78
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 7f       	andi	r24, 0xF8	; 248
    1814:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    1816:	ae e4       	ldi	r26, 0x4E	; 78
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ee e4       	ldi	r30, 0x4E	; 78
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24

	/* enable interrupt */
	SET_BIT(TIMSK, TICIE1);
    1824:	a9 e5       	ldi	r26, 0x59	; 89
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 e5       	ldi	r30, 0x59	; 89
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	SET_BIT(TCCR1B, ICES1);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24

}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <ICU_voidChangeTrigger+0x6>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8Trigger) {
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3b 83       	std	Y+3, r19	; 0x03
    185c:	2a 83       	std	Y+2, r18	; 0x02
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	9b 81       	ldd	r25, Y+3	; 0x03
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	31 f0       	breq	.+12     	; 0x1872 <ICU_voidChangeTrigger+0x2c>
    1866:	2a 81       	ldd	r18, Y+2	; 0x02
    1868:	3b 81       	ldd	r19, Y+3	; 0x03
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	49 f0       	breq	.+18     	; 0x1882 <ICU_voidChangeTrigger+0x3c>
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1);	break;
    1872:	ae e4       	ldi	r26, 0x4E	; 78
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ee e4       	ldi	r30, 0x4E	; 78
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	8c 93       	st	X, r24
    1880:	07 c0       	rjmp	.+14     	; 0x1890 <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  SET_BIT(TCCR1B, ICES1);	break;
    1882:	ae e4       	ldi	r26, 0x4E	; 78
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ee e4       	ldi	r30, 0x4E	; 78
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	8c 93       	st	X, r24
	}

}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(void (*Copy_pf) (void)){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <ICU_voidSetCallback+0x6>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01

	ICU_pf = Copy_pf;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	90 93 87 01 	sts	0x0187, r25
    18b2:	80 93 86 01 	sts	0x0186, r24

}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    18c8:	e6 e4       	ldi	r30, 0x46	; 70
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62

	/* disable interrupt */
	CLR_BIT(TIMSK, TICIE1);
    18de:	a9 e5       	ldi	r26, 0x59	; 89
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e9 e5       	ldi	r30, 0x59	; 89
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7d       	andi	r24, 0xDF	; 223
    18ea:	8c 93       	st	X, r24

}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	2f 93       	push	r18
    18fe:	3f 93       	push	r19
    1900:	4f 93       	push	r20
    1902:	5f 93       	push	r21
    1904:	6f 93       	push	r22
    1906:	7f 93       	push	r23
    1908:	8f 93       	push	r24
    190a:	9f 93       	push	r25
    190c:	af 93       	push	r26
    190e:	bf 93       	push	r27
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62

	ICU_pf();
    191c:	e0 91 86 01 	lds	r30, 0x0186
    1920:	f0 91 87 01 	lds	r31, 0x0187
    1924:	09 95       	icall

}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	7f 91       	pop	r23
    1938:	6f 91       	pop	r22
    193a:	5f 91       	pop	r21
    193c:	4f 91       	pop	r20
    193e:	3f 91       	pop	r19
    1940:	2f 91       	pop	r18
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <TWI_voidMasterInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/io.h>
#include "I2C.h"

void TWI_voidMasterInit			(void){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62

	/* Set prescaler value ==> 1 */
	CLR_BIT(TWSR, TWPS0);
    1954:	a1 e2       	ldi	r26, 0x21	; 33
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e1 e2       	ldi	r30, 0x21	; 33
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8e 7f       	andi	r24, 0xFE	; 254
    1960:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWPS1);
    1962:	a1 e2       	ldi	r26, 0x21	; 33
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e1 e2       	ldi	r30, 0x21	; 33
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	8c 93       	st	X, r24

	/* frequency ==> 200 KHZ  >>> from the equation ==> 12 */
	TWBR = 12;
    1970:	e0 e2       	ldi	r30, 0x20	; 32
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    1978:	a6 e5       	ldi	r26, 0x56	; 86
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e6 e5       	ldi	r30, 0x56	; 86
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 64       	ori	r24, 0x40	; 64
    1984:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1986:	a6 e5       	ldi	r26, 0x56	; 86
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e6 e5       	ldi	r30, 0x56	; 86
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	8c 93       	st	X, r24

}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <TWI_voidSlaveInit>:


void TWI_voidSlaveInit			(u8 Copy_u8Address){
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01

	/* set slave address >> Reg address */
	TWAR = Copy_u8Address<<1;
    19a6:	e2 e2       	ldi	r30, 0x22	; 34
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	88 0f       	add	r24, r24
    19ae:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 64       	ori	r24, 0x40	; 64
    19bc:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    19be:	a6 e5       	ldi	r26, 0x56	; 86
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e6 e5       	ldi	r30, 0x56	; 86
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	84 60       	ori	r24, 0x04	; 4
    19ca:	8c 93       	st	X, r24

}
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <TWI_voidStartCondition>:


void TWI_voidStartCondition		(void){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    19dc:	e6 e5       	ldi	r30, 0x56	; 86
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	84 ea       	ldi	r24, 0xA4	; 164
    19e2:	80 83       	st	Z, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    19e4:	e6 e5       	ldi	r30, 0x56	; 86
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	88 23       	and	r24, r24
    19ec:	dc f7       	brge	.-10     	; 0x19e4 <TWI_voidStartCondition+0x10>

}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <TWI_voidStopCondition>:


void TWI_voidStopCondition		(void){
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	SET_BIT(TWCR, TWSTO);
    19fc:	a6 e5       	ldi	r26, 0x56	; 86
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e5       	ldi	r30, 0x56	; 86
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 61       	ori	r24, 0x10	; 16
    1a08:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);
    1a0a:	a6 e5       	ldi	r26, 0x56	; 86
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e6 e5       	ldi	r30, 0x56	; 86
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 68       	ori	r24, 0x80	; 128
    1a16:	8c 93       	st	X, r24
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <TWI_voidSlaveAddressWrite>:


void TWI_voidSlaveAddressWrite	(u8 Copy_u8SlaveAddress){
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1a2a:	e3 e2       	ldi	r30, 0x23	; 35
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 0f       	add	r24, r24
    1a32:	80 83       	st	Z, r24
	CLR_BIT(TWDR, 0);
    1a34:	a3 e2       	ldi	r26, 0x23	; 35
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e3 e2       	ldi	r30, 0x23	; 35
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1a42:	a6 e5       	ldi	r26, 0x56	; 86
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e6 e5       	ldi	r30, 0x56	; 86
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a50:	a6 e5       	ldi	r26, 0x56	; 86
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e6 e5       	ldi	r30, 0x56	; 86
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 68       	ori	r24, 0x80	; 128
    1a5c:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 23       	and	r24, r24
    1a66:	dc f7       	brge	.-10     	; 0x1a5e <TWI_voidSlaveAddressWrite+0x40>

}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <TWI_voidSlaveAddressRead>:


void TWI_voidSlaveAddressRead	(u8 Copy_u8SlaveAddress){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1a7c:	e3 e2       	ldi	r30, 0x23	; 35
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	88 0f       	add	r24, r24
    1a84:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0);
    1a86:	a3 e2       	ldi	r26, 0x23	; 35
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e3 e2       	ldi	r30, 0x23	; 35
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1a94:	a6 e5       	ldi	r26, 0x56	; 86
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e6 e5       	ldi	r30, 0x56	; 86
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1aa2:	a6 e5       	ldi	r26, 0x56	; 86
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e6 e5       	ldi	r30, 0x56	; 86
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1ab0:	e6 e5       	ldi	r30, 0x56	; 86
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 23       	and	r24, r24
    1ab8:	dc f7       	brge	.-10     	; 0x1ab0 <TWI_voidSlaveAddressRead+0x40>


}
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <TWI_voidMasterSendData>:


void TWI_voidMasterSendData 	(u8 Copy_u8Data){
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8Data;
    1ace:	e3 e2       	ldi	r30, 0x23	; 35
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	80 83       	st	Z, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1ad6:	a6 e5       	ldi	r26, 0x56	; 86
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e6 e5       	ldi	r30, 0x56	; 86
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1ae4:	e6 e5       	ldi	r30, 0x56	; 86
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	dc f7       	brge	.-10     	; 0x1ae4 <TWI_voidMasterSendData+0x22>

}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <TWI_u8MasterReceiveData>:


u8	 TWI_u8MasterReceiveData	(void){
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1afe:	a6 e5       	ldi	r26, 0x56	; 86
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e6 e5       	ldi	r30, 0x56	; 86
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1b0c:	e6 e5       	ldi	r30, 0x56	; 86
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	88 23       	and	r24, r24
    1b14:	dc f7       	brge	.-10     	; 0x1b0c <TWI_u8MasterReceiveData+0x16>

	return TWDR;
    1b16:	e3 e2       	ldi	r30, 0x23	; 35
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z

}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <TWI_u8SlaveReceiveData>:


u8	 TWI_u8SlaveReceiveData		(void){
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62

	while((TWSR & 0xF8) != 0x60);
    1b2a:	e1 e2       	ldi	r30, 0x21	; 33
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	88 7f       	andi	r24, 0xF8	; 248
    1b36:	90 70       	andi	r25, 0x00	; 0
    1b38:	80 36       	cpi	r24, 0x60	; 96
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	b1 f7       	brne	.-20     	; 0x1b2a <TWI_u8SlaveReceiveData+0x8>

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1b3e:	a6 e5       	ldi	r26, 0x56	; 86
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e6 e5       	ldi	r30, 0x56	; 86
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1b4c:	e6 e5       	ldi	r30, 0x56	; 86
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	88 23       	and	r24, r24
    1b54:	dc f7       	brge	.-10     	; 0x1b4c <TWI_u8SlaveReceiveData+0x2a>

	return TWDR;
    1b56:	e3 e2       	ldi	r30, 0x23	; 35
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z

}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <DIO_voidSetPortDirection>:
#include "../../LIB/STD_types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <DIO_voidSetPortDirection+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <DIO_voidSetPortDirection+0x8>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3c 83       	std	Y+4, r19	; 0x04
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	d1 f0       	breq	.+52     	; 0x1bba <DIO_voidSetPortDirection+0x58>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <DIO_voidSetPortDirection+0x38>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	61 f0       	breq	.+24     	; 0x1bb0 <DIO_voidSetPortDirection+0x4e>
    1b98:	1e c0       	rjmp	.+60     	; 0x1bd6 <DIO_voidSetPortDirection+0x74>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <DIO_voidSetPortDirection+0x62>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	81 f0       	breq	.+32     	; 0x1bce <DIO_voidSetPortDirection+0x6c>
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTA:		DDRA = Copy_u8Direction;	break;
    1bb0:	ea e3       	ldi	r30, 0x3A	; 58
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:		DDRB = Copy_u8Direction;	break;
    1bba:	e7 e3       	ldi	r30, 0x37	; 55
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:		DDRC = Copy_u8Direction;	break;
    1bc4:	e4 e3       	ldi	r30, 0x34	; 52
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:		DDRD = Copy_u8Direction;	break;
    1bce:	e1 e3       	ldi	r30, 0x31	; 49
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
	}

}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_voidSetPortValue+0x6>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <DIO_voidSetPortValue+0x8>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	d1 f0       	breq	.+52     	; 0x1c3c <DIO_voidSetPortValue+0x58>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <DIO_voidSetPortValue+0x38>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <DIO_voidSetPortValue+0x4e>
    1c1a:	1e c0       	rjmp	.+60     	; 0x1c58 <DIO_voidSetPortValue+0x74>
    1c1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <DIO_voidSetPortValue+0x62>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <DIO_voidSetPortValue+0x6c>
    1c30:	13 c0       	rjmp	.+38     	; 0x1c58 <DIO_voidSetPortValue+0x74>
	case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    1c32:	eb e3       	ldi	r30, 0x3B	; 59
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	80 83       	st	Z, r24
    1c3a:	0e c0       	rjmp	.+28     	; 0x1c58 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    1c50:	e2 e3       	ldi	r30, 0x32	; 50
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	27 97       	sbiw	r28, 0x07	; 7
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	6a 83       	std	Y+2, r22	; 0x02
    1c7e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_OUTPUT){
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <DIO_voidSetPinDirection+0x22>
    1c86:	6f c0       	rjmp	.+222    	; 0x1d66 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8Port){
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3f 83       	std	Y+7, r19	; 0x07
    1c90:	2e 83       	std	Y+6, r18	; 0x06
    1c92:	8e 81       	ldd	r24, Y+6	; 0x06
    1c94:	9f 81       	ldd	r25, Y+7	; 0x07
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	49 f1       	breq	.+82     	; 0x1cee <DIO_voidSetPinDirection+0x88>
    1c9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <DIO_voidSetPinDirection+0x4a>
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <DIO_voidSetPinDirection+0x60>
    1cae:	ce c0       	rjmp	.+412    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
    1cb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	71 f1       	breq	.+92     	; 0x1d16 <DIO_voidSetPinDirection+0xb0>
    1cba:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	e9 f1       	breq	.+122    	; 0x1d3e <DIO_voidSetPinDirection+0xd8>
    1cc4:	c3 c0       	rjmp	.+390    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		SET_BIT(DDRA,Copy_u8Pin);		break;
    1cc6:	aa e3       	ldi	r26, 0x3A	; 58
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DIO_voidSetPinDirection+0x7e>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DIO_voidSetPinDirection+0x7a>
    1ce8:	84 2b       	or	r24, r20
    1cea:	8c 93       	st	X, r24
    1cec:	af c0       	rjmp	.+350    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		SET_BIT(DDRB,Copy_u8Pin);		break;
    1cee:	a7 e3       	ldi	r26, 0x37	; 55
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e7 e3       	ldi	r30, 0x37	; 55
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_voidSetPinDirection+0xa6>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <DIO_voidSetPinDirection+0xa2>
    1d10:	84 2b       	or	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	9b c0       	rjmp	.+310    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		SET_BIT(DDRC,Copy_u8Pin);		break;
    1d16:	a4 e3       	ldi	r26, 0x34	; 52
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e4 e3       	ldi	r30, 0x34	; 52
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_voidSetPinDirection+0xce>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_voidSetPinDirection+0xca>
    1d38:	84 2b       	or	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	87 c0       	rjmp	.+270    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		SET_BIT(DDRD,Copy_u8Pin);		break;
    1d3e:	a1 e3       	ldi	r26, 0x31	; 49
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e1 e3       	ldi	r30, 0x31	; 49
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_voidSetPinDirection+0xf6>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_voidSetPinDirection+0xf2>
    1d60:	84 2b       	or	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	73 c0       	rjmp	.+230    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3d 83       	std	Y+5, r19	; 0x05
    1d6e:	2c 83       	std	Y+4, r18	; 0x04
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	59 f1       	breq	.+86     	; 0x1dd0 <DIO_voidSetPinDirection+0x16a>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <DIO_voidSetPinDirection+0x128>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f0       	breq	.+26     	; 0x1da6 <DIO_voidSetPinDirection+0x140>
    1d8c:	5f c0       	rjmp	.+190    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
    1d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d90:	3d 81       	ldd	r19, Y+5	; 0x05
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	89 f1       	breq	.+98     	; 0x1dfa <DIO_voidSetPinDirection+0x194>
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <DIO_voidSetPinDirection+0x13e>
    1da2:	40 c0       	rjmp	.+128    	; 0x1e24 <DIO_voidSetPinDirection+0x1be>
    1da4:	53 c0       	rjmp	.+166    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		CLR_BIT(DDRA,Copy_u8Pin);		break;
    1da6:	aa e3       	ldi	r26, 0x3A	; 58
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ea e3       	ldi	r30, 0x3A	; 58
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_voidSetPinDirection+0x15e>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_voidSetPinDirection+0x15a>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	3e c0       	rjmp	.+124    	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		CLR_BIT(DDRB,Copy_u8Pin);		break;
    1dd0:	a7 e3       	ldi	r26, 0x37	; 55
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e7 e3       	ldi	r30, 0x37	; 55
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_voidSetPinDirection+0x188>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_voidSetPinDirection+0x184>
    1df2:	80 95       	com	r24
    1df4:	84 23       	and	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	29 c0       	rjmp	.+82     	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		CLR_BIT(DDRC,Copy_u8Pin);		break;
    1dfa:	a4 e3       	ldi	r26, 0x34	; 52
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e4 e3       	ldi	r30, 0x34	; 52
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_voidSetPinDirection+0x1b2>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_voidSetPinDirection+0x1ae>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		CLR_BIT(DDRD,Copy_u8Pin);		break;
    1e24:	a1 e3       	ldi	r26, 0x31	; 49
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e1 e3       	ldi	r30, 0x31	; 49
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_voidSetPinDirection+0x1dc>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_voidSetPinDirection+0x1d8>
    1e46:	80 95       	com	r24
    1e48:	84 23       	and	r24, r20
    1e4a:	8c 93       	st	X, r24
		}
	}
}
    1e4c:	27 96       	adiw	r28, 0x07	; 7
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	27 97       	sbiw	r28, 0x07	; 7
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	6a 83       	std	Y+2, r22	; 0x02
    1e76:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH){
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <DIO_voidSetPinValue+0x22>
    1e7e:	6f c0       	rjmp	.+222    	; 0x1f5e <DIO_voidSetPinValue+0x100>
		switch(Copy_u8Port){
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3f 83       	std	Y+7, r19	; 0x07
    1e88:	2e 83       	std	Y+6, r18	; 0x06
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	49 f1       	breq	.+82     	; 0x1ee6 <DIO_voidSetPinValue+0x88>
    1e94:	2e 81       	ldd	r18, Y+6	; 0x06
    1e96:	3f 81       	ldd	r19, Y+7	; 0x07
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <DIO_voidSetPinValue+0x4a>
    1e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 f0       	breq	.+24     	; 0x1ebe <DIO_voidSetPinValue+0x60>
    1ea6:	ce c0       	rjmp	.+412    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
    1ea8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	71 f1       	breq	.+92     	; 0x1f0e <DIO_voidSetPinValue+0xb0>
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	e9 f1       	breq	.+122    	; 0x1f36 <DIO_voidSetPinValue+0xd8>
    1ebc:	c3 c0       	rjmp	.+390    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		SET_BIT(PORTA,Copy_u8Pin);		break;
    1ebe:	ab e3       	ldi	r26, 0x3B	; 59
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_voidSetPinValue+0x7e>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_voidSetPinValue+0x7a>
    1ee0:	84 2b       	or	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	af c0       	rjmp	.+350    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		SET_BIT(PORTB,Copy_u8Pin);		break;
    1ee6:	a8 e3       	ldi	r26, 0x38	; 56
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e8 e3       	ldi	r30, 0x38	; 56
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_voidSetPinValue+0xa6>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_voidSetPinValue+0xa2>
    1f08:	84 2b       	or	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	9b c0       	rjmp	.+310    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		SET_BIT(PORTC,Copy_u8Pin);		break;
    1f0e:	a5 e3       	ldi	r26, 0x35	; 53
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e3       	ldi	r30, 0x35	; 53
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_voidSetPinValue+0xce>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_voidSetPinValue+0xca>
    1f30:	84 2b       	or	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	87 c0       	rjmp	.+270    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		SET_BIT(PORTD,Copy_u8Pin);		break;
    1f36:	a2 e3       	ldi	r26, 0x32	; 50
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_voidSetPinValue+0xf6>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_voidSetPinValue+0xf2>
    1f58:	84 2b       	or	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	73 c0       	rjmp	.+230    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3d 83       	std	Y+5, r19	; 0x05
    1f66:	2c 83       	std	Y+4, r18	; 0x04
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	59 f1       	breq	.+86     	; 0x1fc8 <DIO_voidSetPinValue+0x16a>
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <DIO_voidSetPinValue+0x128>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	69 f0       	breq	.+26     	; 0x1f9e <DIO_voidSetPinValue+0x140>
    1f84:	5f c0       	rjmp	.+190    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	89 f1       	breq	.+98     	; 0x1ff2 <DIO_voidSetPinValue+0x194>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_voidSetPinValue+0x13e>
    1f9a:	40 c0       	rjmp	.+128    	; 0x201c <DIO_voidSetPinValue+0x1be>
    1f9c:	53 c0       	rjmp	.+166    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		CLR_BIT(PORTA,Copy_u8Pin);		break;
    1f9e:	ab e3       	ldi	r26, 0x3B	; 59
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e3       	ldi	r30, 0x3B	; 59
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <DIO_voidSetPinValue+0x15e>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <DIO_voidSetPinValue+0x15a>
    1fc0:	80 95       	com	r24
    1fc2:	84 23       	and	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	3e c0       	rjmp	.+124    	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		CLR_BIT(PORTB,Copy_u8Pin);		break;
    1fc8:	a8 e3       	ldi	r26, 0x38	; 56
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e8 e3       	ldi	r30, 0x38	; 56
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_voidSetPinValue+0x188>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_voidSetPinValue+0x184>
    1fea:	80 95       	com	r24
    1fec:	84 23       	and	r24, r20
    1fee:	8c 93       	st	X, r24
    1ff0:	29 c0       	rjmp	.+82     	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		CLR_BIT(PORTC,Copy_u8Pin);		break;
    1ff2:	a5 e3       	ldi	r26, 0x35	; 53
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e5 e3       	ldi	r30, 0x35	; 53
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_voidSetPinValue+0x1b2>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_voidSetPinValue+0x1ae>
    2014:	80 95       	com	r24
    2016:	84 23       	and	r24, r20
    2018:	8c 93       	st	X, r24
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		CLR_BIT(PORTD,Copy_u8Pin);		break;
    201c:	a2 e3       	ldi	r26, 0x32	; 50
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e2 e3       	ldi	r30, 0x32	; 50
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_voidSetPinValue+0x1dc>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_voidSetPinValue+0x1d8>
    203e:	80 95       	com	r24
    2040:	84 23       	and	r24, r20
    2042:	8c 93       	st	X, r24
		}
	}
}
    2044:	27 96       	adiw	r28, 0x07	; 7
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue       (u8 Copy_u8Port, u8 Copy_u8Pin){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <DIO_u8GetPinValue+0x6>
    205c:	00 d0       	rcall	.+0      	; 0x205e <DIO_u8GetPinValue+0x8>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
		switch(Copy_u8Port){
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	3d 83       	std	Y+5, r19	; 0x05
    2070:	2c 83       	std	Y+4, r18	; 0x04
    2072:	4c 81       	ldd	r20, Y+4	; 0x04
    2074:	5d 81       	ldd	r21, Y+5	; 0x05
    2076:	41 30       	cpi	r20, 0x01	; 1
    2078:	51 05       	cpc	r21, r1
    207a:	41 f1       	breq	.+80     	; 0x20cc <DIO_u8GetPinValue+0x76>
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	91 05       	cpc	r25, r1
    2084:	34 f4       	brge	.+12     	; 0x2092 <DIO_u8GetPinValue+0x3c>
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	3d 81       	ldd	r19, Y+5	; 0x05
    208a:	21 15       	cp	r18, r1
    208c:	31 05       	cpc	r19, r1
    208e:	61 f0       	breq	.+24     	; 0x20a8 <DIO_u8GetPinValue+0x52>
    2090:	52 c0       	rjmp	.+164    	; 0x2136 <DIO_u8GetPinValue+0xe0>
    2092:	4c 81       	ldd	r20, Y+4	; 0x04
    2094:	5d 81       	ldd	r21, Y+5	; 0x05
    2096:	42 30       	cpi	r20, 0x02	; 2
    2098:	51 05       	cpc	r21, r1
    209a:	51 f1       	breq	.+84     	; 0x20f0 <DIO_u8GetPinValue+0x9a>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	83 30       	cpi	r24, 0x03	; 3
    20a2:	91 05       	cpc	r25, r1
    20a4:	b9 f1       	breq	.+110    	; 0x2114 <DIO_u8GetPinValue+0xbe>
    20a6:	47 c0       	rjmp	.+142    	; 0x2136 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTA:		value = GET_BIT(PINA,Copy_u8Pin);		break;
    20a8:	e9 e3       	ldi	r30, 0x39	; 57
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a9 01       	movw	r20, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <DIO_u8GetPinValue+0x6a>
    20bc:	55 95       	asr	r21
    20be:	47 95       	ror	r20
    20c0:	8a 95       	dec	r24
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <DIO_u8GetPinValue+0x66>
    20c4:	ca 01       	movw	r24, r20
    20c6:	81 70       	andi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	35 c0       	rjmp	.+106    	; 0x2136 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB:		value = GET_BIT(PINB,Copy_u8Pin);		break;
    20cc:	e6 e3       	ldi	r30, 0x36	; 54
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a9 01       	movw	r20, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_u8GetPinValue+0x8e>
    20e0:	55 95       	asr	r21
    20e2:	47 95       	ror	r20
    20e4:	8a 95       	dec	r24
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_u8GetPinValue+0x8a>
    20e8:	ca 01       	movw	r24, r20
    20ea:	81 70       	andi	r24, 0x01	; 1
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	23 c0       	rjmp	.+70     	; 0x2136 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC:		value = GET_BIT(PINC,Copy_u8Pin);		break;
    20f0:	e3 e3       	ldi	r30, 0x33	; 51
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a9 01       	movw	r20, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_u8GetPinValue+0xb2>
    2104:	55 95       	asr	r21
    2106:	47 95       	ror	r20
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_u8GetPinValue+0xae>
    210c:	ca 01       	movw	r24, r20
    210e:	81 70       	andi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	11 c0       	rjmp	.+34     	; 0x2136 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD:		value = GET_BIT(PIND,Copy_u8Pin);		break;
    2114:	e0 e3       	ldi	r30, 0x30	; 48
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a9 01       	movw	r20, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_u8GetPinValue+0xd6>
    2128:	55 95       	asr	r21
    212a:	47 95       	ror	r20
    212c:	8a 95       	dec	r24
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_u8GetPinValue+0xd2>
    2130:	ca 01       	movw	r24, r20
    2132:	81 70       	andi	r24, 0x01	; 1
    2134:	89 83       	std	Y+1, r24	; 0x01
		}
	return value;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <ADC_voidInit>:
#define ADC_AREF		1
#define ADC_2_56_V		2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	0f 92       	push	r0
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	89 83       	std	Y+1, r24	; 0x01

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
    2154:	a6 e2       	ldi	r26, 0x26	; 38
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e6 e2       	ldi	r30, 0x26	; 38
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 68       	ori	r24, 0x80	; 128
    2160:	8c 93       	st	X, r24

	/* Select Vref */
#if ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
    2162:	a7 e2       	ldi	r26, 0x27	; 39
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 e2       	ldi	r30, 0x27	; 39
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 64       	ori	r24, 0x40	; 64
    216e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    2170:	a7 e2       	ldi	r26, 0x27	; 39
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e7 e2       	ldi	r30, 0x27	; 39
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 77       	andi	r24, 0x7F	; 127
    217c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#endif

	/* select right adjust */
	CLR_BIT(ADMUX, ADLAR);
    217e:	a7 e2       	ldi	r26, 0x27	; 39
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e2       	ldi	r30, 0x27	; 39
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8f 7d       	andi	r24, 0xDF	; 223
    218a:	8c 93       	st	X, r24

	/* prescaler */
	ADCSRA &= 0b11111000;
    218c:	a6 e2       	ldi	r26, 0x26	; 38
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e6 e2       	ldi	r30, 0x26	; 38
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	88 7f       	andi	r24, 0xF8	; 248
    2198:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler; // 0b00000110
    219a:	a6 e2       	ldi	r26, 0x26	; 38
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e6 e2       	ldi	r30, 0x26	; 38
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	90 81       	ld	r25, Z
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	89 2b       	or	r24, r25
    21a8:	8c 93       	st	X, r24

}
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <ADC_u16GetDigitalValue>:


u16  ADC_u16GetDigitalValue(u8 Copy_u8Channel){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01

	/* select Channel */
	ADMUX &= 0b11100000;
    21be:	a7 e2       	ldi	r26, 0x27	; 39
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e7 e2       	ldi	r30, 0x27	; 39
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 7e       	andi	r24, 0xE0	; 224
    21ca:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    21cc:	a7 e2       	ldi	r26, 0x27	; 39
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e7 e2       	ldi	r30, 0x27	; 39
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	90 81       	ld	r25, Z
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	89 2b       	or	r24, r25
    21da:	8c 93       	st	X, r24

	/*  Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    21dc:	a6 e2       	ldi	r26, 0x26	; 38
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e6 e2       	ldi	r30, 0x26	; 38
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	80 64       	ori	r24, 0x40	; 64
    21e8:	8c 93       	st	X, r24

	/* wait flag = 1 */
	while(GET_BIT(ADCSRA, ADIF) == 0);
    21ea:	e6 e2       	ldi	r30, 0x26	; 38
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	82 95       	swap	r24
    21f2:	8f 70       	andi	r24, 0x0F	; 15
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	81 70       	andi	r24, 0x01	; 1
    21fa:	90 70       	andi	r25, 0x00	; 0
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	a9 f3       	breq	.-22     	; 0x21ea <ADC_u16GetDigitalValue+0x38>

	/* clear flag */
	CLR_BIT(ADCSRA, ADIF);
    2200:	a6 e2       	ldi	r26, 0x26	; 38
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e6 e2       	ldi	r30, 0x26	; 38
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8f 7e       	andi	r24, 0xEF	; 239
    220c:	8c 93       	st	X, r24

	/* read ADC value */
	return ADC;
    220e:	e4 e2       	ldi	r30, 0x24	; 36
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01

}
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <ADC_voidDisable>:


void ADC_voidDisable(void){
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62

	/* Disable ADC */
	CLR_BIT(ADCSRA, ADEN);
    2226:	a6 e2       	ldi	r26, 0x26	; 38
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e6 e2       	ldi	r30, 0x26	; 38
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 77       	andi	r24, 0x7F	; 127
    2232:	8c 93       	st	X, r24

}
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <STP_voidInit>:
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "STPMR.h"

u16 waiting = 500;
void STP_voidInit(void){
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT, STP_COIL_BLUE,   DIO_OUTPUT);
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_PINK,   DIO_OUTPUT);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_YELLOW, DIO_OUTPUT);
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_ORANGE, DIO_OUTPUT);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	63 e0       	ldi	r22, 0x03	; 3
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>

}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <STP_voidRotateCW>:


void STP_voidRotateCW(void){
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	e8 97       	sbiw	r28, 0x38	; 56
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	62 e0       	ldi	r22, 0x02	; 2
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	63 e0       	ldi	r22, 0x03	; 3
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	_delay_ms(waiting);
    22ac:	80 91 68 01 	lds	r24, 0x0168
    22b0:	90 91 69 01 	lds	r25, 0x0169
    22b4:	cc 01       	movw	r24, r24
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	8d ab       	std	Y+53, r24	; 0x35
    22c8:	9e ab       	std	Y+54, r25	; 0x36
    22ca:	af ab       	std	Y+55, r26	; 0x37
    22cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	6d a9       	ldd	r22, Y+53	; 0x35
    22d0:	7e a9       	ldd	r23, Y+54	; 0x36
    22d2:	8f a9       	ldd	r24, Y+55	; 0x37
    22d4:	98 ad       	ldd	r25, Y+56	; 0x38
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a ef       	ldi	r20, 0xFA	; 250
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	89 ab       	std	Y+49, r24	; 0x31
    22e8:	9a ab       	std	Y+50, r25	; 0x32
    22ea:	ab ab       	std	Y+51, r26	; 0x33
    22ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ee:	69 a9       	ldd	r22, Y+49	; 0x31
    22f0:	7a a9       	ldd	r23, Y+50	; 0x32
    22f2:	8b a9       	ldd	r24, Y+51	; 0x33
    22f4:	9c a9       	ldd	r25, Y+52	; 0x34
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	2c f4       	brge	.+10     	; 0x2310 <STP_voidRotateCW+0xa0>
		__ticks = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	98 ab       	std	Y+48, r25	; 0x30
    230c:	8f a7       	std	Y+47, r24	; 0x2f
    230e:	3f c0       	rjmp	.+126    	; 0x238e <STP_voidRotateCW+0x11e>
	else if (__tmp > 65535)
    2310:	69 a9       	ldd	r22, Y+49	; 0x31
    2312:	7a a9       	ldd	r23, Y+50	; 0x32
    2314:	8b a9       	ldd	r24, Y+51	; 0x33
    2316:	9c a9       	ldd	r25, Y+52	; 0x34
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	4c f5       	brge	.+82     	; 0x237a <STP_voidRotateCW+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	6d a9       	ldd	r22, Y+53	; 0x35
    232a:	7e a9       	ldd	r23, Y+54	; 0x36
    232c:	8f a9       	ldd	r24, Y+55	; 0x37
    232e:	98 ad       	ldd	r25, Y+56	; 0x38
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <STP_voidRotateCW+0x100>
    2352:	88 ec       	ldi	r24, 0xC8	; 200
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e a7       	std	Y+46, r25	; 0x2e
    2358:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    235a:	8d a5       	ldd	r24, Y+45	; 0x2d
    235c:	9e a5       	ldd	r25, Y+46	; 0x2e
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <STP_voidRotateCW+0xee>
    2362:	9e a7       	std	Y+46, r25	; 0x2e
    2364:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	8f a5       	ldd	r24, Y+47	; 0x2f
    2368:	98 a9       	ldd	r25, Y+48	; 0x30
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	98 ab       	std	Y+48, r25	; 0x30
    236e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2370:	8f a5       	ldd	r24, Y+47	; 0x2f
    2372:	98 a9       	ldd	r25, Y+48	; 0x30
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	69 f7       	brne	.-38     	; 0x2352 <STP_voidRotateCW+0xe2>
    2378:	14 c0       	rjmp	.+40     	; 0x23a2 <STP_voidRotateCW+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	69 a9       	ldd	r22, Y+49	; 0x31
    237c:	7a a9       	ldd	r23, Y+50	; 0x32
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2390:	98 a9       	ldd	r25, Y+48	; 0x30
    2392:	9c a7       	std	Y+44, r25	; 0x2c
    2394:	8b a7       	std	Y+43, r24	; 0x2b
    2396:	8b a5       	ldd	r24, Y+43	; 0x2b
    2398:	9c a5       	ldd	r25, Y+44	; 0x2c
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <STP_voidRotateCW+0x12a>
    239e:	9c a7       	std	Y+44, r25	; 0x2c
    23a0:	8b a7       	std	Y+43, r24	; 0x2b

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    23b6:	83 e0       	ldi	r24, 0x03	; 3
    23b8:	62 e0       	ldi	r22, 0x02	; 2
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	63 e0       	ldi	r22, 0x03	; 3
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	_delay_ms(waiting);
    23ca:	80 91 68 01 	lds	r24, 0x0168
    23ce:	90 91 69 01 	lds	r25, 0x0169
    23d2:	cc 01       	movw	r24, r24
    23d4:	a0 e0       	ldi	r26, 0x00	; 0
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8f a3       	std	Y+39, r24	; 0x27
    23e6:	98 a7       	std	Y+40, r25	; 0x28
    23e8:	a9 a7       	std	Y+41, r26	; 0x29
    23ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6f a1       	ldd	r22, Y+39	; 0x27
    23ee:	78 a5       	ldd	r23, Y+40	; 0x28
    23f0:	89 a5       	ldd	r24, Y+41	; 0x29
    23f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a ef       	ldi	r20, 0xFA	; 250
    23fa:	54 e4       	ldi	r21, 0x44	; 68
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8b a3       	std	Y+35, r24	; 0x23
    2406:	9c a3       	std	Y+36, r25	; 0x24
    2408:	ad a3       	std	Y+37, r26	; 0x25
    240a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    240c:	6b a1       	ldd	r22, Y+35	; 0x23
    240e:	7c a1       	ldd	r23, Y+36	; 0x24
    2410:	8d a1       	ldd	r24, Y+37	; 0x25
    2412:	9e a1       	ldd	r25, Y+38	; 0x26
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <STP_voidRotateCW+0x1be>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9a a3       	std	Y+34, r25	; 0x22
    242a:	89 a3       	std	Y+33, r24	; 0x21
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <STP_voidRotateCW+0x23c>
	else if (__tmp > 65535)
    242e:	6b a1       	ldd	r22, Y+35	; 0x23
    2430:	7c a1       	ldd	r23, Y+36	; 0x24
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <STP_voidRotateCW+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6f a1       	ldd	r22, Y+39	; 0x27
    2448:	78 a5       	ldd	r23, Y+40	; 0x28
    244a:	89 a5       	ldd	r24, Y+41	; 0x29
    244c:	9a a5       	ldd	r25, Y+42	; 0x2a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9a a3       	std	Y+34, r25	; 0x22
    246c:	89 a3       	std	Y+33, r24	; 0x21
    246e:	0f c0       	rjmp	.+30     	; 0x248e <STP_voidRotateCW+0x21e>
    2470:	88 ec       	ldi	r24, 0xC8	; 200
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	98 a3       	std	Y+32, r25	; 0x20
    2476:	8f 8f       	std	Y+31, r24	; 0x1f
    2478:	8f 8d       	ldd	r24, Y+31	; 0x1f
    247a:	98 a1       	ldd	r25, Y+32	; 0x20
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <STP_voidRotateCW+0x20c>
    2480:	98 a3       	std	Y+32, r25	; 0x20
    2482:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <STP_voidRotateCW+0x200>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <STP_voidRotateCW+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6b a1       	ldd	r22, Y+35	; 0x23
    249a:	7c a1       	ldd	r23, Y+36	; 0x24
    249c:	8d a1       	ldd	r24, Y+37	; 0x25
    249e:	9e a1       	ldd	r25, Y+38	; 0x26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9a a3       	std	Y+34, r25	; 0x22
    24aa:	89 a3       	std	Y+33, r24	; 0x21
    24ac:	89 a1       	ldd	r24, Y+33	; 0x21
    24ae:	9a a1       	ldd	r25, Y+34	; 0x22
    24b0:	9e 8f       	std	Y+30, r25	; 0x1e
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <STP_voidRotateCW+0x248>
    24bc:	9e 8f       	std	Y+30, r25	; 0x1e
    24be:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	63 e0       	ldi	r22, 0x03	; 3
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	_delay_ms(waiting);
    24e8:	80 91 68 01 	lds	r24, 0x0168
    24ec:	90 91 69 01 	lds	r25, 0x0169
    24f0:	cc 01       	movw	r24, r24
    24f2:	a0 e0       	ldi	r26, 0x00	; 0
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	89 8f       	std	Y+25, r24	; 0x19
    2504:	9a 8f       	std	Y+26, r25	; 0x1a
    2506:	ab 8f       	std	Y+27, r26	; 0x1b
    2508:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	69 8d       	ldd	r22, Y+25	; 0x19
    250c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2510:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8d 8b       	std	Y+21, r24	; 0x15
    2524:	9e 8b       	std	Y+22, r25	; 0x16
    2526:	af 8b       	std	Y+23, r26	; 0x17
    2528:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <STP_voidRotateCW+0x2dc>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <STP_voidRotateCW+0x35a>
	else if (__tmp > 65535)
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <STP_voidRotateCW+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <STP_voidRotateCW+0x33c>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9a 8b       	std	Y+18, r25	; 0x12
    2594:	89 8b       	std	Y+17, r24	; 0x11
    2596:	89 89       	ldd	r24, Y+17	; 0x11
    2598:	9a 89       	ldd	r25, Y+18	; 0x12
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <STP_voidRotateCW+0x32a>
    259e:	9a 8b       	std	Y+18, r25	; 0x12
    25a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	9c 89       	ldd	r25, Y+20	; 0x14
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	8b 89       	ldd	r24, Y+19	; 0x13
    25ae:	9c 89       	ldd	r25, Y+20	; 0x14
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <STP_voidRotateCW+0x31e>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <STP_voidRotateCW+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	8b 8b       	std	Y+19, r24	; 0x13
    25ca:	8b 89       	ldd	r24, Y+19	; 0x13
    25cc:	9c 89       	ldd	r25, Y+20	; 0x14
    25ce:	98 8b       	std	Y+16, r25	; 0x10
    25d0:	8f 87       	std	Y+15, r24	; 0x0f
    25d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d4:	98 89       	ldd	r25, Y+16	; 0x10
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <STP_voidRotateCW+0x366>
    25da:	98 8b       	std	Y+16, r25	; 0x10
    25dc:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	62 e0       	ldi	r22, 0x02	; 2
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	63 e0       	ldi	r22, 0x03	; 3
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	_delay_ms(waiting);
    2606:	80 91 68 01 	lds	r24, 0x0168
    260a:	90 91 69 01 	lds	r25, 0x0169
    260e:	cc 01       	movw	r24, r24
    2610:	a0 e0       	ldi	r26, 0x00	; 0
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8b 87       	std	Y+11, r24	; 0x0b
    2622:	9c 87       	std	Y+12, r25	; 0x0c
    2624:	ad 87       	std	Y+13, r26	; 0x0d
    2626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2628:	6b 85       	ldd	r22, Y+11	; 0x0b
    262a:	7c 85       	ldd	r23, Y+12	; 0x0c
    262c:	8d 85       	ldd	r24, Y+13	; 0x0d
    262e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a ef       	ldi	r20, 0xFA	; 250
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8f 83       	std	Y+7, r24	; 0x07
    2642:	98 87       	std	Y+8, r25	; 0x08
    2644:	a9 87       	std	Y+9, r26	; 0x09
    2646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	2c f4       	brge	.+10     	; 0x266a <STP_voidRotateCW+0x3fa>
		__ticks = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	3f c0       	rjmp	.+126    	; 0x26e8 <STP_voidRotateCW+0x478>
	else if (__tmp > 65535)
    266a:	6f 81       	ldd	r22, Y+7	; 0x07
    266c:	78 85       	ldd	r23, Y+8	; 0x08
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	3f ef       	ldi	r19, 0xFF	; 255
    2676:	4f e7       	ldi	r20, 0x7F	; 127
    2678:	57 e4       	ldi	r21, 0x47	; 71
    267a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267e:	18 16       	cp	r1, r24
    2680:	4c f5       	brge	.+82     	; 0x26d4 <STP_voidRotateCW+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2682:	6b 85       	ldd	r22, Y+11	; 0x0b
    2684:	7c 85       	ldd	r23, Y+12	; 0x0c
    2686:	8d 85       	ldd	r24, Y+13	; 0x0d
    2688:	9e 85       	ldd	r25, Y+14	; 0x0e
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e2       	ldi	r20, 0x20	; 32
    2690:	51 e4       	ldi	r21, 0x41	; 65
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <STP_voidRotateCW+0x45a>
    26ac:	88 ec       	ldi	r24, 0xC8	; 200
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9c 83       	std	Y+4, r25	; 0x04
    26b2:	8b 83       	std	Y+3, r24	; 0x03
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <STP_voidRotateCW+0x448>
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	69 f7       	brne	.-38     	; 0x26ac <STP_voidRotateCW+0x43c>
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <STP_voidRotateCW+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	6f 81       	ldd	r22, Y+7	; 0x07
    26d6:	78 85       	ldd	r23, Y+8	; 0x08
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	9a 85       	ldd	r25, Y+10	; 0x0a
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <STP_voidRotateCW+0x484>
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01

}
    26fc:	e8 96       	adiw	r28, 0x38	; 56
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <STP_voidRotateACW>:


void STP_voidRotateACW(void){
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	e8 97       	sbiw	r28, 0x38	; 56
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	62 e0       	ldi	r22, 0x02	; 2
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    2740:	83 e0       	ldi	r24, 0x03	; 3
    2742:	63 e0       	ldi	r22, 0x03	; 3
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	aa ef       	ldi	r26, 0xFA	; 250
    2750:	b3 e4       	ldi	r27, 0x43	; 67
    2752:	8d ab       	std	Y+53, r24	; 0x35
    2754:	9e ab       	std	Y+54, r25	; 0x36
    2756:	af ab       	std	Y+55, r26	; 0x37
    2758:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6d a9       	ldd	r22, Y+53	; 0x35
    275c:	7e a9       	ldd	r23, Y+54	; 0x36
    275e:	8f a9       	ldd	r24, Y+55	; 0x37
    2760:	98 ad       	ldd	r25, Y+56	; 0x38
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	89 ab       	std	Y+49, r24	; 0x31
    2774:	9a ab       	std	Y+50, r25	; 0x32
    2776:	ab ab       	std	Y+51, r26	; 0x33
    2778:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    277a:	69 a9       	ldd	r22, Y+49	; 0x31
    277c:	7a a9       	ldd	r23, Y+50	; 0x32
    277e:	8b a9       	ldd	r24, Y+51	; 0x33
    2780:	9c a9       	ldd	r25, Y+52	; 0x34
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <STP_voidRotateACW+0x8e>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	98 ab       	std	Y+48, r25	; 0x30
    2798:	8f a7       	std	Y+47, r24	; 0x2f
    279a:	3f c0       	rjmp	.+126    	; 0x281a <STP_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    279c:	69 a9       	ldd	r22, Y+49	; 0x31
    279e:	7a a9       	ldd	r23, Y+50	; 0x32
    27a0:	8b a9       	ldd	r24, Y+51	; 0x33
    27a2:	9c a9       	ldd	r25, Y+52	; 0x34
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <STP_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6d a9       	ldd	r22, Y+53	; 0x35
    27b6:	7e a9       	ldd	r23, Y+54	; 0x36
    27b8:	8f a9       	ldd	r24, Y+55	; 0x37
    27ba:	98 ad       	ldd	r25, Y+56	; 0x38
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	98 ab       	std	Y+48, r25	; 0x30
    27da:	8f a7       	std	Y+47, r24	; 0x2f
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <STP_voidRotateACW+0xee>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e a7       	std	Y+46, r25	; 0x2e
    27e4:	8d a7       	std	Y+45, r24	; 0x2d
    27e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <STP_voidRotateACW+0xdc>
    27ee:	9e a7       	std	Y+46, r25	; 0x2e
    27f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f4:	98 a9       	ldd	r25, Y+48	; 0x30
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	98 ab       	std	Y+48, r25	; 0x30
    27fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <STP_voidRotateACW+0xd0>
    2804:	14 c0       	rjmp	.+40     	; 0x282e <STP_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	69 a9       	ldd	r22, Y+49	; 0x31
    2808:	7a a9       	ldd	r23, Y+50	; 0x32
    280a:	8b a9       	ldd	r24, Y+51	; 0x33
    280c:	9c a9       	ldd	r25, Y+52	; 0x34
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	98 ab       	std	Y+48, r25	; 0x30
    2818:	8f a7       	std	Y+47, r24	; 0x2f
    281a:	8f a5       	ldd	r24, Y+47	; 0x2f
    281c:	98 a9       	ldd	r25, Y+48	; 0x30
    281e:	9c a7       	std	Y+44, r25	; 0x2c
    2820:	8b a7       	std	Y+43, r24	; 0x2b
    2822:	8b a5       	ldd	r24, Y+43	; 0x2b
    2824:	9c a5       	ldd	r25, Y+44	; 0x2c
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <STP_voidRotateACW+0x118>
    282a:	9c a7       	std	Y+44, r25	; 0x2c
    282c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	63 e0       	ldi	r22, 0x03	; 3
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	aa ef       	ldi	r26, 0xFA	; 250
    285c:	b3 e4       	ldi	r27, 0x43	; 67
    285e:	8f a3       	std	Y+39, r24	; 0x27
    2860:	98 a7       	std	Y+40, r25	; 0x28
    2862:	a9 a7       	std	Y+41, r26	; 0x29
    2864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6f a1       	ldd	r22, Y+39	; 0x27
    2868:	78 a5       	ldd	r23, Y+40	; 0x28
    286a:	89 a5       	ldd	r24, Y+41	; 0x29
    286c:	9a a5       	ldd	r25, Y+42	; 0x2a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8b a3       	std	Y+35, r24	; 0x23
    2880:	9c a3       	std	Y+36, r25	; 0x24
    2882:	ad a3       	std	Y+37, r26	; 0x25
    2884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <STP_voidRotateACW+0x19a>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <STP_voidRotateACW+0x218>
	else if (__tmp > 65535)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <STP_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6f a1       	ldd	r22, Y+39	; 0x27
    28c2:	78 a5       	ldd	r23, Y+40	; 0x28
    28c4:	89 a5       	ldd	r24, Y+41	; 0x29
    28c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <STP_voidRotateACW+0x1fa>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
    28f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f4:	98 a1       	ldd	r25, Y+32	; 0x20
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <STP_voidRotateACW+0x1e8>
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2900:	9a a1       	ldd	r25, Y+34	; 0x22
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9a a3       	std	Y+34, r25	; 0x22
    2906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	89 a1       	ldd	r24, Y+33	; 0x21
    290a:	9a a1       	ldd	r25, Y+34	; 0x22
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <STP_voidRotateACW+0x1dc>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <STP_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9a a3       	std	Y+34, r25	; 0x22
    2924:	89 a3       	std	Y+33, r24	; 0x21
    2926:	89 a1       	ldd	r24, Y+33	; 0x21
    2928:	9a a1       	ldd	r25, Y+34	; 0x22
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
    292e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <STP_voidRotateACW+0x224>
    2936:	9e 8f       	std	Y+30, r25	; 0x1e
    2938:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	61 e0       	ldi	r22, 0x01	; 1
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	62 e0       	ldi	r22, 0x02	; 2
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	aa ef       	ldi	r26, 0xFA	; 250
    2968:	b3 e4       	ldi	r27, 0x43	; 67
    296a:	89 8f       	std	Y+25, r24	; 0x19
    296c:	9a 8f       	std	Y+26, r25	; 0x1a
    296e:	ab 8f       	std	Y+27, r26	; 0x1b
    2970:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	69 8d       	ldd	r22, Y+25	; 0x19
    2974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8d 8b       	std	Y+21, r24	; 0x15
    298c:	9e 8b       	std	Y+22, r25	; 0x16
    298e:	af 8b       	std	Y+23, r26	; 0x17
    2990:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2992:	6d 89       	ldd	r22, Y+21	; 0x15
    2994:	7e 89       	ldd	r23, Y+22	; 0x16
    2996:	8f 89       	ldd	r24, Y+23	; 0x17
    2998:	98 8d       	ldd	r25, Y+24	; 0x18
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <STP_voidRotateACW+0x2a6>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <STP_voidRotateACW+0x324>
	else if (__tmp > 65535)
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <STP_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	69 8d       	ldd	r22, Y+25	; 0x19
    29ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9c 8b       	std	Y+20, r25	; 0x14
    29f2:	8b 8b       	std	Y+19, r24	; 0x13
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <STP_voidRotateACW+0x306>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9a 8b       	std	Y+18, r25	; 0x12
    29fc:	89 8b       	std	Y+17, r24	; 0x11
    29fe:	89 89       	ldd	r24, Y+17	; 0x11
    2a00:	9a 89       	ldd	r25, Y+18	; 0x12
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <STP_voidRotateACW+0x2f4>
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9c 8b       	std	Y+20, r25	; 0x14
    2a12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <STP_voidRotateACW+0x2e8>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <STP_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9c 8b       	std	Y+20, r25	; 0x14
    2a30:	8b 8b       	std	Y+19, r24	; 0x13
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	98 8b       	std	Y+16, r25	; 0x10
    2a38:	8f 87       	std	Y+15, r24	; 0x0f
    2a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3c:	98 89       	ldd	r25, Y+16	; 0x10
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <STP_voidRotateACW+0x330>
    2a42:	98 8b       	std	Y+16, r25	; 0x10
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	62 e0       	ldi	r22, 0x02	; 2
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	63 e0       	ldi	r22, 0x03	; 3
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	aa ef       	ldi	r26, 0xFA	; 250
    2a74:	b3 e4       	ldi	r27, 0x43	; 67
    2a76:	8b 87       	std	Y+11, r24	; 0x0b
    2a78:	9c 87       	std	Y+12, r25	; 0x0c
    2a7a:	ad 87       	std	Y+13, r26	; 0x0d
    2a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8f 83       	std	Y+7, r24	; 0x07
    2a98:	98 87       	std	Y+8, r25	; 0x08
    2a9a:	a9 87       	std	Y+9, r26	; 0x09
    2a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa0:	78 85       	ldd	r23, Y+8	; 0x08
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <STP_voidRotateACW+0x3b2>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <STP_voidRotateACW+0x430>
	else if (__tmp > 65535)
    2ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac2:	78 85       	ldd	r23, Y+8	; 0x08
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <STP_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <STP_voidRotateACW+0x412>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <STP_voidRotateACW+0x400>
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <STP_voidRotateACW+0x3f4>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <STP_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <STP_voidRotateACW+0x43c>
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    2b52:	e8 96       	adiw	r28, 0x38	; 56
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <LCD_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	cc 54       	subi	r28, 0x4C	; 76
    2b72:	d0 40       	sbci	r29, 0x00	; 0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	6f ef       	ldi	r22, 0xFF	; 255
    2b82:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e7 5b       	subi	r30, 0xB7	; 183
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	ac e0       	ldi	r26, 0x0C	; 12
    2bb0:	b2 e4       	ldi	r27, 0x42	; 66
    2bb2:	80 83       	st	Z, r24
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	a2 83       	std	Z+2, r26	; 0x02
    2bb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	8e 01       	movw	r16, r28
    2bbc:	0b 5b       	subi	r16, 0xBB	; 187
    2bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 5b       	subi	r30, 0xB7	; 183
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	f8 01       	movw	r30, r16
    2be0:	80 83       	st	Z, r24
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	a2 83       	std	Z+2, r26	; 0x02
    2be6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2be8:	fe 01       	movw	r30, r28
    2bea:	eb 5b       	subi	r30, 0xBB	; 187
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	44 f4       	brge	.+16     	; 0x2c16 <LCD_voidInit+0xb2>
		__ticks = 1;
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 5b       	subi	r30, 0xBD	; 189
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	64 c0       	rjmp	.+200    	; 0x2cde <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    2c16:	fe 01       	movw	r30, r28
    2c18:	eb 5b       	subi	r30, 0xBB	; 187
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <LCD_voidInit+0xd2>
    2c34:	43 c0       	rjmp	.+134    	; 0x2cbc <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	fe 01       	movw	r30, r28
    2c38:	e7 5b       	subi	r30, 0xB7	; 183
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8e 01       	movw	r16, r28
    2c56:	0d 5b       	subi	r16, 0xBD	; 189
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	1f c0       	rjmp	.+62     	; 0x2cac <LCD_voidInit+0x148>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 5b       	subi	r30, 0xBF	; 191
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	88 ec       	ldi	r24, 0xC8	; 200
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 5b       	subi	r30, 0xBF	; 191
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	91 81       	ldd	r25, Z+1	; 0x01
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <LCD_voidInit+0x122>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 5b       	subi	r30, 0xBF	; 191
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c94:	de 01       	movw	r26, r28
    2c96:	ad 5b       	subi	r26, 0xBD	; 189
    2c98:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ed 5b       	subi	r30, 0xBD	; 189
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	11 96       	adiw	r26, 0x01	; 1
    2ca8:	9c 93       	st	X, r25
    2caa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	fe 01       	movw	r30, r28
    2cae:	ed 5b       	subi	r30, 0xBD	; 189
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	d1 f6       	brne	.-76     	; 0x2c6e <LCD_voidInit+0x10a>
    2cba:	24 c0       	rjmp	.+72     	; 0x2d04 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	8e 01       	movw	r16, r28
    2cbe:	0d 5b       	subi	r16, 0xBD	; 189
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	eb 5b       	subi	r30, 0xBB	; 187
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	f8 01       	movw	r30, r16
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ed 5b       	subi	r30, 0xBD	; 189
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ff 96       	adiw	r30, 0x3f	; 63
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ff 96       	adiw	r30, 0x3f	; 63
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_voidInit+0x194>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ff 96       	adiw	r30, 0x3f	; 63
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    2d04:	88 e3       	ldi	r24, 0x38	; 56
    2d06:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a8 e4       	ldi	r26, 0x48	; 72
    2d10:	b2 e4       	ldi	r27, 0x42	; 66
    2d12:	8b af       	std	Y+59, r24	; 0x3b
    2d14:	9c af       	std	Y+60, r25	; 0x3c
    2d16:	ad af       	std	Y+61, r26	; 0x3d
    2d18:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d1a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2d1c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2d1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d22:	2b ea       	ldi	r18, 0xAB	; 171
    2d24:	3a ea       	ldi	r19, 0xAA	; 170
    2d26:	4a e2       	ldi	r20, 0x2A	; 42
    2d28:	50 e4       	ldi	r21, 0x40	; 64
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8f ab       	std	Y+55, r24	; 0x37
    2d34:	98 af       	std	Y+56, r25	; 0x38
    2d36:	a9 af       	std	Y+57, r26	; 0x39
    2d38:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2d3a:	6f a9       	ldd	r22, Y+55	; 0x37
    2d3c:	78 ad       	ldd	r23, Y+56	; 0x38
    2d3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d40:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	1c f4       	brge	.+6      	; 0x2d58 <LCD_voidInit+0x1f4>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	8e ab       	std	Y+54, r24	; 0x36
    2d56:	91 c0       	rjmp	.+290    	; 0x2e7a <LCD_voidInit+0x316>
	else if (__tmp > 255)
    2d58:	6f a9       	ldd	r22, Y+55	; 0x37
    2d5a:	78 ad       	ldd	r23, Y+56	; 0x38
    2d5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	53 e4       	ldi	r21, 0x43	; 67
    2d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	0c f0       	brlt	.+2      	; 0x2d72 <LCD_voidInit+0x20e>
    2d70:	7b c0       	rjmp	.+246    	; 0x2e68 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2d72:	6b ad       	ldd	r22, Y+59	; 0x3b
    2d74:	7c ad       	ldd	r23, Y+60	; 0x3c
    2d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a e7       	ldi	r20, 0x7A	; 122
    2d80:	54 e4       	ldi	r21, 0x44	; 68
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8a ab       	std	Y+50, r24	; 0x32
    2d8c:	9b ab       	std	Y+51, r25	; 0x33
    2d8e:	ac ab       	std	Y+52, r26	; 0x34
    2d90:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	6a a9       	ldd	r22, Y+50	; 0x32
    2d94:	7b a9       	ldd	r23, Y+51	; 0x33
    2d96:	8c a9       	ldd	r24, Y+52	; 0x34
    2d98:	9d a9       	ldd	r25, Y+53	; 0x35
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	4a ef       	ldi	r20, 0xFA	; 250
    2da0:	54 e4       	ldi	r21, 0x44	; 68
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8e a7       	std	Y+46, r24	; 0x2e
    2dac:	9f a7       	std	Y+47, r25	; 0x2f
    2dae:	a8 ab       	std	Y+48, r26	; 0x30
    2db0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2db2:	6e a5       	ldd	r22, Y+46	; 0x2e
    2db4:	7f a5       	ldd	r23, Y+47	; 0x2f
    2db6:	88 a9       	ldd	r24, Y+48	; 0x30
    2db8:	99 a9       	ldd	r25, Y+49	; 0x31
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	2c f4       	brge	.+10     	; 0x2dd4 <LCD_voidInit+0x270>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9d a7       	std	Y+45, r25	; 0x2d
    2dd0:	8c a7       	std	Y+44, r24	; 0x2c
    2dd2:	3f c0       	rjmp	.+126    	; 0x2e52 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    2dd4:	6e a5       	ldd	r22, Y+46	; 0x2e
    2dd6:	7f a5       	ldd	r23, Y+47	; 0x2f
    2dd8:	88 a9       	ldd	r24, Y+48	; 0x30
    2dda:	99 a9       	ldd	r25, Y+49	; 0x31
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	3f ef       	ldi	r19, 0xFF	; 255
    2de0:	4f e7       	ldi	r20, 0x7F	; 127
    2de2:	57 e4       	ldi	r21, 0x47	; 71
    2de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	4c f5       	brge	.+82     	; 0x2e3e <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	6a a9       	ldd	r22, Y+50	; 0x32
    2dee:	7b a9       	ldd	r23, Y+51	; 0x33
    2df0:	8c a9       	ldd	r24, Y+52	; 0x34
    2df2:	9d a9       	ldd	r25, Y+53	; 0x35
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e2       	ldi	r20, 0x20	; 32
    2dfa:	51 e4       	ldi	r21, 0x41	; 65
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9d a7       	std	Y+45, r25	; 0x2d
    2e12:	8c a7       	std	Y+44, r24	; 0x2c
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <LCD_voidInit+0x2d0>
    2e16:	88 ec       	ldi	r24, 0xC8	; 200
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9b a7       	std	Y+43, r25	; 0x2b
    2e1c:	8a a7       	std	Y+42, r24	; 0x2a
    2e1e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2e20:	9b a5       	ldd	r25, Y+43	; 0x2b
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <LCD_voidInit+0x2be>
    2e26:	9b a7       	std	Y+43, r25	; 0x2b
    2e28:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	9d a7       	std	Y+45, r25	; 0x2d
    2e32:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e36:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <LCD_voidInit+0x2b2>
    2e3c:	24 c0       	rjmp	.+72     	; 0x2e86 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2e40:	7f a5       	ldd	r23, Y+47	; 0x2f
    2e42:	88 a9       	ldd	r24, Y+48	; 0x30
    2e44:	99 a9       	ldd	r25, Y+49	; 0x31
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9d a7       	std	Y+45, r25	; 0x2d
    2e50:	8c a7       	std	Y+44, r24	; 0x2c
    2e52:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e54:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e56:	99 a7       	std	Y+41, r25	; 0x29
    2e58:	88 a7       	std	Y+40, r24	; 0x28
    2e5a:	88 a5       	ldd	r24, Y+40	; 0x28
    2e5c:	99 a5       	ldd	r25, Y+41	; 0x29
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_voidInit+0x2fa>
    2e62:	99 a7       	std	Y+41, r25	; 0x29
    2e64:	88 a7       	std	Y+40, r24	; 0x28
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e68:	6f a9       	ldd	r22, Y+55	; 0x37
    2e6a:	78 ad       	ldd	r23, Y+56	; 0x38
    2e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    2e6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8e ab       	std	Y+54, r24	; 0x36
    2e7a:	8e a9       	ldd	r24, Y+54	; 0x36
    2e7c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e7e:	8f a1       	ldd	r24, Y+39	; 0x27
    2e80:	8a 95       	dec	r24
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_voidInit+0x31c>
    2e84:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    2e86:	8f e0       	ldi	r24, 0x0F	; 15
    2e88:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a8 e4       	ldi	r26, 0x48	; 72
    2e92:	b2 e4       	ldi	r27, 0x42	; 66
    2e94:	8b a3       	std	Y+35, r24	; 0x23
    2e96:	9c a3       	std	Y+36, r25	; 0x24
    2e98:	ad a3       	std	Y+37, r26	; 0x25
    2e9a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	2b ea       	ldi	r18, 0xAB	; 171
    2ea6:	3a ea       	ldi	r19, 0xAA	; 170
    2ea8:	4a e2       	ldi	r20, 0x2A	; 42
    2eaa:	50 e4       	ldi	r21, 0x40	; 64
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2eb6:	98 a3       	std	Y+32, r25	; 0x20
    2eb8:	a9 a3       	std	Y+33, r26	; 0x21
    2eba:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ebc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ebe:	78 a1       	ldd	r23, Y+32	; 0x20
    2ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e8       	ldi	r20, 0x80	; 128
    2eca:	5f e3       	ldi	r21, 0x3F	; 63
    2ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed0:	88 23       	and	r24, r24
    2ed2:	1c f4       	brge	.+6      	; 0x2eda <LCD_voidInit+0x376>
		__ticks = 1;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ed8:	91 c0       	rjmp	.+290    	; 0x2ffc <LCD_voidInit+0x498>
	else if (__tmp > 255)
    2eda:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2edc:	78 a1       	ldd	r23, Y+32	; 0x20
    2ede:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	53 e4       	ldi	r21, 0x43	; 67
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <LCD_voidInit+0x390>
    2ef2:	7b c0       	rjmp	.+246    	; 0x2fea <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2ef4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef8:	8d a1       	ldd	r24, Y+37	; 0x25
    2efa:	9e a1       	ldd	r25, Y+38	; 0x26
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8a 8f       	std	Y+26, r24	; 0x1a
    2f0e:	9b 8f       	std	Y+27, r25	; 0x1b
    2f10:	ac 8f       	std	Y+28, r26	; 0x1c
    2f12:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f16:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a ef       	ldi	r20, 0xFA	; 250
    2f22:	54 e4       	ldi	r21, 0x44	; 68
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	8e 8b       	std	Y+22, r24	; 0x16
    2f2e:	9f 8b       	std	Y+23, r25	; 0x17
    2f30:	a8 8f       	std	Y+24, r26	; 0x18
    2f32:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2f34:	6e 89       	ldd	r22, Y+22	; 0x16
    2f36:	7f 89       	ldd	r23, Y+23	; 0x17
    2f38:	88 8d       	ldd	r24, Y+24	; 0x18
    2f3a:	99 8d       	ldd	r25, Y+25	; 0x19
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <LCD_voidInit+0x3f2>
		__ticks = 1;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9d 8b       	std	Y+21, r25	; 0x15
    2f52:	8c 8b       	std	Y+20, r24	; 0x14
    2f54:	3f c0       	rjmp	.+126    	; 0x2fd4 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    2f56:	6e 89       	ldd	r22, Y+22	; 0x16
    2f58:	7f 89       	ldd	r23, Y+23	; 0x17
    2f5a:	88 8d       	ldd	r24, Y+24	; 0x18
    2f5c:	99 8d       	ldd	r25, Y+25	; 0x19
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	4c f5       	brge	.+82     	; 0x2fc0 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f70:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9d 8b       	std	Y+21, r25	; 0x15
    2f94:	8c 8b       	std	Y+20, r24	; 0x14
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <LCD_voidInit+0x452>
    2f98:	88 ec       	ldi	r24, 0xC8	; 200
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9b 8b       	std	Y+19, r25	; 0x13
    2f9e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fa2:	9b 89       	ldd	r25, Y+19	; 0x13
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_voidInit+0x440>
    2fa8:	9b 8b       	std	Y+19, r25	; 0x13
    2faa:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	8c 89       	ldd	r24, Y+20	; 0x14
    2fae:	9d 89       	ldd	r25, Y+21	; 0x15
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9d 8b       	std	Y+21, r25	; 0x15
    2fb4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	8c 89       	ldd	r24, Y+20	; 0x14
    2fb8:	9d 89       	ldd	r25, Y+21	; 0x15
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	69 f7       	brne	.-38     	; 0x2f98 <LCD_voidInit+0x434>
    2fbe:	24 c0       	rjmp	.+72     	; 0x3008 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	6e 89       	ldd	r22, Y+22	; 0x16
    2fc2:	7f 89       	ldd	r23, Y+23	; 0x17
    2fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    2fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9d 8b       	std	Y+21, r25	; 0x15
    2fd2:	8c 8b       	std	Y+20, r24	; 0x14
    2fd4:	8c 89       	ldd	r24, Y+20	; 0x14
    2fd6:	9d 89       	ldd	r25, Y+21	; 0x15
    2fd8:	99 8b       	std	Y+17, r25	; 0x11
    2fda:	88 8b       	std	Y+16, r24	; 0x10
    2fdc:	88 89       	ldd	r24, Y+16	; 0x10
    2fde:	99 89       	ldd	r25, Y+17	; 0x11
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_voidInit+0x47c>
    2fe4:	99 8b       	std	Y+17, r25	; 0x11
    2fe6:	88 8b       	std	Y+16, r24	; 0x10
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2fec:	78 a1       	ldd	r23, Y+32	; 0x20
    2fee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	8e 8f       	std	Y+30, r24	; 0x1e
    2ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ffe:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	8a 95       	dec	r24
    3004:	f1 f7       	brne	.-4      	; 0x3002 <LCD_voidInit+0x49e>
    3006:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a0 e0       	ldi	r26, 0x00	; 0
    3014:	b0 e4       	ldi	r27, 0x40	; 64
    3016:	8b 87       	std	Y+11, r24	; 0x0b
    3018:	9c 87       	std	Y+12, r25	; 0x0c
    301a:	ad 87       	std	Y+13, r26	; 0x0d
    301c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a ef       	ldi	r20, 0xFA	; 250
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	98 87       	std	Y+8, r25	; 0x08
    303a:	a9 87       	std	Y+9, r26	; 0x09
    303c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303e:	6f 81       	ldd	r22, Y+7	; 0x07
    3040:	78 85       	ldd	r23, Y+8	; 0x08
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <LCD_voidInit+0x4fc>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	3f c0       	rjmp	.+126    	; 0x30de <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <LCD_voidInit+0x55c>
    30a2:	88 ec       	ldi	r24, 0xC8	; 200
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_voidInit+0x54a>
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <LCD_voidInit+0x53e>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_voidInit+0x586>
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    30f2:	c4 5b       	subi	r28, 0xB4	; 180
    30f4:	df 4f       	sbci	r29, 0xFF	; 255
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	1f 91       	pop	r17
    3106:	0f 91       	pop	r16
    3108:	08 95       	ret

0000310a <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	69 97       	sbiw	r28, 0x19	; 25
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	40 e0       	ldi	r20, 0x00	; 0
    3130:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	69 8d       	ldd	r22, Y+25	; 0x19
    3138:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	62 e0       	ldi	r22, 0x02	; 2
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a0 e8       	ldi	r26, 0x80	; 128
    314c:	bf e3       	ldi	r27, 0x3F	; 63
    314e:	8d 8b       	std	Y+21, r24	; 0x15
    3150:	9e 8b       	std	Y+22, r25	; 0x16
    3152:	af 8b       	std	Y+23, r26	; 0x17
    3154:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3156:	6d 89       	ldd	r22, Y+21	; 0x15
    3158:	7e 89       	ldd	r23, Y+22	; 0x16
    315a:	8f 89       	ldd	r24, Y+23	; 0x17
    315c:	98 8d       	ldd	r25, Y+24	; 0x18
    315e:	2b ea       	ldi	r18, 0xAB	; 171
    3160:	3a ea       	ldi	r19, 0xAA	; 170
    3162:	4a e2       	ldi	r20, 0x2A	; 42
    3164:	50 e4       	ldi	r21, 0x40	; 64
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	89 8b       	std	Y+17, r24	; 0x11
    3170:	9a 8b       	std	Y+18, r25	; 0x12
    3172:	ab 8b       	std	Y+19, r26	; 0x13
    3174:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3176:	69 89       	ldd	r22, Y+17	; 0x11
    3178:	7a 89       	ldd	r23, Y+18	; 0x12
    317a:	8b 89       	ldd	r24, Y+19	; 0x13
    317c:	9c 89       	ldd	r25, Y+20	; 0x14
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	5f e3       	ldi	r21, 0x3F	; 63
    3186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    318a:	88 23       	and	r24, r24
    318c:	1c f4       	brge	.+6      	; 0x3194 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	88 8b       	std	Y+16, r24	; 0x10
    3192:	91 c0       	rjmp	.+290    	; 0x32b6 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    3194:	69 89       	ldd	r22, Y+17	; 0x11
    3196:	7a 89       	ldd	r23, Y+18	; 0x12
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	53 e4       	ldi	r21, 0x43	; 67
    31a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	0c f0       	brlt	.+2      	; 0x31ae <LCD_voidSendCommand+0xa4>
    31ac:	7b c0       	rjmp	.+246    	; 0x32a4 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    31ae:	6d 89       	ldd	r22, Y+21	; 0x15
    31b0:	7e 89       	ldd	r23, Y+22	; 0x16
    31b2:	8f 89       	ldd	r24, Y+23	; 0x17
    31b4:	98 8d       	ldd	r25, Y+24	; 0x18
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4a e7       	ldi	r20, 0x7A	; 122
    31bc:	54 e4       	ldi	r21, 0x44	; 68
    31be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	8c 87       	std	Y+12, r24	; 0x0c
    31c8:	9d 87       	std	Y+13, r25	; 0x0d
    31ca:	ae 87       	std	Y+14, r26	; 0x0e
    31cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    31d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    31d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a ef       	ldi	r20, 0xFA	; 250
    31dc:	54 e4       	ldi	r21, 0x44	; 68
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	88 87       	std	Y+8, r24	; 0x08
    31e8:	99 87       	std	Y+9, r25	; 0x09
    31ea:	aa 87       	std	Y+10, r26	; 0x0a
    31ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31ee:	68 85       	ldd	r22, Y+8	; 0x08
    31f0:	79 85       	ldd	r23, Y+9	; 0x09
    31f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	2c f4       	brge	.+10     	; 0x3210 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9f 83       	std	Y+7, r25	; 0x07
    320c:	8e 83       	std	Y+6, r24	; 0x06
    320e:	3f c0       	rjmp	.+126    	; 0x328e <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    3210:	68 85       	ldd	r22, Y+8	; 0x08
    3212:	79 85       	ldd	r23, Y+9	; 0x09
    3214:	8a 85       	ldd	r24, Y+10	; 0x0a
    3216:	9b 85       	ldd	r25, Y+11	; 0x0b
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	4c f5       	brge	.+82     	; 0x327a <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	6c 85       	ldd	r22, Y+12	; 0x0c
    322a:	7d 85       	ldd	r23, Y+13	; 0x0d
    322c:	8e 85       	ldd	r24, Y+14	; 0x0e
    322e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9f 83       	std	Y+7, r25	; 0x07
    324e:	8e 83       	std	Y+6, r24	; 0x06
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <LCD_voidSendCommand+0x166>
    3252:	88 ec       	ldi	r24, 0xC8	; 200
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9d 83       	std	Y+5, r25	; 0x05
    3258:	8c 83       	std	Y+4, r24	; 0x04
    325a:	8c 81       	ldd	r24, Y+4	; 0x04
    325c:	9d 81       	ldd	r25, Y+5	; 0x05
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_voidSendCommand+0x154>
    3262:	9d 83       	std	Y+5, r25	; 0x05
    3264:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3266:	8e 81       	ldd	r24, Y+6	; 0x06
    3268:	9f 81       	ldd	r25, Y+7	; 0x07
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	9f 83       	std	Y+7, r25	; 0x07
    326e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3270:	8e 81       	ldd	r24, Y+6	; 0x06
    3272:	9f 81       	ldd	r25, Y+7	; 0x07
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	69 f7       	brne	.-38     	; 0x3252 <LCD_voidSendCommand+0x148>
    3278:	24 c0       	rjmp	.+72     	; 0x32c2 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	68 85       	ldd	r22, Y+8	; 0x08
    327c:	79 85       	ldd	r23, Y+9	; 0x09
    327e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3280:	9b 85       	ldd	r25, Y+11	; 0x0b
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9f 83       	std	Y+7, r25	; 0x07
    328c:	8e 83       	std	Y+6, r24	; 0x06
    328e:	8e 81       	ldd	r24, Y+6	; 0x06
    3290:	9f 81       	ldd	r25, Y+7	; 0x07
    3292:	9b 83       	std	Y+3, r25	; 0x03
    3294:	8a 83       	std	Y+2, r24	; 0x02
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	9b 81       	ldd	r25, Y+3	; 0x03
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <LCD_voidSendCommand+0x190>
    329e:	9b 83       	std	Y+3, r25	; 0x03
    32a0:	8a 83       	std	Y+2, r24	; 0x02
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32a4:	69 89       	ldd	r22, Y+17	; 0x11
    32a6:	7a 89       	ldd	r23, Y+18	; 0x12
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	88 8b       	std	Y+16, r24	; 0x10
    32b6:	88 89       	ldd	r24, Y+16	; 0x10
    32b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	8a 95       	dec	r24
    32be:	f1 f7       	brne	.-4      	; 0x32bc <LCD_voidSendCommand+0x1b2>
    32c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	62 e0       	ldi	r22, 0x02	; 2
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
}
    32cc:	69 96       	adiw	r28, 0x19	; 25
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	69 97       	sbiw	r28, 0x19	; 25
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	61 e0       	ldi	r22, 0x01	; 1
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	69 8d       	ldd	r22, Y+25	; 0x19
    330c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	62 e0       	ldi	r22, 0x02	; 2
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a0 e8       	ldi	r26, 0x80	; 128
    3320:	bf e3       	ldi	r27, 0x3F	; 63
    3322:	8d 8b       	std	Y+21, r24	; 0x15
    3324:	9e 8b       	std	Y+22, r25	; 0x16
    3326:	af 8b       	std	Y+23, r26	; 0x17
    3328:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	2b ea       	ldi	r18, 0xAB	; 171
    3334:	3a ea       	ldi	r19, 0xAA	; 170
    3336:	4a e2       	ldi	r20, 0x2A	; 42
    3338:	50 e4       	ldi	r21, 0x40	; 64
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	89 8b       	std	Y+17, r24	; 0x11
    3344:	9a 8b       	std	Y+18, r25	; 0x12
    3346:	ab 8b       	std	Y+19, r26	; 0x13
    3348:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    334a:	69 89       	ldd	r22, Y+17	; 0x11
    334c:	7a 89       	ldd	r23, Y+18	; 0x12
    334e:	8b 89       	ldd	r24, Y+19	; 0x13
    3350:	9c 89       	ldd	r25, Y+20	; 0x14
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	5f e3       	ldi	r21, 0x3F	; 63
    335a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    335e:	88 23       	and	r24, r24
    3360:	1c f4       	brge	.+6      	; 0x3368 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	88 8b       	std	Y+16, r24	; 0x10
    3366:	91 c0       	rjmp	.+290    	; 0x348a <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    3368:	69 89       	ldd	r22, Y+17	; 0x11
    336a:	7a 89       	ldd	r23, Y+18	; 0x12
    336c:	8b 89       	ldd	r24, Y+19	; 0x13
    336e:	9c 89       	ldd	r25, Y+20	; 0x14
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4f e7       	ldi	r20, 0x7F	; 127
    3376:	53 e4       	ldi	r21, 0x43	; 67
    3378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    337c:	18 16       	cp	r1, r24
    337e:	0c f0       	brlt	.+2      	; 0x3382 <LCD_voidSendChar+0xa4>
    3380:	7b c0       	rjmp	.+246    	; 0x3478 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3382:	6d 89       	ldd	r22, Y+21	; 0x15
    3384:	7e 89       	ldd	r23, Y+22	; 0x16
    3386:	8f 89       	ldd	r24, Y+23	; 0x17
    3388:	98 8d       	ldd	r25, Y+24	; 0x18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a e7       	ldi	r20, 0x7A	; 122
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8c 87       	std	Y+12, r24	; 0x0c
    339c:	9d 87       	std	Y+13, r25	; 0x0d
    339e:	ae 87       	std	Y+14, r26	; 0x0e
    33a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    33a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    33a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    33a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	4a ef       	ldi	r20, 0xFA	; 250
    33b0:	54 e4       	ldi	r21, 0x44	; 68
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	88 87       	std	Y+8, r24	; 0x08
    33bc:	99 87       	std	Y+9, r25	; 0x09
    33be:	aa 87       	std	Y+10, r26	; 0x0a
    33c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33c2:	68 85       	ldd	r22, Y+8	; 0x08
    33c4:	79 85       	ldd	r23, Y+9	; 0x09
    33c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	5f e3       	ldi	r21, 0x3F	; 63
    33d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d6:	88 23       	and	r24, r24
    33d8:	2c f4       	brge	.+10     	; 0x33e4 <LCD_voidSendChar+0x106>
		__ticks = 1;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	9f 83       	std	Y+7, r25	; 0x07
    33e0:	8e 83       	std	Y+6, r24	; 0x06
    33e2:	3f c0       	rjmp	.+126    	; 0x3462 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    33e4:	68 85       	ldd	r22, Y+8	; 0x08
    33e6:	79 85       	ldd	r23, Y+9	; 0x09
    33e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	3f ef       	ldi	r19, 0xFF	; 255
    33f0:	4f e7       	ldi	r20, 0x7F	; 127
    33f2:	57 e4       	ldi	r21, 0x47	; 71
    33f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f8:	18 16       	cp	r1, r24
    33fa:	4c f5       	brge	.+82     	; 0x344e <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    33fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    3400:	8e 85       	ldd	r24, Y+14	; 0x0e
    3402:	9f 85       	ldd	r25, Y+15	; 0x0f
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e2       	ldi	r20, 0x20	; 32
    340a:	51 e4       	ldi	r21, 0x41	; 65
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9f 83       	std	Y+7, r25	; 0x07
    3422:	8e 83       	std	Y+6, r24	; 0x06
    3424:	0f c0       	rjmp	.+30     	; 0x3444 <LCD_voidSendChar+0x166>
    3426:	88 ec       	ldi	r24, 0xC8	; 200
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	9d 83       	std	Y+5, r25	; 0x05
    342c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    342e:	8c 81       	ldd	r24, Y+4	; 0x04
    3430:	9d 81       	ldd	r25, Y+5	; 0x05
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <LCD_voidSendChar+0x154>
    3436:	9d 83       	std	Y+5, r25	; 0x05
    3438:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343a:	8e 81       	ldd	r24, Y+6	; 0x06
    343c:	9f 81       	ldd	r25, Y+7	; 0x07
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	9f 83       	std	Y+7, r25	; 0x07
    3442:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3444:	8e 81       	ldd	r24, Y+6	; 0x06
    3446:	9f 81       	ldd	r25, Y+7	; 0x07
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	69 f7       	brne	.-38     	; 0x3426 <LCD_voidSendChar+0x148>
    344c:	24 c0       	rjmp	.+72     	; 0x3496 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344e:	68 85       	ldd	r22, Y+8	; 0x08
    3450:	79 85       	ldd	r23, Y+9	; 0x09
    3452:	8a 85       	ldd	r24, Y+10	; 0x0a
    3454:	9b 85       	ldd	r25, Y+11	; 0x0b
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9f 83       	std	Y+7, r25	; 0x07
    3460:	8e 83       	std	Y+6, r24	; 0x06
    3462:	8e 81       	ldd	r24, Y+6	; 0x06
    3464:	9f 81       	ldd	r25, Y+7	; 0x07
    3466:	9b 83       	std	Y+3, r25	; 0x03
    3468:	8a 83       	std	Y+2, r24	; 0x02
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	9b 81       	ldd	r25, Y+3	; 0x03
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <LCD_voidSendChar+0x190>
    3472:	9b 83       	std	Y+3, r25	; 0x03
    3474:	8a 83       	std	Y+2, r24	; 0x02
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3478:	69 89       	ldd	r22, Y+17	; 0x11
    347a:	7a 89       	ldd	r23, Y+18	; 0x12
    347c:	8b 89       	ldd	r24, Y+19	; 0x13
    347e:	9c 89       	ldd	r25, Y+20	; 0x14
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	88 8b       	std	Y+16, r24	; 0x10
    348a:	88 89       	ldd	r24, Y+16	; 0x10
    348c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	8a 95       	dec	r24
    3492:	f1 f7       	brne	.-4      	; 0x3490 <LCD_voidSendChar+0x1b2>
    3494:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
	
}
    34a0:	69 96       	adiw	r28, 0x19	; 25
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <LCD_voidSendString+0x6>
    34b8:	0f 92       	push	r0
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	9b 83       	std	Y+3, r25	; 0x03
    34c0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    34c2:	19 82       	std	Y+1, r1	; 0x01
    34c4:	0e c0       	rjmp	.+28     	; 0x34e2 <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	9b 81       	ldd	r25, Y+3	; 0x03
    34d0:	fc 01       	movw	r30, r24
    34d2:	e2 0f       	add	r30, r18
    34d4:	f3 1f       	adc	r31, r19
    34d6:	80 81       	ld	r24, Z
    34d8:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	8f 5f       	subi	r24, 0xFF	; 255
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	9b 81       	ldd	r25, Y+3	; 0x03
    34ec:	fc 01       	movw	r30, r24
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	80 81       	ld	r24, Z
    34f4:	88 23       	and	r24, r24
    34f6:	39 f7       	brne	.-50     	; 0x34c6 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <LCD_voidSetLocation+0x6>
    350a:	00 d0       	rcall	.+0      	; 0x350c <LCD_voidSetLocation+0x8>
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	89 83       	std	Y+1, r24	; 0x01
    3512:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	28 2f       	mov	r18, r24
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	3c 83       	std	Y+4, r19	; 0x04
    351c:	2b 83       	std	Y+3, r18	; 0x03
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	9c 81       	ldd	r25, Y+4	; 0x04
    3522:	81 30       	cpi	r24, 0x01	; 1
    3524:	91 05       	cpc	r25, r1
    3526:	31 f0       	breq	.+12     	; 0x3534 <LCD_voidSetLocation+0x30>
    3528:	2b 81       	ldd	r18, Y+3	; 0x03
    352a:	3c 81       	ldd	r19, Y+4	; 0x04
    352c:	22 30       	cpi	r18, 0x02	; 2
    352e:	31 05       	cpc	r19, r1
    3530:	31 f0       	breq	.+12     	; 0x353e <LCD_voidSetLocation+0x3a>
    3532:	09 c0       	rjmp	.+18     	; 0x3546 <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	80 58       	subi	r24, 0x80	; 128
    3538:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>
    353c:	04 c0       	rjmp	.+8      	; 0x3546 <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	80 54       	subi	r24, 0x40	; 64
    3542:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>

	}
	
}
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	60 97       	sbiw	r28, 0x10	; 16
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	6d 87       	std	Y+13, r22	; 0x0d
    356e:	7e 87       	std	Y+14, r23	; 0x0e
    3570:	8f 87       	std	Y+15, r24	; 0x0f
    3572:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    3574:	89 e0       	ldi	r24, 0x09	; 9
    3576:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    3578:	8d 85       	ldd	r24, Y+13	; 0x0d
    357a:	9e 85       	ldd	r25, Y+14	; 0x0e
    357c:	af 85       	ldd	r26, Y+15	; 0x0f
    357e:	b8 89       	ldd	r27, Y+16	; 0x10
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	a1 05       	cpc	r26, r1
    3584:	b1 05       	cpc	r27, r1
    3586:	21 f4       	brne	.+8      	; 0x3590 <LCD_voidSendNumber+0x3c>
    3588:	80 e3       	ldi	r24, 0x30	; 48
    358a:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendChar>
    358e:	44 c0       	rjmp	.+136    	; 0x3618 <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    3590:	1c 86       	std	Y+12, r1	; 0x0c
    3592:	2e c0       	rjmp	.+92     	; 0x35f0 <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	08 2f       	mov	r16, r24
    3598:	10 e0       	ldi	r17, 0x00	; 0
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	af 85       	ldd	r26, Y+15	; 0x0f
    35a0:	b8 89       	ldd	r27, Y+16	; 0x10
    35a2:	2a e0       	ldi	r18, 0x0A	; 10
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__udivmodsi4>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	28 2f       	mov	r18, r24
    35b8:	20 5d       	subi	r18, 0xD0	; 208
    35ba:	ce 01       	movw	r24, r28
    35bc:	02 96       	adiw	r24, 0x02	; 2
    35be:	fc 01       	movw	r30, r24
    35c0:	e0 0f       	add	r30, r16
    35c2:	f1 1f       	adc	r31, r17
    35c4:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	af 85       	ldd	r26, Y+15	; 0x0f
    35cc:	b8 89       	ldd	r27, Y+16	; 0x10
    35ce:	2a e0       	ldi	r18, 0x0A	; 10
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__udivmodsi4>
    35de:	da 01       	movw	r26, r20
    35e0:	c9 01       	movw	r24, r18
    35e2:	8d 87       	std	Y+13, r24	; 0x0d
    35e4:	9e 87       	std	Y+14, r25	; 0x0e
    35e6:	af 87       	std	Y+15, r26	; 0x0f
    35e8:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	81 50       	subi	r24, 0x01	; 1
    35ee:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	af 85       	ldd	r26, Y+15	; 0x0f
    35f6:	b8 89       	ldd	r27, Y+16	; 0x10
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	a1 05       	cpc	r26, r1
    35fc:	b1 05       	cpc	r27, r1
    35fe:	51 f6       	brne	.-108    	; 0x3594 <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	9c 01       	movw	r18, r24
    3608:	2f 5f       	subi	r18, 0xFF	; 255
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	ce 01       	movw	r24, r28
    360e:	02 96       	adiw	r24, 0x02	; 2
    3610:	82 0f       	add	r24, r18
    3612:	93 1f       	adc	r25, r19
    3614:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <LCD_voidSendString>
	}
}
    3618:	60 96       	adiw	r28, 0x10	; 16
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret

0000362e <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	6c 97       	sbiw	r28, 0x1c	; 28
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	8a 8f       	std	Y+26, r24	; 0x1a
    3644:	7c 8f       	std	Y+28, r23	; 0x1c
    3646:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    3648:	8a 8d       	ldd	r24, Y+26	; 0x1a
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	08 96       	adiw	r24, 0x08	; 8
    3650:	88 0f       	add	r24, r24
    3652:	99 1f       	adc	r25, r25
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	0e 94 85 18 	call	0x310a	; 0x310a <LCD_voidSendCommand>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	a0 e2       	ldi	r26, 0x20	; 32
    3666:	b2 e4       	ldi	r27, 0x42	; 66
    3668:	8d 8b       	std	Y+21, r24	; 0x15
    366a:	9e 8b       	std	Y+22, r25	; 0x16
    366c:	af 8b       	std	Y+23, r26	; 0x17
    366e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3670:	6d 89       	ldd	r22, Y+21	; 0x15
    3672:	7e 89       	ldd	r23, Y+22	; 0x16
    3674:	8f 89       	ldd	r24, Y+23	; 0x17
    3676:	98 8d       	ldd	r25, Y+24	; 0x18
    3678:	2b ea       	ldi	r18, 0xAB	; 171
    367a:	3a ea       	ldi	r19, 0xAA	; 170
    367c:	4a e2       	ldi	r20, 0x2A	; 42
    367e:	50 e4       	ldi	r21, 0x40	; 64
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	89 8b       	std	Y+17, r24	; 0x11
    368a:	9a 8b       	std	Y+18, r25	; 0x12
    368c:	ab 8b       	std	Y+19, r26	; 0x13
    368e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3690:	69 89       	ldd	r22, Y+17	; 0x11
    3692:	7a 89       	ldd	r23, Y+18	; 0x12
    3694:	8b 89       	ldd	r24, Y+19	; 0x13
    3696:	9c 89       	ldd	r25, Y+20	; 0x14
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e8       	ldi	r20, 0x80	; 128
    369e:	5f e3       	ldi	r21, 0x3F	; 63
    36a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a4:	88 23       	and	r24, r24
    36a6:	1c f4       	brge	.+6      	; 0x36ae <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	88 8b       	std	Y+16, r24	; 0x10
    36ac:	91 c0       	rjmp	.+290    	; 0x37d0 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    36ae:	69 89       	ldd	r22, Y+17	; 0x11
    36b0:	7a 89       	ldd	r23, Y+18	; 0x12
    36b2:	8b 89       	ldd	r24, Y+19	; 0x13
    36b4:	9c 89       	ldd	r25, Y+20	; 0x14
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	53 e4       	ldi	r21, 0x43	; 67
    36be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	0c f0       	brlt	.+2      	; 0x36c8 <LCD_voidDrawSpecialChar+0x9a>
    36c6:	7b c0       	rjmp	.+246    	; 0x37be <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    36c8:	6d 89       	ldd	r22, Y+21	; 0x15
    36ca:	7e 89       	ldd	r23, Y+22	; 0x16
    36cc:	8f 89       	ldd	r24, Y+23	; 0x17
    36ce:	98 8d       	ldd	r25, Y+24	; 0x18
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	4a e7       	ldi	r20, 0x7A	; 122
    36d6:	54 e4       	ldi	r21, 0x44	; 68
    36d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	8c 87       	std	Y+12, r24	; 0x0c
    36e2:	9d 87       	std	Y+13, r25	; 0x0d
    36e4:	ae 87       	std	Y+14, r26	; 0x0e
    36e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    36ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    36ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    36ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	4a ef       	ldi	r20, 0xFA	; 250
    36f6:	54 e4       	ldi	r21, 0x44	; 68
    36f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	88 87       	std	Y+8, r24	; 0x08
    3702:	99 87       	std	Y+9, r25	; 0x09
    3704:	aa 87       	std	Y+10, r26	; 0x0a
    3706:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3708:	68 85       	ldd	r22, Y+8	; 0x08
    370a:	79 85       	ldd	r23, Y+9	; 0x09
    370c:	8a 85       	ldd	r24, Y+10	; 0x0a
    370e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	2c f4       	brge	.+10     	; 0x372a <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9f 83       	std	Y+7, r25	; 0x07
    3726:	8e 83       	std	Y+6, r24	; 0x06
    3728:	3f c0       	rjmp	.+126    	; 0x37a8 <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    372a:	68 85       	ldd	r22, Y+8	; 0x08
    372c:	79 85       	ldd	r23, Y+9	; 0x09
    372e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3730:	9b 85       	ldd	r25, Y+11	; 0x0b
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	4c f5       	brge	.+82     	; 0x3794 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3742:	6c 85       	ldd	r22, Y+12	; 0x0c
    3744:	7d 85       	ldd	r23, Y+13	; 0x0d
    3746:	8e 85       	ldd	r24, Y+14	; 0x0e
    3748:	9f 85       	ldd	r25, Y+15	; 0x0f
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	9f 83       	std	Y+7, r25	; 0x07
    3768:	8e 83       	std	Y+6, r24	; 0x06
    376a:	0f c0       	rjmp	.+30     	; 0x378a <LCD_voidDrawSpecialChar+0x15c>
    376c:	88 ec       	ldi	r24, 0xC8	; 200
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9d 83       	std	Y+5, r25	; 0x05
    3772:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3774:	8c 81       	ldd	r24, Y+4	; 0x04
    3776:	9d 81       	ldd	r25, Y+5	; 0x05
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <LCD_voidDrawSpecialChar+0x14a>
    377c:	9d 83       	std	Y+5, r25	; 0x05
    377e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3780:	8e 81       	ldd	r24, Y+6	; 0x06
    3782:	9f 81       	ldd	r25, Y+7	; 0x07
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	9f 83       	std	Y+7, r25	; 0x07
    3788:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378a:	8e 81       	ldd	r24, Y+6	; 0x06
    378c:	9f 81       	ldd	r25, Y+7	; 0x07
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	69 f7       	brne	.-38     	; 0x376c <LCD_voidDrawSpecialChar+0x13e>
    3792:	24 c0       	rjmp	.+72     	; 0x37dc <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3794:	68 85       	ldd	r22, Y+8	; 0x08
    3796:	79 85       	ldd	r23, Y+9	; 0x09
    3798:	8a 85       	ldd	r24, Y+10	; 0x0a
    379a:	9b 85       	ldd	r25, Y+11	; 0x0b
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9f 83       	std	Y+7, r25	; 0x07
    37a6:	8e 83       	std	Y+6, r24	; 0x06
    37a8:	8e 81       	ldd	r24, Y+6	; 0x06
    37aa:	9f 81       	ldd	r25, Y+7	; 0x07
    37ac:	9b 83       	std	Y+3, r25	; 0x03
    37ae:	8a 83       	std	Y+2, r24	; 0x02
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	9b 81       	ldd	r25, Y+3	; 0x03
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <LCD_voidDrawSpecialChar+0x186>
    37b8:	9b 83       	std	Y+3, r25	; 0x03
    37ba:	8a 83       	std	Y+2, r24	; 0x02
    37bc:	0f c0       	rjmp	.+30     	; 0x37dc <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37be:	69 89       	ldd	r22, Y+17	; 0x11
    37c0:	7a 89       	ldd	r23, Y+18	; 0x12
    37c2:	8b 89       	ldd	r24, Y+19	; 0x13
    37c4:	9c 89       	ldd	r25, Y+20	; 0x14
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	88 8b       	std	Y+16, r24	; 0x10
    37d0:	88 89       	ldd	r24, Y+16	; 0x10
    37d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	8a 95       	dec	r24
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LCD_voidDrawSpecialChar+0x1a8>
    37da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    37dc:	19 8e       	std	Y+25, r1	; 0x19
    37de:	0e c0       	rjmp	.+28     	; 0x37fc <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    37e0:	89 8d       	ldd	r24, Y+25	; 0x19
    37e2:	28 2f       	mov	r18, r24
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ea:	fc 01       	movw	r30, r24
    37ec:	e2 0f       	add	r30, r18
    37ee:	f3 1f       	adc	r31, r19
    37f0:	80 81       	ld	r24, Z
    37f2:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    37f6:	89 8d       	ldd	r24, Y+25	; 0x19
    37f8:	8f 5f       	subi	r24, 0xFF	; 255
    37fa:	89 8f       	std	Y+25, r24	; 0x19
    37fc:	89 8d       	ldd	r24, Y+25	; 0x19
    37fe:	88 30       	cpi	r24, 0x08	; 8
    3800:	78 f3       	brcs	.-34     	; 0x37e0 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    3802:	6c 96       	adiw	r28, 0x1c	; 28
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	de bf       	out	0x3e, r29	; 62
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	cd bf       	out	0x3d, r28	; 61
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	0f 92       	push	r0
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendChar>
}
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <KPD_voidInit>:

u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};     // rows -> output
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};	// columns -> input


void KPD_voidInit(void){
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	0f 92       	push	r0
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    3838:	19 82       	std	Y+1, r1	; 0x01
    383a:	20 c0       	rjmp	.+64     	; 0x387c <KPD_voidInit+0x4e>
		if (Local_u8Count < 4) {
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	84 30       	cpi	r24, 0x04	; 4
    3840:	68 f4       	brcc	.+26     	; 0x385c <KPD_voidInit+0x2e>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_OUTPUT);
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	fc 01       	movw	r30, r24
    384a:	e6 58       	subi	r30, 0x86	; 134
    384c:	fe 4f       	sbci	r31, 0xFE	; 254
    384e:	90 81       	ld	r25, Z
    3850:	82 e0       	ldi	r24, 0x02	; 2
    3852:	69 2f       	mov	r22, r25
    3854:	41 e0       	ldi	r20, 0x01	; 1
    3856:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>
    385a:	0d c0       	rjmp	.+26     	; 0x3876 <KPD_voidInit+0x48>

		} else {
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	04 97       	sbiw	r24, 0x04	; 4
    3864:	fc 01       	movw	r30, r24
    3866:	e2 58       	subi	r30, 0x82	; 130
    3868:	fe 4f       	sbci	r31, 0xFE	; 254
    386a:	90 81       	ld	r25, Z
    386c:	82 e0       	ldi	r24, 0x02	; 2
    386e:	69 2f       	mov	r22, r25
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_voidSetPinDirection>


void KPD_voidInit(void){

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	8f 5f       	subi	r24, 0xFF	; 255
    387a:	89 83       	std	Y+1, r24	; 0x01
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	88 30       	cpi	r24, 0x08	; 8
    3880:	e8 f2       	brcs	.-70     	; 0x383c <KPD_voidInit+0xe>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
		}

	}

	DIO_voidSetPortValue(KPD_PORT, 0xff);
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	6f ef       	ldi	r22, 0xFF	; 255
    3886:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>

}
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	63 97       	sbiw	r28, 0x13	; 19
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
    38a6:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;
    38a8:	8f ef       	ldi	r24, 0xFF	; 255
    38aa:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    38ac:	1b 8a       	std	Y+19, r1	; 0x13
    38ae:	dd c0       	rjmp	.+442    	; 0x3a6a <KPD_u8GetPressedKey+0x1d8>
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    38b0:	8b 89       	ldd	r24, Y+19	; 0x13
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	fc 01       	movw	r30, r24
    38b8:	e6 58       	subi	r30, 0x86	; 134
    38ba:	fe 4f       	sbci	r31, 0xFE	; 254
    38bc:	90 81       	ld	r25, Z
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	69 2f       	mov	r22, r25
    38c2:	40 e0       	ldi	r20, 0x00	; 0
    38c4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    38c8:	1a 8a       	std	Y+18, r1	; 0x12
    38ca:	b9 c0       	rjmp	.+370    	; 0x3a3e <KPD_u8GetPressedKey+0x1ac>
			/* check if any button was pressed*/
			Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    38cc:	8a 89       	ldd	r24, Y+18	; 0x12
    38ce:	88 2f       	mov	r24, r24
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	fc 01       	movw	r30, r24
    38d4:	e2 58       	subi	r30, 0x82	; 130
    38d6:	fe 4f       	sbci	r31, 0xFE	; 254
    38d8:	90 81       	ld	r25, Z
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	69 2f       	mov	r22, r25
    38de:	0e 94 2b 10 	call	0x2056	; 0x2056 <DIO_u8GetPinValue>
    38e2:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8Pressed == 0){
    38e4:	89 89       	ldd	r24, Y+17	; 0x11
    38e6:	88 23       	and	r24, r24
    38e8:	09 f0       	breq	.+2      	; 0x38ec <KPD_u8GetPressedKey+0x5a>
    38ea:	a6 c0       	rjmp	.+332    	; 0x3a38 <KPD_u8GetPressedKey+0x1a6>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a8 ec       	ldi	r26, 0xC8	; 200
    38f2:	b1 e4       	ldi	r27, 0x41	; 65
    38f4:	8b 87       	std	Y+11, r24	; 0x0b
    38f6:	9c 87       	std	Y+12, r25	; 0x0c
    38f8:	ad 87       	std	Y+13, r26	; 0x0d
    38fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a ef       	ldi	r20, 0xFA	; 250
    390a:	54 e4       	ldi	r21, 0x44	; 68
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8f 83       	std	Y+7, r24	; 0x07
    3916:	98 87       	std	Y+8, r25	; 0x08
    3918:	a9 87       	std	Y+9, r26	; 0x09
    391a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <KPD_u8GetPressedKey+0xac>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <KPD_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    393e:	6f 81       	ldd	r22, Y+7	; 0x07
    3940:	78 85       	ldd	r23, Y+8	; 0x08
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <KPD_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6b 85       	ldd	r22, Y+11	; 0x0b
    3958:	7c 85       	ldd	r23, Y+12	; 0x0c
    395a:	8d 85       	ldd	r24, Y+13	; 0x0d
    395c:	9e 85       	ldd	r25, Y+14	; 0x0e
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	0f c0       	rjmp	.+30     	; 0x399e <KPD_u8GetPressedKey+0x10c>
    3980:	88 ec       	ldi	r24, 0xC8	; 200
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	9c 81       	ldd	r25, Y+4	; 0x04
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <KPD_u8GetPressedKey+0xfa>
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <KPD_u8GetPressedKey+0xee>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <KPD_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6f 81       	ldd	r22, Y+7	; 0x07
    39aa:	78 85       	ldd	r23, Y+8	; 0x08
    39ac:	89 85       	ldd	r24, Y+9	; 0x09
    39ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
    39bc:	8d 81       	ldd	r24, Y+5	; 0x05
    39be:	9e 81       	ldd	r25, Y+6	; 0x06
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <KPD_u8GetPressedKey+0x136>
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
				/* waite for debouncing*/
				_delay_ms(25);
				/* checking for noise*/
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    39d0:	8a 89       	ldd	r24, Y+18	; 0x12
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	fc 01       	movw	r30, r24
    39d8:	e2 58       	subi	r30, 0x82	; 130
    39da:	fe 4f       	sbci	r31, 0xFE	; 254
    39dc:	90 81       	ld	r25, Z
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	69 2f       	mov	r22, r25
    39e2:	0e 94 2b 10 	call	0x2056	; 0x2056 <DIO_u8GetPinValue>
    39e6:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8Pressed == 0){
    39e8:	89 89       	ldd	r24, Y+17	; 0x11
    39ea:	88 23       	and	r24, r24
    39ec:	29 f5       	brne	.+74     	; 0x3a38 <KPD_u8GetPressedKey+0x1a6>
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];
    39ee:	8b 89       	ldd	r24, Y+19	; 0x13
    39f0:	48 2f       	mov	r20, r24
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	8a 89       	ldd	r24, Y+18	; 0x12
    39f6:	28 2f       	mov	r18, r24
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	ca 01       	movw	r24, r20
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	82 0f       	add	r24, r18
    3a06:	93 1f       	adc	r25, r19
    3a08:	fc 01       	movw	r30, r24
    3a0a:	e6 59       	subi	r30, 0x96	; 150
    3a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0e:	80 81       	ld	r24, Z
    3a10:	8f 87       	std	Y+15, r24	; 0x0f
    3a12:	0c c0       	rjmp	.+24     	; 0x3a2c <KPD_u8GetPressedKey+0x19a>

					/* handling long press*/
					while(Local_u8Pressed == 0){
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3a14:	8a 89       	ldd	r24, Y+18	; 0x12
    3a16:	88 2f       	mov	r24, r24
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	e2 58       	subi	r30, 0x82	; 130
    3a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a20:	90 81       	ld	r25, Z
    3a22:	82 e0       	ldi	r24, 0x02	; 2
    3a24:	69 2f       	mov	r22, r25
    3a26:	0e 94 2b 10 	call	0x2056	; 0x2056 <DIO_u8GetPinValue>
    3a2a:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
				if(Local_u8Pressed == 0){
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];

					/* handling long press*/
					while(Local_u8Pressed == 0){
    3a2c:	89 89       	ldd	r24, Y+17	; 0x11
    3a2e:	88 23       	and	r24, r24
    3a30:	89 f3       	breq	.-30     	; 0x3a14 <KPD_u8GetPressedKey+0x182>
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
					}
					Local_u8Flag =1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	88 8b       	std	Y+16, r24	; 0x10
    3a36:	07 c0       	rjmp	.+14     	; 0x3a46 <KPD_u8GetPressedKey+0x1b4>

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    3a38:	8a 89       	ldd	r24, Y+18	; 0x12
    3a3a:	8f 5f       	subi	r24, 0xFF	; 255
    3a3c:	8a 8b       	std	Y+18, r24	; 0x12
    3a3e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a40:	84 30       	cpi	r24, 0x04	; 4
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <KPD_u8GetPressedKey+0x1b4>
    3a44:	43 cf       	rjmp	.-378    	; 0x38cc <KPD_u8GetPressedKey+0x3a>
					break;
				}
			}
		}

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    3a46:	8b 89       	ldd	r24, Y+19	; 0x13
    3a48:	88 2f       	mov	r24, r24
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	e6 58       	subi	r30, 0x86	; 134
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	90 81       	ld	r25, Z
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	69 2f       	mov	r22, r25
    3a58:	41 e0       	ldi	r20, 0x01	; 1
    3a5a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_voidSetPinValue>
		if (Local_u8Flag == 1) {break;}
    3a5e:	88 89       	ldd	r24, Y+16	; 0x10
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	39 f0       	breq	.+14     	; 0x3a72 <KPD_u8GetPressedKey+0x1e0>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    3a64:	8b 89       	ldd	r24, Y+19	; 0x13
    3a66:	8f 5f       	subi	r24, 0xFF	; 255
    3a68:	8b 8b       	std	Y+19, r24	; 0x13
    3a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6c:	84 30       	cpi	r24, 0x04	; 4
    3a6e:	08 f4       	brcc	.+2      	; 0x3a72 <KPD_u8GetPressedKey+0x1e0>
    3a70:	1f cf       	rjmp	.-450    	; 0x38b0 <KPD_u8GetPressedKey+0x1e>

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
		if (Local_u8Flag == 1) {break;}
	}

	return Local_u8ReturnedVal;
    3a72:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3a74:	63 96       	adiw	r28, 0x13	; 19
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	08 95       	ret

00003a86 <EEPROM_VidWriteDataByte>:
#define uniquAdderess		0x50		// 0b01010000
/***********************************************/


void EEPROM_VidWriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8Data) // 0b01010011
{
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	61 97       	sbiw	r28, 0x11	; 17
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	98 8b       	std	Y+16, r25	; 0x10
    3a9c:	8f 87       	std	Y+15, r24	; 0x0f
    3a9e:	69 8b       	std	Y+17, r22	; 0x11
	/* Start condition */
	TWI_voidStartCondition();
    3aa0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TWI_voidStartCondition>

	/* Send Byte Address with write operation */
	TWI_voidSlaveAddressWrite(uniquAdderess|(A2<<2)|(Copy_u16ByteAddress>>8));
    3aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa6:	98 89       	ldd	r25, Y+16	; 0x10
    3aa8:	89 2f       	mov	r24, r25
    3aaa:	99 27       	eor	r25, r25
    3aac:	80 65       	ori	r24, 0x50	; 80
    3aae:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab4:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <TWI_voidMasterSendData>

	/*Send Data*/
	TWI_voidMasterSendData(Copy_u8Data);
    3ab8:	89 89       	ldd	r24, Y+17	; 0x11
    3aba:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <TWI_voidMasterSendData>

	/* stop condition */
	TWI_voidStopCondition();
    3abe:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <TWI_voidStopCondition>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a0 e2       	ldi	r26, 0x20	; 32
    3ac8:	b1 e4       	ldi	r27, 0x41	; 65
    3aca:	8b 87       	std	Y+11, r24	; 0x0b
    3acc:	9c 87       	std	Y+12, r25	; 0x0c
    3ace:	ad 87       	std	Y+13, r26	; 0x0d
    3ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a ef       	ldi	r20, 0xFA	; 250
    3ae0:	54 e4       	ldi	r21, 0x44	; 68
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8f 83       	std	Y+7, r24	; 0x07
    3aec:	98 87       	std	Y+8, r25	; 0x08
    3aee:	a9 87       	std	Y+9, r26	; 0x09
    3af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <EEPROM_VidWriteDataByte+0x8e>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <EEPROM_VidWriteDataByte+0x10c>
	else if (__tmp > 65535)
    3b14:	6f 81       	ldd	r22, Y+7	; 0x07
    3b16:	78 85       	ldd	r23, Y+8	; 0x08
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <EEPROM_VidWriteDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <EEPROM_VidWriteDataByte+0xee>
    3b56:	88 ec       	ldi	r24, 0xC8	; 200
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	9c 83       	std	Y+4, r25	; 0x04
    3b5c:	8b 83       	std	Y+3, r24	; 0x03
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	9c 81       	ldd	r25, Y+4	; 0x04
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <EEPROM_VidWriteDataByte+0xdc>
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <EEPROM_VidWriteDataByte+0xd0>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <EEPROM_VidWriteDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b80:	78 85       	ldd	r23, Y+8	; 0x08
    3b82:	89 85       	ldd	r24, Y+9	; 0x09
    3b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9e 83       	std	Y+6, r25	; 0x06
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	8d 81       	ldd	r24, Y+5	; 0x05
    3b94:	9e 81       	ldd	r25, Y+6	; 0x06
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <EEPROM_VidWriteDataByte+0x118>
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01

	/* delay 5 ms for rewrite */
	_delay_ms(10);
}
    3ba6:	61 96       	adiw	r28, 0x11	; 17
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress)
{
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	00 d0       	rcall	.+0      	; 0x3bbe <EEPROM_u8ReadDataByte+0x6>
    3bbe:	0f 92       	push	r0
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	9b 83       	std	Y+3, r25	; 0x03
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8data;
	/* Start condition */
	TWI_voidStartCondition();
    3bc8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TWI_voidStartCondition>

	/*Send Byte Address with Write operation*/
	TWI_voidSlaveAddressWrite((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	89 2f       	mov	r24, r25
    3bd2:	99 27       	eor	r25, r25
    3bd4:	80 65       	ori	r24, 0x50	; 80
    3bd6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3bda:	8a 81       	ldd	r24, Y+2	; 0x02
    3bdc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <TWI_voidMasterSendData>

	/*Send Repeat start condition*/
	TWI_voidStartCondition();
    3be0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TWI_voidStartCondition>

	/*Send Byte Address with Read operation*/
	TWI_voidSlaveAddressRead((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	9b 81       	ldd	r25, Y+3	; 0x03
    3be8:	89 2f       	mov	r24, r25
    3bea:	99 27       	eor	r25, r25
    3bec:	80 65       	ori	r24, 0x50	; 80
    3bee:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TWI_voidSlaveAddressRead>

	Local_u8data = TWI_u8MasterReceiveData();
    3bf2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <TWI_u8MasterReceiveData>
    3bf6:	89 83       	std	Y+1, r24	; 0x01

	/* stop condition */
	TWI_voidStopCondition();
    3bf8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <TWI_voidStopCondition>

	return Local_u8data;
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <SSD_voidInit>:
#include "../../MCAL//DIO/DIO.h"
#include "SSD.h"



void SSD_voidInit(void){
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SSD_PORT,DIO_OUTPUT_PORT);
    3c12:	83 e0       	ldi	r24, 0x03	; 3
    3c14:	6f ef       	ldi	r22, 0xFF	; 255
    3c16:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <DIO_voidSetPortDirection>
}
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	08 95       	ret

00003c20 <SSD_voidKPDToSSD>:

void SSD_voidKPDToSSD(u8 Copy_u8Char){
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <SSD_voidKPDToSSD+0x6>
    3c26:	0f 92       	push	r0
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Char){
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	3b 83       	std	Y+3, r19	; 0x03
    3c36:	2a 83       	std	Y+2, r18	; 0x02
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c3c:	85 33       	cpi	r24, 0x35	; 53
    3c3e:	91 05       	cpc	r25, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <SSD_voidKPDToSSD+0x24>
    3c42:	60 c0       	rjmp	.+192    	; 0x3d04 <SSD_voidKPDToSSD+0xe4>
    3c44:	2a 81       	ldd	r18, Y+2	; 0x02
    3c46:	3b 81       	ldd	r19, Y+3	; 0x03
    3c48:	26 33       	cpi	r18, 0x36	; 54
    3c4a:	31 05       	cpc	r19, r1
    3c4c:	0c f5       	brge	.+66     	; 0x3c90 <SSD_voidKPDToSSD+0x70>
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	9b 81       	ldd	r25, Y+3	; 0x03
    3c52:	82 33       	cpi	r24, 0x32	; 50
    3c54:	91 05       	cpc	r25, r1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <SSD_voidKPDToSSD+0x3a>
    3c58:	46 c0       	rjmp	.+140    	; 0x3ce6 <SSD_voidKPDToSSD+0xc6>
    3c5a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c5c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c5e:	23 33       	cpi	r18, 0x33	; 51
    3c60:	31 05       	cpc	r19, r1
    3c62:	5c f4       	brge	.+22     	; 0x3c7a <SSD_voidKPDToSSD+0x5a>
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	9b 81       	ldd	r25, Y+3	; 0x03
    3c68:	80 33       	cpi	r24, 0x30	; 48
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	91 f1       	breq	.+100    	; 0x3cd2 <SSD_voidKPDToSSD+0xb2>
    3c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c70:	3b 81       	ldd	r19, Y+3	; 0x03
    3c72:	21 33       	cpi	r18, 0x31	; 49
    3c74:	31 05       	cpc	r19, r1
    3c76:	91 f1       	breq	.+100    	; 0x3cdc <SSD_voidKPDToSSD+0xbc>
    3c78:	63 c0       	rjmp	.+198    	; 0x3d40 <SSD_voidKPDToSSD+0x120>
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7e:	83 33       	cpi	r24, 0x33	; 51
    3c80:	91 05       	cpc	r25, r1
    3c82:	b1 f1       	breq	.+108    	; 0x3cf0 <SSD_voidKPDToSSD+0xd0>
    3c84:	2a 81       	ldd	r18, Y+2	; 0x02
    3c86:	3b 81       	ldd	r19, Y+3	; 0x03
    3c88:	24 33       	cpi	r18, 0x34	; 52
    3c8a:	31 05       	cpc	r19, r1
    3c8c:	b1 f1       	breq	.+108    	; 0x3cfa <SSD_voidKPDToSSD+0xda>
    3c8e:	58 c0       	rjmp	.+176    	; 0x3d40 <SSD_voidKPDToSSD+0x120>
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	9b 81       	ldd	r25, Y+3	; 0x03
    3c94:	88 33       	cpi	r24, 0x38	; 56
    3c96:	91 05       	cpc	r25, r1
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <SSD_voidKPDToSSD+0x7c>
    3c9a:	43 c0       	rjmp	.+134    	; 0x3d22 <SSD_voidKPDToSSD+0x102>
    3c9c:	2a 81       	ldd	r18, Y+2	; 0x02
    3c9e:	3b 81       	ldd	r19, Y+3	; 0x03
    3ca0:	29 33       	cpi	r18, 0x39	; 57
    3ca2:	31 05       	cpc	r19, r1
    3ca4:	5c f4       	brge	.+22     	; 0x3cbc <SSD_voidKPDToSSD+0x9c>
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    3caa:	86 33       	cpi	r24, 0x36	; 54
    3cac:	91 05       	cpc	r25, r1
    3cae:	79 f1       	breq	.+94     	; 0x3d0e <SSD_voidKPDToSSD+0xee>
    3cb0:	2a 81       	ldd	r18, Y+2	; 0x02
    3cb2:	3b 81       	ldd	r19, Y+3	; 0x03
    3cb4:	27 33       	cpi	r18, 0x37	; 55
    3cb6:	31 05       	cpc	r19, r1
    3cb8:	79 f1       	breq	.+94     	; 0x3d18 <SSD_voidKPDToSSD+0xf8>
    3cba:	42 c0       	rjmp	.+132    	; 0x3d40 <SSD_voidKPDToSSD+0x120>
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc0:	89 33       	cpi	r24, 0x39	; 57
    3cc2:	91 05       	cpc	r25, r1
    3cc4:	99 f1       	breq	.+102    	; 0x3d2c <SSD_voidKPDToSSD+0x10c>
    3cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3cc8:	3b 81       	ldd	r19, Y+3	; 0x03
    3cca:	23 34       	cpi	r18, 0x43	; 67
    3ccc:	31 05       	cpc	r19, r1
    3cce:	99 f1       	breq	.+102    	; 0x3d36 <SSD_voidKPDToSSD+0x116>
    3cd0:	37 c0       	rjmp	.+110    	; 0x3d40 <SSD_voidKPDToSSD+0x120>
	case '0': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3cd2:	83 e0       	ldi	r24, 0x03	; 3
    3cd4:	6f e3       	ldi	r22, 0x3F	; 63
    3cd6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3cda:	36 c0       	rjmp	.+108    	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '1': DIO_voidSetPortValue(SSD_PORT,ONE); break;
    3cdc:	83 e0       	ldi	r24, 0x03	; 3
    3cde:	66 e0       	ldi	r22, 0x06	; 6
    3ce0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3ce4:	31 c0       	rjmp	.+98     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '2': DIO_voidSetPortValue(SSD_PORT,TWO); break;
    3ce6:	83 e0       	ldi	r24, 0x03	; 3
    3ce8:	6b e5       	ldi	r22, 0x5B	; 91
    3cea:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3cee:	2c c0       	rjmp	.+88     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '3': DIO_voidSetPortValue(SSD_PORT,THREE); break;
    3cf0:	83 e0       	ldi	r24, 0x03	; 3
    3cf2:	6f e4       	ldi	r22, 0x4F	; 79
    3cf4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3cf8:	27 c0       	rjmp	.+78     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '4': DIO_voidSetPortValue(SSD_PORT,FOUR); break;
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	66 e6       	ldi	r22, 0x66	; 102
    3cfe:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d02:	22 c0       	rjmp	.+68     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '5': DIO_voidSetPortValue(SSD_PORT,FIVE); break;
    3d04:	83 e0       	ldi	r24, 0x03	; 3
    3d06:	6d e6       	ldi	r22, 0x6D	; 109
    3d08:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d0c:	1d c0       	rjmp	.+58     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '6': DIO_voidSetPortValue(SSD_PORT,SIX); break;
    3d0e:	83 e0       	ldi	r24, 0x03	; 3
    3d10:	6d e7       	ldi	r22, 0x7D	; 125
    3d12:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d16:	18 c0       	rjmp	.+48     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '7': DIO_voidSetPortValue(SSD_PORT,SEVEN); break;
    3d18:	83 e0       	ldi	r24, 0x03	; 3
    3d1a:	67 e0       	ldi	r22, 0x07	; 7
    3d1c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d20:	13 c0       	rjmp	.+38     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '8': DIO_voidSetPortValue(SSD_PORT,EIGHT); break;
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	6f e7       	ldi	r22, 0x7F	; 127
    3d26:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d2a:	0e c0       	rjmp	.+28     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case '9': DIO_voidSetPortValue(SSD_PORT,NINE); break;
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	6f e6       	ldi	r22, 0x6F	; 111
    3d30:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d34:	09 c0       	rjmp	.+18     	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	case 'C': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    3d36:	83 e0       	ldi	r24, 0x03	; 3
    3d38:	6f e3       	ldi	r22, 0x3F	; 63
    3d3a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
    3d3e:	04 c0       	rjmp	.+8      	; 0x3d48 <SSD_voidKPDToSSD+0x128>
	default : DIO_voidSetPortValue(SSD_PORT,0b01001001); break;
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	69 e4       	ldi	r22, 0x49	; 73
    3d44:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_voidSetPortValue>
	}
}
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "HAL/Stepper_Motor/STPMR.h"


int main(void){
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	STP_voidInit();
    3d5c:	0e 94 1d 11 	call	0x223a	; 0x223a <STP_voidInit>

	while(1){
		STP_voidRotateCW();
    3d60:	0e 94 38 11 	call	0x2270	; 0x2270 <STP_voidRotateCW>
    3d64:	fd cf       	rjmp	.-6      	; 0x3d60 <main+0xc>

00003d66 <__udivmodsi4>:
    3d66:	a1 e2       	ldi	r26, 0x21	; 33
    3d68:	1a 2e       	mov	r1, r26
    3d6a:	aa 1b       	sub	r26, r26
    3d6c:	bb 1b       	sub	r27, r27
    3d6e:	fd 01       	movw	r30, r26
    3d70:	0d c0       	rjmp	.+26     	; 0x3d8c <__udivmodsi4_ep>

00003d72 <__udivmodsi4_loop>:
    3d72:	aa 1f       	adc	r26, r26
    3d74:	bb 1f       	adc	r27, r27
    3d76:	ee 1f       	adc	r30, r30
    3d78:	ff 1f       	adc	r31, r31
    3d7a:	a2 17       	cp	r26, r18
    3d7c:	b3 07       	cpc	r27, r19
    3d7e:	e4 07       	cpc	r30, r20
    3d80:	f5 07       	cpc	r31, r21
    3d82:	20 f0       	brcs	.+8      	; 0x3d8c <__udivmodsi4_ep>
    3d84:	a2 1b       	sub	r26, r18
    3d86:	b3 0b       	sbc	r27, r19
    3d88:	e4 0b       	sbc	r30, r20
    3d8a:	f5 0b       	sbc	r31, r21

00003d8c <__udivmodsi4_ep>:
    3d8c:	66 1f       	adc	r22, r22
    3d8e:	77 1f       	adc	r23, r23
    3d90:	88 1f       	adc	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	1a 94       	dec	r1
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <__udivmodsi4_loop>
    3d98:	60 95       	com	r22
    3d9a:	70 95       	com	r23
    3d9c:	80 95       	com	r24
    3d9e:	90 95       	com	r25
    3da0:	9b 01       	movw	r18, r22
    3da2:	ac 01       	movw	r20, r24
    3da4:	bd 01       	movw	r22, r26
    3da6:	cf 01       	movw	r24, r30
    3da8:	08 95       	ret

00003daa <__prologue_saves__>:
    3daa:	2f 92       	push	r2
    3dac:	3f 92       	push	r3
    3dae:	4f 92       	push	r4
    3db0:	5f 92       	push	r5
    3db2:	6f 92       	push	r6
    3db4:	7f 92       	push	r7
    3db6:	8f 92       	push	r8
    3db8:	9f 92       	push	r9
    3dba:	af 92       	push	r10
    3dbc:	bf 92       	push	r11
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	ca 1b       	sub	r28, r26
    3dd4:	db 0b       	sbc	r29, r27
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
    3de0:	09 94       	ijmp

00003de2 <__epilogue_restores__>:
    3de2:	2a 88       	ldd	r2, Y+18	; 0x12
    3de4:	39 88       	ldd	r3, Y+17	; 0x11
    3de6:	48 88       	ldd	r4, Y+16	; 0x10
    3de8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dea:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dec:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dee:	8c 84       	ldd	r8, Y+12	; 0x0c
    3df0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3df2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df4:	b9 84       	ldd	r11, Y+9	; 0x09
    3df6:	c8 84       	ldd	r12, Y+8	; 0x08
    3df8:	df 80       	ldd	r13, Y+7	; 0x07
    3dfa:	ee 80       	ldd	r14, Y+6	; 0x06
    3dfc:	fd 80       	ldd	r15, Y+5	; 0x05
    3dfe:	0c 81       	ldd	r16, Y+4	; 0x04
    3e00:	1b 81       	ldd	r17, Y+3	; 0x03
    3e02:	aa 81       	ldd	r26, Y+2	; 0x02
    3e04:	b9 81       	ldd	r27, Y+1	; 0x01
    3e06:	ce 0f       	add	r28, r30
    3e08:	d1 1d       	adc	r29, r1
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	ed 01       	movw	r28, r26
    3e16:	08 95       	ret

00003e18 <_exit>:
    3e18:	f8 94       	cli

00003e1a <__stop_program>:
    3e1a:	ff cf       	rjmp	.-2      	; 0x3e1a <__stop_program>
