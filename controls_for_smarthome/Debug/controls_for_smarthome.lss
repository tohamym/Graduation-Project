
controls_for_smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003d0c  00003da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800180  00800180  00003ec0  2**0
                  ALLOC
  3 .stab         000047d0  00000000  00000000  00003ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019d7  00000000  00000000  00008690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000a207  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000c803  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000db7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ed54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000ef14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000f207  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_10>
      2c:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <main>
      8a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_voidEnable>:
#include "../../LIB/BIT_Math.h"
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "WDT.h"

void WDT_voidEnable(u8 Copt_u8WaitingTime){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01

	/* enable watchdog */
	SET_BIT(WDTCR, WDE);
     e04:	a1 e4       	ldi	r26, 0x41	; 65
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e4       	ldi	r30, 0x41	; 65
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24

	/* select prescaler */
	WDTCR &= 0b11111000;
     e12:	a1 e4       	ldi	r26, 0x41	; 65
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e4       	ldi	r30, 0x41	; 65
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	88 7f       	andi	r24, 0xF8	; 248
     e1e:	8c 93       	st	X, r24
	WDTCR |= Copt_u8WaitingTime;
     e20:	a1 e4       	ldi	r26, 0x41	; 65
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e4       	ldi	r30, 0x41	; 65
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	90 81       	ld	r25, Z
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	89 2b       	or	r24, r25
     e2e:	8c 93       	st	X, r24

}
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <WDT_voidDisable>:


void WDT_voidDisable(void){
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDTCR |= (1<<WDTOE) | (1<<WDE);
     e40:	a1 e4       	ldi	r26, 0x41	; 65
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e1 e4       	ldi	r30, 0x41	; 65
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 61       	ori	r24, 0x18	; 24
     e4c:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     e4e:	e1 e4       	ldi	r30, 0x41	; 65
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <UART_voidInit>:
#include "../../LIB/STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <UART_voidInit+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
     e66:	83 e3       	ldi	r24, 0x33	; 51
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9b 83       	std	Y+3, r25	; 0x03
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
     e72:	e9 e2       	ldi	r30, 0x29	; 41
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
     e7a:	e0 e4       	ldi	r30, 0x40	; 64
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	89 2f       	mov	r24, r25
     e84:	99 27       	eor	r25, r25
     e86:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
     e88:	ab e2       	ldi	r26, 0x2B	; 43
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e2       	ldi	r30, 0x2B	; 43
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8d 7f       	andi	r24, 0xFD	; 253
     e94:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
     e96:	ab e2       	ldi	r26, 0x2B	; 43
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e2       	ldi	r30, 0x2B	; 43
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
     ea4:	aa e2       	ldi	r26, 0x2A	; 42
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ea e2       	ldi	r30, 0x2A	; 42
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
     ec0:	aa e2       	ldi	r26, 0x2A	; 42
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8b 7f       	andi	r24, 0xFB	; 251
     ecc:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
     ef8:	e0 e4       	ldi	r30, 0x40	; 64
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	80 83       	st	Z, r24

}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	82 95       	swap	r24
     f20:	86 95       	lsr	r24
     f22:	87 70       	andi	r24, 0x07	; 7
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	81 70       	andi	r24, 0x01	; 1
     f2a:	90 70       	andi	r25, 0x00	; 0
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	a1 f3       	breq	.-24     	; 0xf18 <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
     f30:	ec e2       	ldi	r30, 0x2C	; 44
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	80 83       	st	Z, r24
}
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
     f48:	eb e2       	ldi	r30, 0x2B	; 43
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	dc f7       	brge	.-10     	; 0xf48 <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
     f52:	ec e2       	ldi	r30, 0x2C	; 44
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#else
	SET_BIT(TCCR0, WGM00);
     f66:	a3 e5       	ldi	r26, 0x53	; 83
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e5       	ldi	r30, 0x53	; 83
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	8c 93       	st	X, r24
#endif

}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
     f94:	e2 e5       	ldi	r30, 0x52	; 82
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24

}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
     fb0:	a3 e5       	ldi	r26, 0x53	; 83
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e3 e5       	ldi	r30, 0x53	; 83
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
     fbe:	a3 e5       	ldi	r26, 0x53	; 83
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e3 e5       	ldi	r30, 0x53	; 83
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	90 81       	ld	r25, Z
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	89 2b       	or	r24, r25
     fcc:	8c 93       	st	X, r24

}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	41 f4       	brne	.+16     	; 0xff8 <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
     fe8:	a9 e5       	ldi	r26, 0x59	; 89
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 e5       	ldi	r30, 0x59	; 89
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	8c 93       	st	X, r24

}
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <TIM0_voidSetCompareMat+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <TIM0_voidSetCompareMat+0x8>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	c9 f0       	breq	.+50     	; 0x1064 <TIM0_voidSetCompareMat+0x56>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	23 30       	cpi	r18, 0x03	; 3
    1038:	31 05       	cpc	r19, r1
    103a:	19 f1       	breq	.+70     	; 0x1082 <TIM0_voidSetCompareMat+0x74>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	69 f5       	brne	.+90     	; 0x10a0 <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
    1046:	a3 e5       	ldi	r26, 0x53	; 83
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e3 e5       	ldi	r30, 0x53	; 83
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 61       	ori	r24, 0x10	; 16
    1052:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1054:	a3 e5       	ldi	r26, 0x53	; 83
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e3 e5       	ldi	r30, 0x53	; 83
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 7d       	andi	r24, 0xDF	; 223
    1060:	8c 93       	st	X, r24
    1062:	2c c0       	rjmp	.+88     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 62       	ori	r24, 0x20	; 32
    1070:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7e       	andi	r24, 0xEF	; 239
    107e:	8c 93       	st	X, r24
    1080:	1d c0       	rjmp	.+58     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 62       	ori	r24, 0x20	; 32
    109c:	8c 93       	st	X, r24
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7e       	andi	r24, 0xEF	; 239
    10ac:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7d       	andi	r24, 0xDF	; 223
    10ba:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    10bc:	ec e5       	ldi	r30, 0x5C	; 92
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	80 83       	st	Z, r24

}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <TIM0_voidPWMGenerator+0xa>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <TIM0_voidPWMGenerator+0x1a>
    10ea:	44 c0       	rjmp	.+136    	; 0x1174 <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 61       	ori	r24, 0x10	; 16
    10f8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 62       	ori	r24, 0x20	; 32
    1106:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
    1108:	0c e5       	ldi	r16, 0x5C	; 92
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	aa 27       	eor	r26, r26
    1114:	97 fd       	sbrc	r25, 7
    1116:	a0 95       	com	r26
    1118:	ba 2f       	mov	r27, r26
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	48 ec       	ldi	r20, 0xC8	; 200
    1130:	52 e4       	ldi	r21, 0x42	; 66
    1132:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	53 ec       	ldi	r21, 0xC3	; 195
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	53 e4       	ldi	r21, 0x43	; 67
    115a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	f8 01       	movw	r30, r16
    1170:	80 83       	st	Z, r24
    1172:	39 c0       	rjmp	.+114    	; 0x11e6 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7e       	andi	r24, 0xEF	; 239
    118e:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    1190:	0c e5       	ldi	r16, 0x5C	; 92
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	aa 27       	eor	r26, r26
    119c:	97 fd       	sbrc	r25, 7
    119e:	a0 95       	com	r26
    11a0:	ba 2f       	mov	r27, r26
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	48 ec       	ldi	r20, 0xC8	; 200
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	80 83       	st	Z, r24
	}

#endif


}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    1200:	ec e5       	ldi	r30, 0x5C	; 92
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	80 83       	st	Z, r24

}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	41 f4       	brne	.+16     	; 0x1232 <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    1222:	a9 e5       	ldi	r26, 0x59	; 89
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e9 e5       	ldi	r30, 0x59	; 89
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    1232:	a9 e5       	ldi	r26, 0x59	; 89
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 e5       	ldi	r30, 0x59	; 89
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8d 7f       	andi	r24, 0xFD	; 253
    123e:	8c 93       	st	X, r24

}
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 7f       	andi	r24, 0xF8	; 248
    125c:	8c 93       	st	X, r24

}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TIM0_voidOvfCallback+0x6>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	90 93 87 01 	sts	0x0187, r25
    127a:	80 93 86 01 	sts	0x0186, r24
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <TIM0_voidCmpCallback+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	90 93 85 01 	sts	0x0185, r25
    129e:	80 93 84 01 	sts	0x0184, r24

}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <__vector_11>:


ISR(TIMER0_OVF_vect){
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    12d6:	e0 91 86 01 	lds	r30, 0x0186
    12da:	f0 91 87 01 	lds	r31, 0x0187
    12de:	09 95       	icall
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <__vector_10>:


ISR(TIMER0_COMP_vect){
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    1330:	e0 91 84 01 	lds	r30, 0x0184
    1334:	f0 91 85 01 	lds	r31, 0x0185
    1338:	09 95       	icall
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <SPI_voidInit>:
/*****************************************************/
#include "SPI.h"



void SPI_voidInit	(void){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPSR, SPI2X);

#elif SPI_MODE == SPI_SLAVE_MODE

	/*1- Select order ==> MSB */
	CLR_BIT(SPCR , DORD);
    1368:	ad e2       	ldi	r26, 0x2D	; 45
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ed e2       	ldi	r30, 0x2D	; 45
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	8c 93       	st	X, r24

	/*2- select Slave mode */
	CLR_BIT(SPCR, MSTR);
    1376:	ad e2       	ldi	r26, 0x2D	; 45
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	ed e2       	ldi	r30, 0x2D	; 45
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 7e       	andi	r24, 0xEF	; 239
    1382:	8c 93       	st	X, r24

	/*3- Clock Polarity & Phase ==> Rising_Falling ... Setup_Sample */
	CLR_BIT(SPCR , CPOL);
    1384:	ad e2       	ldi	r26, 0x2D	; 45
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ed e2       	ldi	r30, 0x2D	; 45
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	87 7f       	andi	r24, 0xF7	; 247
    1390:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPHA);
    1392:	ad e2       	ldi	r26, 0x2D	; 45
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ed e2       	ldi	r30, 0x2D	; 45
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	84 60       	ori	r24, 0x04	; 4
    139e:	8c 93       	st	X, r24

#endif

	/* enable SPI */
	SET_BIT(SPCR, SPE);
    13a0:	ad e2       	ldi	r26, 0x2D	; 45
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ed e2       	ldi	r30, 0x2D	; 45
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	8c 93       	st	X, r24

}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <SPI_u8ReceiveData>:


u8   SPI_u8ReceiveData		(void){
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    13bc:	ee e2       	ldi	r30, 0x2E	; 46
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	dc f7       	brge	.-10     	; 0x13bc <SPI_u8ReceiveData+0x8>

	/* Return data register */
	return SPDR;
    13c6:	ef e2       	ldi	r30, 0x2F	; 47
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z

}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <SPI_voidMasterSendData>:


void SPI_voidMasterSendData (u8 Copy_u8Data){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01

	/* Start transmission */
	SPDR = Copy_u8Data;
    13de:	ef e2       	ldi	r30, 0x2F	; 47
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    13e6:	ee e2       	ldi	r30, 0x2E	; 46
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 23       	and	r24, r24
    13ee:	dc f7       	brge	.-10     	; 0x13e6 <SPI_voidMasterSendData+0x14>

}
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <SPI_voidSalveSendData>:


void SPI_voidSalveSendData	(u8 Copy_u8Data){
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01

	SPDR = Copy_u8Data;
    1404:	ef e2       	ldi	r30, 0x2F	; 47
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	80 83       	st	Z, r24

}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <SPI_u8ReceiveTrans>:


u8   SPI_u8ReceiveTrans		(u8 Copy_u8Data){
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01

	/* send data */
	SPDR = Copy_u8Data;
    1420:	ef e2       	ldi	r30, 0x2F	; 47
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(GET_BIT(SPSR, SPIF) == 0);
    1428:	ee e2       	ldi	r30, 0x2E	; 46
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	dc f7       	brge	.-10     	; 0x1428 <SPI_u8ReceiveTrans+0x14>

	/* Return data register */
	return SPDR;
    1432:	ef e2       	ldi	r30, 0x2F	; 47
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <INT_voidEnable>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/interrupt.h>
#include "INT.h"

void INT_voidEnable(u8 Copy_u8INTINdex, u8 Copy_u8INTSense){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	2a 97       	sbiw	r28, 0x0a	; 10
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8INTINdex) {
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3a 87       	std	Y+10, r19	; 0x0a
    1460:	29 87       	std	Y+9, r18	; 0x09
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <INT_voidEnable+0x2e>
    146c:	6d c0       	rjmp	.+218    	; 0x1548 <INT_voidEnable+0x108>
    146e:	29 85       	ldd	r18, Y+9	; 0x09
    1470:	3a 85       	ldd	r19, Y+10	; 0x0a
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <INT_voidEnable+0x3a>
    1478:	c9 c0       	rjmp	.+402    	; 0x160c <INT_voidEnable+0x1cc>
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	09 f0       	breq	.+2      	; 0x1484 <INT_voidEnable+0x44>
    1482:	e9 c0       	rjmp	.+466    	; 0x1656 <INT_voidEnable+0x216>
		case INT_INT0:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	38 87       	std	Y+8, r19	; 0x08
    148c:	2f 83       	std	Y+7, r18	; 0x07
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	21 f1       	breq	.+72     	; 0x14e0 <INT_voidEnable+0xa0>
    1498:	2f 81       	ldd	r18, Y+7	; 0x07
    149a:	38 85       	ldd	r19, Y+8	; 0x08
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	2c f4       	brge	.+10     	; 0x14ac <INT_voidEnable+0x6c>
    14a2:	8f 81       	ldd	r24, Y+7	; 0x07
    14a4:	98 85       	ldd	r25, Y+8	; 0x08
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <INT_voidEnable+0x82>
    14aa:	46 c0       	rjmp	.+140    	; 0x1538 <INT_voidEnable+0xf8>
    14ac:	2f 81       	ldd	r18, Y+7	; 0x07
    14ae:	38 85       	ldd	r19, Y+8	; 0x08
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	21 f1       	breq	.+72     	; 0x14fe <INT_voidEnable+0xbe>
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	91 05       	cpc	r25, r1
    14be:	71 f1       	breq	.+92     	; 0x151c <INT_voidEnable+0xdc>
    14c0:	3b c0       	rjmp	.+118    	; 0x1538 <INT_voidEnable+0xf8>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC00);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
    14de:	2c c0       	rjmp	.+88     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC00);
    14e0:	a5 e5       	ldi	r26, 0x55	; 85
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e5       	ldi	r30, 0x55	; 85
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    14ee:	a5 e5       	ldi	r26, 0x55	; 85
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e5       	ldi	r30, 0x55	; 85
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	8c 93       	st	X, r24
    14fc:	1d c0       	rjmp	.+58     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC01);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8d 7f       	andi	r24, 0xFD	; 253
    150a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC00);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <INT_voidEnable+0xf8>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC00);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8d 7f       	andi	r24, 0xFD	; 253
    1536:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 0 */
			SET_BIT(GICR, INT0);
    1538:	ab e5       	ldi	r26, 0x5B	; 91
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	eb e5       	ldi	r30, 0x5B	; 91
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 64       	ori	r24, 0x40	; 64
    1544:	8c 93       	st	X, r24
    1546:	87 c0       	rjmp	.+270    	; 0x1656 <INT_voidEnable+0x216>
			break;

		case INT_INT1:
			/* Select sense */
			switch (Copy_u8INTSense) {
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3e 83       	std	Y+6, r19	; 0x06
    1550:	2d 83       	std	Y+5, r18	; 0x05
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	21 f1       	breq	.+72     	; 0x15a4 <INT_voidEnable+0x164>
    155c:	2d 81       	ldd	r18, Y+5	; 0x05
    155e:	3e 81       	ldd	r19, Y+6	; 0x06
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	2c f4       	brge	.+10     	; 0x1570 <INT_voidEnable+0x130>
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f0       	breq	.+24     	; 0x1586 <INT_voidEnable+0x146>
    156e:	46 c0       	rjmp	.+140    	; 0x15fc <INT_voidEnable+0x1bc>
    1570:	2d 81       	ldd	r18, Y+5	; 0x05
    1572:	3e 81       	ldd	r19, Y+6	; 0x06
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	21 f1       	breq	.+72     	; 0x15c2 <INT_voidEnable+0x182>
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	71 f1       	breq	.+92     	; 0x15e0 <INT_voidEnable+0x1a0>
    1584:	3b c0       	rjmp	.+118    	; 0x15fc <INT_voidEnable+0x1bc>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCR, ISC10);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8b 7f       	andi	r24, 0xFB	; 251
    1592:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 60       	ori	r24, 0x08	; 8
    15a0:	8c 93       	st	X, r24
    15a2:	2c c0       	rjmp	.+88     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCR, ISC10);
    15a4:	a5 e5       	ldi	r26, 0x55	; 85
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e5       	ldi	r30, 0x55	; 85
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    15b2:	a5 e5       	ldi	r26, 0x55	; 85
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e5       	ldi	r30, 0x55	; 85
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 60       	ori	r24, 0x08	; 8
    15be:	8c 93       	st	X, r24
    15c0:	1d c0       	rjmp	.+58     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_ANY_CHANGE:
					CLR_BIT(MCUCR, ISC11);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC10);
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	8c 93       	st	X, r24
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <INT_voidEnable+0x1bc>
					break;

				case INT_LOW_LEVEL:
					CLR_BIT(MCUCR, ISC10);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    15ee:	a5 e5       	ldi	r26, 0x55	; 85
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e5       	ldi	r30, 0x55	; 85
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	87 7f       	andi	r24, 0xF7	; 247
    15fa:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 1 */
			SET_BIT(GICR, INT1);
    15fc:	ab e5       	ldi	r26, 0x5B	; 91
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e5       	ldi	r30, 0x5B	; 91
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 68       	ori	r24, 0x80	; 128
    1608:	8c 93       	st	X, r24
    160a:	25 c0       	rjmp	.+74     	; 0x1656 <INT_voidEnable+0x216>
			break;

		case INT_INT2:
			/* Select sense */
			switch (Copy_u8INTSense) {
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3c 83       	std	Y+4, r19	; 0x04
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	31 f0       	breq	.+12     	; 0x162a <INT_voidEnable+0x1ea>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	21 30       	cpi	r18, 0x01	; 1
    1624:	31 05       	cpc	r19, r1
    1626:	49 f0       	breq	.+18     	; 0x163a <INT_voidEnable+0x1fa>
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <INT_voidEnable+0x208>
				case INT_FALLING_EDGE:
					CLR_BIT(MCUCSR, ISC2);
    162a:	a4 e5       	ldi	r26, 0x54	; 84
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e4 e5       	ldi	r30, 0x54	; 84
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	8c 93       	st	X, r24
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <INT_voidEnable+0x208>
					break;

				case INT_RISING_EDGE:
					SET_BIT(MCUCSR, ISC2);
    163a:	a4 e5       	ldi	r26, 0x54	; 84
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e4 e5       	ldi	r30, 0x54	; 84
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	8c 93       	st	X, r24
					break;
			}
			/* Enable interrupt 2 */
			SET_BIT(GICR, INT2);
    1648:	ab e5       	ldi	r26, 0x5B	; 91
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	eb e5       	ldi	r30, 0x5B	; 91
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 62       	ori	r24, 0x20	; 32
    1654:	8c 93       	st	X, r24
			break;
	}

}
    1656:	2a 96       	adiw	r28, 0x0a	; 10
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <INT_voidDisable>:



void INT_voidDisable(u8 Copy_u8INTINdex){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <INT_voidDisable+0x6>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8INTINdex) {
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3b 83       	std	Y+3, r19	; 0x03
    167e:	2a 83       	std	Y+2, r18	; 0x02
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	89 f0       	breq	.+34     	; 0x16ac <INT_voidDisable+0x44>
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	a1 f0       	breq	.+40     	; 0x16bc <INT_voidDisable+0x54>
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	b9 f4       	brne	.+46     	; 0x16ca <INT_voidDisable+0x62>
		case INT_INT0:
			CLR_BIT(GICR, INT0);
    169c:	ab e5       	ldi	r26, 0x5B	; 91
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	eb e5       	ldi	r30, 0x5B	; 91
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7b       	andi	r24, 0xBF	; 191
    16a8:	8c 93       	st	X, r24
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <INT_voidDisable+0x62>
			break;
		case INT_INT1:
			CLR_BIT(GICR, INT1);
    16ac:	ab e5       	ldi	r26, 0x5B	; 91
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e5       	ldi	r30, 0x5B	; 91
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	8c 93       	st	X, r24
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <INT_voidDisable+0x62>
			break;
		case INT_INT2:
			CLR_BIT(GICR, INT2);
    16bc:	ab e5       	ldi	r26, 0x5B	; 91
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e5       	ldi	r30, 0x5B	; 91
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 7d       	andi	r24, 0xDF	; 223
    16c8:	8c 93       	st	X, r24
			break;
	}

}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <ICU_voidInit>:


void (*ICU_pf) (void);


void ICU_voidInit (void){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62

	/* Select Timer1 Normal Mode */
	CLR_BIT(TCCR1A, WGM10);
    16de:	af e4       	ldi	r26, 0x4F	; 79
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8d 7f       	andi	r24, 0xFD	; 253
    16f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7e       	andi	r24, 0xEF	; 239
    1714:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	88 7f       	andi	r24, 0xF8	; 248
    1722:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    1724:	ae e4       	ldi	r26, 0x4E	; 78
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ee e4       	ldi	r30, 0x4E	; 78
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	82 60       	ori	r24, 0x02	; 2
    1730:	8c 93       	st	X, r24

	/* enable interrupt */
	SET_BIT(TIMSK, TICIE1);
    1732:	a9 e5       	ldi	r26, 0x59	; 89
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e9 e5       	ldi	r30, 0x59	; 89
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 62       	ori	r24, 0x20	; 32
    173e:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	SET_BIT(TCCR1B, ICES1);
    1740:	ae e4       	ldi	r26, 0x4E	; 78
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ee e4       	ldi	r30, 0x4E	; 78
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	8c 93       	st	X, r24

}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <ICU_voidChangeTrigger+0x6>
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8Trigger) {
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3b 83       	std	Y+3, r19	; 0x03
    176a:	2a 83       	std	Y+2, r18	; 0x02
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	31 f0       	breq	.+12     	; 0x1780 <ICU_voidChangeTrigger+0x2c>
    1774:	2a 81       	ldd	r18, Y+2	; 0x02
    1776:	3b 81       	ldd	r19, Y+3	; 0x03
    1778:	21 30       	cpi	r18, 0x01	; 1
    177a:	31 05       	cpc	r19, r1
    177c:	49 f0       	breq	.+18     	; 0x1790 <ICU_voidChangeTrigger+0x3c>
    177e:	0f c0       	rjmp	.+30     	; 0x179e <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1);	break;
    1780:	ae e4       	ldi	r26, 0x4E	; 78
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ee e4       	ldi	r30, 0x4E	; 78
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 7b       	andi	r24, 0xBF	; 191
    178c:	8c 93       	st	X, r24
    178e:	07 c0       	rjmp	.+14     	; 0x179e <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  SET_BIT(TCCR1B, ICES1);	break;
    1790:	ae e4       	ldi	r26, 0x4E	; 78
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee e4       	ldi	r30, 0x4E	; 78
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 64       	ori	r24, 0x40	; 64
    179c:	8c 93       	st	X, r24
	}

}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(void (*Copy_pf) (void)){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <ICU_voidSetCallback+0x6>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01

	ICU_pf = Copy_pf;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	90 93 89 01 	sts	0x0189, r25
    17c0:	80 93 88 01 	sts	0x0188, r24

}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    17d6:	e6 e4       	ldi	r30, 0x46	; 70
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62

	/* disable interrupt */
	CLR_BIT(TIMSK, TICIE1);
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 7d       	andi	r24, 0xDF	; 223
    17f8:	8c 93       	st	X, r24

}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62

	ICU_pf();
    182a:	e0 91 88 01 	lds	r30, 0x0188
    182e:	f0 91 89 01 	lds	r31, 0x0189
    1832:	09 95       	icall

}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <TWI_voidMasterInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include <avr/io.h>
#include "I2C.h"

void TWI_voidMasterInit			(void){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62

	/* Set prescaler value ==> 1 */
	CLR_BIT(TWSR, TWPS0);
    1862:	a1 e2       	ldi	r26, 0x21	; 33
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e2       	ldi	r30, 0x21	; 33
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8e 7f       	andi	r24, 0xFE	; 254
    186e:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWPS1);
    1870:	a1 e2       	ldi	r26, 0x21	; 33
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e1 e2       	ldi	r30, 0x21	; 33
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	8c 93       	st	X, r24

	/* frequency ==> 200 KHZ  >>> from the equation ==> 12 */
	TWBR = 12;
    187e:	e0 e2       	ldi	r30, 0x20	; 32
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8c e0       	ldi	r24, 0x0C	; 12
    1884:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    1886:	a6 e5       	ldi	r26, 0x56	; 86
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e6 e5       	ldi	r30, 0x56	; 86
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1894:	a6 e5       	ldi	r26, 0x56	; 86
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e6 e5       	ldi	r30, 0x56	; 86
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	8c 93       	st	X, r24

}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <TWI_voidSlaveInit>:


void TWI_voidSlaveInit			(u8 Copy_u8Address){
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01

	/* set slave address >> Reg address */
	TWAR = Copy_u8Address<<1;
    18b4:	e2 e2       	ldi	r30, 0x22	; 34
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 0f       	add	r24, r24
    18bc:	80 83       	st	Z, r24

	/* Enable I2C & ACK */
	SET_BIT(TWCR, TWEA);
    18be:	a6 e5       	ldi	r26, 0x56	; 86
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e6 e5       	ldi	r30, 0x56	; 86
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	80 64       	ori	r24, 0x40	; 64
    18ca:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    18cc:	a6 e5       	ldi	r26, 0x56	; 86
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e6 e5       	ldi	r30, 0x56	; 86
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	84 60       	ori	r24, 0x04	; 4
    18d8:	8c 93       	st	X, r24

}
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <TWI_voidStartCondition>:


void TWI_voidStartCondition		(void){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    18ea:	e6 e5       	ldi	r30, 0x56	; 86
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	84 ea       	ldi	r24, 0xA4	; 164
    18f0:	80 83       	st	Z, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    18f2:	e6 e5       	ldi	r30, 0x56	; 86
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	88 23       	and	r24, r24
    18fa:	dc f7       	brge	.-10     	; 0x18f2 <TWI_voidStartCondition+0x10>

}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <TWI_voidStopCondition>:


void TWI_voidStopCondition		(void){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62

	/* enable start bit & clear flag */
	SET_BIT(TWCR, TWSTO);
    190a:	a6 e5       	ldi	r26, 0x56	; 86
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e6 e5       	ldi	r30, 0x56	; 86
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 61       	ori	r24, 0x10	; 16
    1916:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);
    1918:	a6 e5       	ldi	r26, 0x56	; 86
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e6 e5       	ldi	r30, 0x56	; 86
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 68       	ori	r24, 0x80	; 128
    1924:	8c 93       	st	X, r24
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <TWI_voidSlaveAddressWrite>:


void TWI_voidSlaveAddressWrite	(u8 Copy_u8SlaveAddress){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    1938:	e3 e2       	ldi	r30, 0x23	; 35
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	88 0f       	add	r24, r24
    1940:	80 83       	st	Z, r24
	CLR_BIT(TWDR, 0);
    1942:	a3 e2       	ldi	r26, 0x23	; 35
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e3 e2       	ldi	r30, 0x23	; 35
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8e 7f       	andi	r24, 0xFE	; 254
    194e:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    1950:	a6 e5       	ldi	r26, 0x56	; 86
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e6 e5       	ldi	r30, 0x56	; 86
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    195e:	a6 e5       	ldi	r26, 0x56	; 86
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e6 e5       	ldi	r30, 0x56	; 86
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 68       	ori	r24, 0x80	; 128
    196a:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    196c:	e6 e5       	ldi	r30, 0x56	; 86
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	88 23       	and	r24, r24
    1974:	dc f7       	brge	.-10     	; 0x196c <TWI_voidSlaveAddressWrite+0x40>

}
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <TWI_voidSlaveAddressRead>:


void TWI_voidSlaveAddressRead	(u8 Copy_u8SlaveAddress){
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8SlaveAddress<<1;
    198a:	e3 e2       	ldi	r30, 0x23	; 35
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	88 0f       	add	r24, r24
    1992:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0);
    1994:	a3 e2       	ldi	r26, 0x23	; 35
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e3 e2       	ldi	r30, 0x23	; 35
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	8c 93       	st	X, r24

	/* disable Start condition */
	CLR_BIT(TWCR, TWSTA);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7d       	andi	r24, 0xDF	; 223
    19ae:	8c 93       	st	X, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	dc f7       	brge	.-10     	; 0x19be <TWI_voidSlaveAddressRead+0x40>


}
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <TWI_voidMasterSendData>:


void TWI_voidMasterSendData 	(u8 Copy_u8Data){
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01

	TWDR = Copy_u8Data;
    19dc:	e3 e2       	ldi	r30, 0x23	; 35
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	80 83       	st	Z, r24

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    19e4:	a6 e5       	ldi	r26, 0x56	; 86
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e6 e5       	ldi	r30, 0x56	; 86
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 68       	ori	r24, 0x80	; 128
    19f0:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    19f2:	e6 e5       	ldi	r30, 0x56	; 86
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	88 23       	and	r24, r24
    19fa:	dc f7       	brge	.-10     	; 0x19f2 <TWI_voidMasterSendData+0x22>

}
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <TWI_u8MasterReceiveData>:


u8	 TWI_u8MasterReceiveData	(void){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a0c:	a6 e5       	ldi	r26, 0x56	; 86
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e6 e5       	ldi	r30, 0x56	; 86
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a1a:	e6 e5       	ldi	r30, 0x56	; 86
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 23       	and	r24, r24
    1a22:	dc f7       	brge	.-10     	; 0x1a1a <TWI_u8MasterReceiveData+0x16>

	return TWDR;
    1a24:	e3 e2       	ldi	r30, 0x23	; 35
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z

}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TWI_u8SlaveReceiveData>:


u8	 TWI_u8SlaveReceiveData		(void){
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62

	while((TWSR & 0xF8) != 0x60);
    1a38:	e1 e2       	ldi	r30, 0x21	; 33
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 7f       	andi	r24, 0xF8	; 248
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	80 36       	cpi	r24, 0x60	; 96
    1a48:	91 05       	cpc	r25, r1
    1a4a:	b1 f7       	brne	.-20     	; 0x1a38 <TWI_u8SlaveReceiveData+0x8>

	/* clear flag */
	SET_BIT(TWCR, TWINT);
    1a4c:	a6 e5       	ldi	r26, 0x56	; 86
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e6 e5       	ldi	r30, 0x56	; 86
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	8c 93       	st	X, r24

	/* wait flag */
	while(GET_BIT(TWCR, TWINT) == 0);
    1a5a:	e6 e5       	ldi	r30, 0x56	; 86
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 23       	and	r24, r24
    1a62:	dc f7       	brge	.-10     	; 0x1a5a <TWI_u8SlaveReceiveData+0x2a>

	return TWDR;
    1a64:	e3 e2       	ldi	r30, 0x23	; 35
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z

}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <DIO_voidSetPortDirection>:
#include "../../LIB/STD_types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <DIO_voidSetPortDirection+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <DIO_voidSetPortDirection+0x8>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <DIO_voidSetPortDirection+0x58>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <DIO_voidSetPortDirection+0x38>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <DIO_voidSetPortDirection+0x4e>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <DIO_voidSetPortDirection+0x62>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <DIO_voidSetPortDirection+0x6c>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTA:		DDRA = Copy_u8Direction;	break;
    1abe:	ea e3       	ldi	r30, 0x3A	; 58
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:		DDRB = Copy_u8Direction;	break;
    1ac8:	e7 e3       	ldi	r30, 0x37	; 55
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:		DDRC = Copy_u8Direction;	break;
    1ad2:	e4 e3       	ldi	r30, 0x34	; 52
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:		DDRD = Copy_u8Direction;	break;
    1adc:	e1 e3       	ldi	r30, 0x31	; 49
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
	}

}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value){
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_voidSetPortValue+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_voidSetPortValue+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3c 83       	std	Y+4, r19	; 0x04
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <DIO_voidSetPortValue+0x58>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <DIO_voidSetPortValue+0x38>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <DIO_voidSetPortValue+0x4e>
    1b28:	1e c0       	rjmp	.+60     	; 0x1b66 <DIO_voidSetPortValue+0x74>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <DIO_voidSetPortValue+0x62>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <DIO_voidSetPortValue+0x6c>
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	27 97       	sbiw	r28, 0x07	; 7
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	6a 83       	std	Y+2, r22	; 0x02
    1b8c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_OUTPUT){
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <DIO_voidSetPinDirection+0x22>
    1b94:	6f c0       	rjmp	.+222    	; 0x1c74 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8Port){
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3f 83       	std	Y+7, r19	; 0x07
    1b9e:	2e 83       	std	Y+6, r18	; 0x06
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	49 f1       	breq	.+82     	; 0x1bfc <DIO_voidSetPinDirection+0x88>
    1baa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bac:	3f 81       	ldd	r19, Y+7	; 0x07
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <DIO_voidSetPinDirection+0x4a>
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_voidSetPinDirection+0x60>
    1bbc:	ce c0       	rjmp	.+412    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
    1bbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	71 f1       	breq	.+92     	; 0x1c24 <DIO_voidSetPinDirection+0xb0>
    1bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bca:	9f 81       	ldd	r25, Y+7	; 0x07
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	e9 f1       	breq	.+122    	; 0x1c4c <DIO_voidSetPinDirection+0xd8>
    1bd2:	c3 c0       	rjmp	.+390    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		SET_BIT(DDRA,Copy_u8Pin);		break;
    1bd4:	aa e3       	ldi	r26, 0x3A	; 58
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ea e3       	ldi	r30, 0x3A	; 58
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_voidSetPinDirection+0x7e>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_voidSetPinDirection+0x7a>
    1bf6:	84 2b       	or	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	af c0       	rjmp	.+350    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		SET_BIT(DDRB,Copy_u8Pin);		break;
    1bfc:	a7 e3       	ldi	r26, 0x37	; 55
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e7 e3       	ldi	r30, 0x37	; 55
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_voidSetPinDirection+0xa6>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_voidSetPinDirection+0xa2>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	9b c0       	rjmp	.+310    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		SET_BIT(DDRC,Copy_u8Pin);		break;
    1c24:	a4 e3       	ldi	r26, 0x34	; 52
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_voidSetPinDirection+0xce>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_voidSetPinDirection+0xca>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	87 c0       	rjmp	.+270    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		SET_BIT(DDRD,Copy_u8Pin);		break;
    1c4c:	a1 e3       	ldi	r26, 0x31	; 49
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_voidSetPinDirection+0xf6>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_voidSetPinDirection+0xf2>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	73 c0       	rjmp	.+230    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	59 f1       	breq	.+86     	; 0x1cde <DIO_voidSetPinDirection+0x16a>
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <DIO_voidSetPinDirection+0x128>
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	9d 81       	ldd	r25, Y+5	; 0x05
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <DIO_voidSetPinDirection+0x140>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
    1c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	89 f1       	breq	.+98     	; 0x1d08 <DIO_voidSetPinDirection+0x194>
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_voidSetPinDirection+0x13e>
    1cb0:	40 c0       	rjmp	.+128    	; 0x1d32 <DIO_voidSetPinDirection+0x1be>
    1cb2:	53 c0       	rjmp	.+166    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTA:		CLR_BIT(DDRA,Copy_u8Pin);		break;
    1cb4:	aa e3       	ldi	r26, 0x3A	; 58
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ea e3       	ldi	r30, 0x3A	; 58
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_voidSetPinDirection+0x15e>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_voidSetPinDirection+0x15a>
    1cd6:	80 95       	com	r24
    1cd8:	84 23       	and	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	3e c0       	rjmp	.+124    	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTB:		CLR_BIT(DDRB,Copy_u8Pin);		break;
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_voidSetPinDirection+0x188>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_voidSetPinDirection+0x184>
    1d00:	80 95       	com	r24
    1d02:	84 23       	and	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	29 c0       	rjmp	.+82     	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTC:		CLR_BIT(DDRC,Copy_u8Pin);		break;
    1d08:	a4 e3       	ldi	r26, 0x34	; 52
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e4 e3       	ldi	r30, 0x34	; 52
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_voidSetPinDirection+0x1b2>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_voidSetPinDirection+0x1ae>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <DIO_voidSetPinDirection+0x1e6>
		case DIO_PORTD:		CLR_BIT(DDRD,Copy_u8Pin);		break;
    1d32:	a1 e3       	ldi	r26, 0x31	; 49
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e1 e3       	ldi	r30, 0x31	; 49
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_voidSetPinDirection+0x1dc>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_voidSetPinDirection+0x1d8>
    1d54:	80 95       	com	r24
    1d56:	84 23       	and	r24, r20
    1d58:	8c 93       	st	X, r24
		}
	}
}
    1d5a:	27 96       	adiw	r28, 0x07	; 7
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	27 97       	sbiw	r28, 0x07	; 7
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	6a 83       	std	Y+2, r22	; 0x02
    1d84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH){
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <DIO_voidSetPinValue+0x22>
    1d8c:	6f c0       	rjmp	.+222    	; 0x1e6c <DIO_voidSetPinValue+0x100>
		switch(Copy_u8Port){
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3f 83       	std	Y+7, r19	; 0x07
    1d96:	2e 83       	std	Y+6, r18	; 0x06
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 05       	cpc	r25, r1
    1da0:	49 f1       	breq	.+82     	; 0x1df4 <DIO_voidSetPinValue+0x88>
    1da2:	2e 81       	ldd	r18, Y+6	; 0x06
    1da4:	3f 81       	ldd	r19, Y+7	; 0x07
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <DIO_voidSetPinValue+0x4a>
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	9f 81       	ldd	r25, Y+7	; 0x07
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <DIO_voidSetPinValue+0x60>
    1db4:	ce c0       	rjmp	.+412    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
    1db6:	2e 81       	ldd	r18, Y+6	; 0x06
    1db8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	71 f1       	breq	.+92     	; 0x1e1c <DIO_voidSetPinValue+0xb0>
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	e9 f1       	breq	.+122    	; 0x1e44 <DIO_voidSetPinValue+0xd8>
    1dca:	c3 c0       	rjmp	.+390    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		SET_BIT(PORTA,Copy_u8Pin);		break;
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_voidSetPinValue+0x7e>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_voidSetPinValue+0x7a>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	af c0       	rjmp	.+350    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		SET_BIT(PORTB,Copy_u8Pin);		break;
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_voidSetPinValue+0xa6>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_voidSetPinValue+0xa2>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	9b c0       	rjmp	.+310    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		SET_BIT(PORTC,Copy_u8Pin);		break;
    1e1c:	a5 e3       	ldi	r26, 0x35	; 53
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e3       	ldi	r30, 0x35	; 53
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_voidSetPinValue+0xce>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_voidSetPinValue+0xca>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	87 c0       	rjmp	.+270    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		SET_BIT(PORTD,Copy_u8Pin);		break;
    1e44:	a2 e3       	ldi	r26, 0x32	; 50
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e2 e3       	ldi	r30, 0x32	; 50
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_voidSetPinValue+0xf6>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_voidSetPinValue+0xf2>
    1e66:	84 2b       	or	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	73 c0       	rjmp	.+230    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		}
	}
	else{
		switch(Copy_u8Port){
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3d 83       	std	Y+5, r19	; 0x05
    1e74:	2c 83       	std	Y+4, r18	; 0x04
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	59 f1       	breq	.+86     	; 0x1ed6 <DIO_voidSetPinValue+0x16a>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <DIO_voidSetPinValue+0x128>
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f0       	breq	.+26     	; 0x1eac <DIO_voidSetPinValue+0x140>
    1e92:	5f c0       	rjmp	.+190    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	89 f1       	breq	.+98     	; 0x1f00 <DIO_voidSetPinValue+0x194>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <DIO_voidSetPinValue+0x13e>
    1ea8:	40 c0       	rjmp	.+128    	; 0x1f2a <DIO_voidSetPinValue+0x1be>
    1eaa:	53 c0       	rjmp	.+166    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTA:		CLR_BIT(PORTA,Copy_u8Pin);		break;
    1eac:	ab e3       	ldi	r26, 0x3B	; 59
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e3       	ldi	r30, 0x3B	; 59
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_voidSetPinValue+0x15e>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_voidSetPinValue+0x15a>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	3e c0       	rjmp	.+124    	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTB:		CLR_BIT(PORTB,Copy_u8Pin);		break;
    1ed6:	a8 e3       	ldi	r26, 0x38	; 56
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_voidSetPinValue+0x188>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_voidSetPinValue+0x184>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	29 c0       	rjmp	.+82     	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTC:		CLR_BIT(PORTC,Copy_u8Pin);		break;
    1f00:	a5 e3       	ldi	r26, 0x35	; 53
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e3       	ldi	r30, 0x35	; 53
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_voidSetPinValue+0x1b2>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_voidSetPinValue+0x1ae>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <DIO_voidSetPinValue+0x1e6>
		case DIO_PORTD:		CLR_BIT(PORTD,Copy_u8Pin);		break;
    1f2a:	a2 e3       	ldi	r26, 0x32	; 50
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e2 e3       	ldi	r30, 0x32	; 50
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <DIO_voidSetPinValue+0x1dc>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <DIO_voidSetPinValue+0x1d8>
    1f4c:	80 95       	com	r24
    1f4e:	84 23       	and	r24, r20
    1f50:	8c 93       	st	X, r24
		}
	}
}
    1f52:	27 96       	adiw	r28, 0x07	; 7
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue       (u8 Copy_u8Port, u8 Copy_u8Pin){
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <DIO_u8GetPinValue+0x6>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <DIO_u8GetPinValue+0x8>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	8a 83       	std	Y+2, r24	; 0x02
    1f74:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
		switch(Copy_u8Port){
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3d 83       	std	Y+5, r19	; 0x05
    1f7e:	2c 83       	std	Y+4, r18	; 0x04
    1f80:	4c 81       	ldd	r20, Y+4	; 0x04
    1f82:	5d 81       	ldd	r21, Y+5	; 0x05
    1f84:	41 30       	cpi	r20, 0x01	; 1
    1f86:	51 05       	cpc	r21, r1
    1f88:	41 f1       	breq	.+80     	; 0x1fda <DIO_u8GetPinValue+0x76>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <DIO_u8GetPinValue+0x3c>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	61 f0       	breq	.+24     	; 0x1fb6 <DIO_u8GetPinValue+0x52>
    1f9e:	52 c0       	rjmp	.+164    	; 0x2044 <DIO_u8GetPinValue+0xe0>
    1fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa4:	42 30       	cpi	r20, 0x02	; 2
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	51 f1       	breq	.+84     	; 0x1ffe <DIO_u8GetPinValue+0x9a>
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	b9 f1       	breq	.+110    	; 0x2022 <DIO_u8GetPinValue+0xbe>
    1fb4:	47 c0       	rjmp	.+142    	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTA:		value = GET_BIT(PINA,Copy_u8Pin);		break;
    1fb6:	e9 e3       	ldi	r30, 0x39	; 57
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_u8GetPinValue+0x6a>
    1fca:	55 95       	asr	r21
    1fcc:	47 95       	ror	r20
    1fce:	8a 95       	dec	r24
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_u8GetPinValue+0x66>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	35 c0       	rjmp	.+106    	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB:		value = GET_BIT(PINB,Copy_u8Pin);		break;
    1fda:	e6 e3       	ldi	r30, 0x36	; 54
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a9 01       	movw	r20, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <DIO_u8GetPinValue+0x8e>
    1fee:	55 95       	asr	r21
    1ff0:	47 95       	ror	r20
    1ff2:	8a 95       	dec	r24
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <DIO_u8GetPinValue+0x8a>
    1ff6:	ca 01       	movw	r24, r20
    1ff8:	81 70       	andi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	23 c0       	rjmp	.+70     	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC:		value = GET_BIT(PINC,Copy_u8Pin);		break;
    1ffe:	e3 e3       	ldi	r30, 0x33	; 51
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a9 01       	movw	r20, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_u8GetPinValue+0xb2>
    2012:	55 95       	asr	r21
    2014:	47 95       	ror	r20
    2016:	8a 95       	dec	r24
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_u8GetPinValue+0xae>
    201a:	ca 01       	movw	r24, r20
    201c:	81 70       	andi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	11 c0       	rjmp	.+34     	; 0x2044 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD:		value = GET_BIT(PIND,Copy_u8Pin);		break;
    2022:	e0 e3       	ldi	r30, 0x30	; 48
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_u8GetPinValue+0xd6>
    2036:	55 95       	asr	r21
    2038:	47 95       	ror	r20
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_u8GetPinValue+0xd2>
    203e:	ca 01       	movw	r24, r20
    2040:	81 70       	andi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01
		}
	return value;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <ADC_voidInit>:
#define ADC_AREF		1
#define ADC_2_56_V		2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	89 83       	std	Y+1, r24	; 0x01

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
    2062:	a6 e2       	ldi	r26, 0x26	; 38
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e6 e2       	ldi	r30, 0x26	; 38
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	8c 93       	st	X, r24

	/* Select Vref */
#if ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
    2070:	a7 e2       	ldi	r26, 0x27	; 39
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e7 e2       	ldi	r30, 0x27	; 39
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	80 64       	ori	r24, 0x40	; 64
    207c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    207e:	a7 e2       	ldi	r26, 0x27	; 39
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e7 e2       	ldi	r30, 0x27	; 39
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#endif

	/* select right adjust */
	CLR_BIT(ADMUX, ADLAR);
    208c:	a7 e2       	ldi	r26, 0x27	; 39
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e7 e2       	ldi	r30, 0x27	; 39
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 7d       	andi	r24, 0xDF	; 223
    2098:	8c 93       	st	X, r24

	/* prescaler */
	ADCSRA &= 0b11111000;
    209a:	a6 e2       	ldi	r26, 0x26	; 38
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e6 e2       	ldi	r30, 0x26	; 38
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 7f       	andi	r24, 0xF8	; 248
    20a6:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler; // 0b00000110
    20a8:	a6 e2       	ldi	r26, 0x26	; 38
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e2       	ldi	r30, 0x26	; 38
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	90 81       	ld	r25, Z
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	89 2b       	or	r24, r25
    20b6:	8c 93       	st	X, r24

}
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <ADC_u16GetDigitalValue>:


u16  ADC_u16GetDigitalValue(u8 Copy_u8Channel){
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	89 83       	std	Y+1, r24	; 0x01

	/* select Channel */
	ADMUX &= 0b11100000;
    20cc:	a7 e2       	ldi	r26, 0x27	; 39
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e7 e2       	ldi	r30, 0x27	; 39
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 7e       	andi	r24, 0xE0	; 224
    20d8:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
    20da:	a7 e2       	ldi	r26, 0x27	; 39
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e7 e2       	ldi	r30, 0x27	; 39
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	90 81       	ld	r25, Z
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	89 2b       	or	r24, r25
    20e8:	8c 93       	st	X, r24

	/*  Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    20ea:	a6 e2       	ldi	r26, 0x26	; 38
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e6 e2       	ldi	r30, 0x26	; 38
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24

	/* wait flag = 1 */
	while(GET_BIT(ADCSRA, ADIF) == 0);
    20f8:	e6 e2       	ldi	r30, 0x26	; 38
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	82 95       	swap	r24
    2100:	8f 70       	andi	r24, 0x0F	; 15
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	a9 f3       	breq	.-22     	; 0x20f8 <ADC_u16GetDigitalValue+0x38>

	/* clear flag */
	CLR_BIT(ADCSRA, ADIF);
    210e:	a6 e2       	ldi	r26, 0x26	; 38
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e6 e2       	ldi	r30, 0x26	; 38
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8f 7e       	andi	r24, 0xEF	; 239
    211a:	8c 93       	st	X, r24

	/* read ADC value */
	return ADC;
    211c:	e4 e2       	ldi	r30, 0x24	; 36
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01

}
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <ADC_voidDisable>:


void ADC_voidDisable(void){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62

	/* Disable ADC */
	CLR_BIT(ADCSRA, ADEN);
    2134:	a6 e2       	ldi	r26, 0x26	; 38
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e6 e2       	ldi	r30, 0x26	; 38
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 77       	andi	r24, 0x7F	; 127
    2140:	8c 93       	st	X, r24

}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <STP_voidInit>:
u16 Global_Speed;
u8 Global_direction;



void STP_voidInit(void){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62

	TIM0_voidInit();
    2150:	0e 94 af 07 	call	0xf5e	; 0xf5e <TIM0_voidInit>
	/* 8 Ms/ 8 >> 1M HZ >> tick time = 1/ 1M  = 1 Micro second >> overflow time = 256 * tick time = 256 micro sec  */
	/* 1/ (256 micro sec) = 3906.25 */
	/* ((0.25) * 256) = 64 >>> 256 - 64 = 192 */
	TIM0_voidTimerStart(TIM0_PRESCALER_8);
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TIM0_voidTimerStart>
	sei();
    215a:	78 94       	sei
	TIM0_voidOvrINTControl(TIM0_TIN_EABLE);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIM0_voidOvrINTControl>
	TIM0_voidOvfCallback(Rotate);
    2162:	88 ef       	ldi	r24, 0xF8	; 248
    2164:	90 e1       	ldi	r25, 0x10	; 16
    2166:	0e 94 32 09 	call	0x1264	; 0x1264 <TIM0_voidOvfCallback>

	DIO_voidSetPinDirection(STP_PORT, STP_COIL_BLUE,   DIO_OUTPUT);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_PINK,   DIO_OUTPUT);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_YELLOW, DIO_OUTPUT);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT, STP_COIL_ORANGE, DIO_OUTPUT);
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	63 e0       	ldi	r22, 0x03	; 3
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>

}
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <STP_voidRotate>:

//1 sec is 3906.25
void STP_voidRotate(u8 Copy_u8Speed, u8 Copy_u8Direction){
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <STP_voidRotate+0x6>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Speed == STP_SPEED_1){
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	39 f4       	brne	.+14     	; 0x21ba <STP_voidRotate+0x22>
		Global_Speed = 12000; //equivlent of waiting for ~750 ms
    21ac:	80 ee       	ldi	r24, 0xE0	; 224
    21ae:	9e e2       	ldi	r25, 0x2E	; 46
    21b0:	90 93 8b 01 	sts	0x018B, r25
    21b4:	80 93 8a 01 	sts	0x018A, r24
    21b8:	13 c0       	rjmp	.+38     	; 0x21e0 <STP_voidRotate+0x48>
	}
	else if(Copy_u8Speed == STP_SPEED_2){
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	39 f4       	brne	.+14     	; 0x21ce <STP_voidRotate+0x36>
		Global_Speed = 8000; //equivlent of waiting for ~500 ms
    21c0:	80 e4       	ldi	r24, 0x40	; 64
    21c2:	9f e1       	ldi	r25, 0x1F	; 31
    21c4:	90 93 8b 01 	sts	0x018B, r25
    21c8:	80 93 8a 01 	sts	0x018A, r24
    21cc:	09 c0       	rjmp	.+18     	; 0x21e0 <STP_voidRotate+0x48>
	}
	else if(Copy_u8Speed == STP_SPEED_3){
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	31 f4       	brne	.+12     	; 0x21e0 <STP_voidRotate+0x48>
		Global_Speed = 4000; //equivlent of waiting for ~250 ms
    21d4:	80 ea       	ldi	r24, 0xA0	; 160
    21d6:	9f e0       	ldi	r25, 0x0F	; 15
    21d8:	90 93 8b 01 	sts	0x018B, r25
    21dc:	80 93 8a 01 	sts	0x018A, r24
	}
	Global_direction = Copy_u8Direction;
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	80 93 8c 01 	sts	0x018C, r24

}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <Rotate>:

void Rotate(void){
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	if(Global_direction == STP_DIRECTION_CW){
    21f8:	80 91 8c 01 	lds	r24, 0x018C
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	11 f4       	brne	.+4      	; 0x2204 <Rotate+0x14>
		RotateCW();
    2200:	0e 94 11 11 	call	0x2222	; 0x2222 <RotateCW>
	}
	if(Global_direction == STP_DIRECTION_ACW){
    2204:	80 91 8c 01 	lds	r24, 0x018C
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	11 f4       	brne	.+4      	; 0x2210 <Rotate+0x20>
		RotateACW();
    220c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <RotateACW>
	}
	if(Global_direction == STP_OFF){
    2210:	80 91 8c 01 	lds	r24, 0x018C
    2214:	83 30       	cpi	r24, 0x03	; 3
    2216:	11 f4       	brne	.+4      	; 0x221c <Rotate+0x2c>
		OFF();
    2218:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <OFF>
	}
}
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <RotateCW>:

void RotateCW(void){
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62

	static u16 Local_u16Count =0;
	if(Local_u16Count <= (Global_Speed/4)){
    222a:	80 91 8a 01 	lds	r24, 0x018A
    222e:	90 91 8b 01 	lds	r25, 0x018B
    2232:	9c 01       	movw	r18, r24
    2234:	36 95       	lsr	r19
    2236:	27 95       	ror	r18
    2238:	36 95       	lsr	r19
    223a:	27 95       	ror	r18
    223c:	80 91 80 01 	lds	r24, 0x0180
    2240:	90 91 81 01 	lds	r25, 0x0181
    2244:	28 17       	cp	r18, r24
    2246:	39 07       	cpc	r19, r25
    2248:	a8 f0       	brcs	.+42     	; 0x2274 <RotateCW+0x52>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	62 e0       	ldi	r22, 0x02	; 2
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	63 e0       	ldi	r22, 0x03	; 3
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2272:	af c0       	rjmp	.+350    	; 0x23d2 <RotateCW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed/4))&&(Local_u16Count <= (Global_Speed/2))){
    2274:	80 91 8a 01 	lds	r24, 0x018A
    2278:	90 91 8b 01 	lds	r25, 0x018B
    227c:	9c 01       	movw	r18, r24
    227e:	36 95       	lsr	r19
    2280:	27 95       	ror	r18
    2282:	36 95       	lsr	r19
    2284:	27 95       	ror	r18
    2286:	80 91 80 01 	lds	r24, 0x0180
    228a:	90 91 81 01 	lds	r25, 0x0181
    228e:	28 17       	cp	r18, r24
    2290:	39 07       	cpc	r19, r25
    2292:	18 f5       	brcc	.+70     	; 0x22da <RotateCW+0xb8>
    2294:	80 91 8a 01 	lds	r24, 0x018A
    2298:	90 91 8b 01 	lds	r25, 0x018B
    229c:	9c 01       	movw	r18, r24
    229e:	36 95       	lsr	r19
    22a0:	27 95       	ror	r18
    22a2:	80 91 80 01 	lds	r24, 0x0180
    22a6:	90 91 81 01 	lds	r25, 0x0181
    22aa:	28 17       	cp	r18, r24
    22ac:	39 07       	cpc	r19, r25
    22ae:	a8 f0       	brcs	.+42     	; 0x22da <RotateCW+0xb8>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	63 e0       	ldi	r22, 0x03	; 3
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    22d8:	7c c0       	rjmp	.+248    	; 0x23d2 <RotateCW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed/2))&&(Local_u16Count <= (Global_Speed*3/4))){
    22da:	80 91 8a 01 	lds	r24, 0x018A
    22de:	90 91 8b 01 	lds	r25, 0x018B
    22e2:	9c 01       	movw	r18, r24
    22e4:	36 95       	lsr	r19
    22e6:	27 95       	ror	r18
    22e8:	80 91 80 01 	lds	r24, 0x0180
    22ec:	90 91 81 01 	lds	r25, 0x0181
    22f0:	28 17       	cp	r18, r24
    22f2:	39 07       	cpc	r19, r25
    22f4:	50 f5       	brcc	.+84     	; 0x234a <RotateCW+0x128>
    22f6:	20 91 8a 01 	lds	r18, 0x018A
    22fa:	30 91 8b 01 	lds	r19, 0x018B
    22fe:	c9 01       	movw	r24, r18
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	9c 01       	movw	r18, r24
    230a:	36 95       	lsr	r19
    230c:	27 95       	ror	r18
    230e:	36 95       	lsr	r19
    2310:	27 95       	ror	r18
    2312:	80 91 80 01 	lds	r24, 0x0180
    2316:	90 91 81 01 	lds	r25, 0x0181
    231a:	28 17       	cp	r18, r24
    231c:	39 07       	cpc	r19, r25
    231e:	a8 f0       	brcs	.+42     	; 0x234a <RotateCW+0x128>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	63 e0       	ldi	r22, 0x03	; 3
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2348:	44 c0       	rjmp	.+136    	; 0x23d2 <RotateCW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed*3/4))&&(Local_u16Count < (Global_Speed))){
    234a:	20 91 8a 01 	lds	r18, 0x018A
    234e:	30 91 8b 01 	lds	r19, 0x018B
    2352:	c9 01       	movw	r24, r18
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	9c 01       	movw	r18, r24
    235e:	36 95       	lsr	r19
    2360:	27 95       	ror	r18
    2362:	36 95       	lsr	r19
    2364:	27 95       	ror	r18
    2366:	80 91 80 01 	lds	r24, 0x0180
    236a:	90 91 81 01 	lds	r25, 0x0181
    236e:	28 17       	cp	r18, r24
    2370:	39 07       	cpc	r19, r25
    2372:	00 f5       	brcc	.+64     	; 0x23b4 <RotateCW+0x192>
    2374:	20 91 80 01 	lds	r18, 0x0180
    2378:	30 91 81 01 	lds	r19, 0x0181
    237c:	80 91 8a 01 	lds	r24, 0x018A
    2380:	90 91 8b 01 	lds	r25, 0x018B
    2384:	28 17       	cp	r18, r24
    2386:	39 07       	cpc	r19, r25
    2388:	a8 f4       	brcc	.+42     	; 0x23b4 <RotateCW+0x192>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	63 e0       	ldi	r22, 0x03	; 3
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <RotateCW+0x1b0>
	}
	else if(Local_u16Count == Global_Speed){
    23b4:	20 91 80 01 	lds	r18, 0x0180
    23b8:	30 91 81 01 	lds	r19, 0x0181
    23bc:	80 91 8a 01 	lds	r24, 0x018A
    23c0:	90 91 8b 01 	lds	r25, 0x018B
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	21 f4       	brne	.+8      	; 0x23d2 <RotateCW+0x1b0>
		Local_u16Count = 0;
    23ca:	10 92 81 01 	sts	0x0181, r1
    23ce:	10 92 80 01 	sts	0x0180, r1
	}

	Local_u16Count++;
    23d2:	80 91 80 01 	lds	r24, 0x0180
    23d6:	90 91 81 01 	lds	r25, 0x0181
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	90 93 81 01 	sts	0x0181, r25
    23e0:	80 93 80 01 	sts	0x0180, r24
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <RotateACW>:

void RotateACW(void){
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Count =0;
	if(Local_u16Count <= (Global_Speed/4)){
    23f2:	80 91 8a 01 	lds	r24, 0x018A
    23f6:	90 91 8b 01 	lds	r25, 0x018B
    23fa:	9c 01       	movw	r18, r24
    23fc:	36 95       	lsr	r19
    23fe:	27 95       	ror	r18
    2400:	36 95       	lsr	r19
    2402:	27 95       	ror	r18
    2404:	80 91 82 01 	lds	r24, 0x0182
    2408:	90 91 83 01 	lds	r25, 0x0183
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	a8 f0       	brcs	.+42     	; 0x243c <RotateACW+0x52>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_HIGH);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    243a:	af c0       	rjmp	.+350    	; 0x259a <RotateACW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed/4))&&(Local_u16Count <= (Global_Speed/2))){
    243c:	80 91 8a 01 	lds	r24, 0x018A
    2440:	90 91 8b 01 	lds	r25, 0x018B
    2444:	9c 01       	movw	r18, r24
    2446:	36 95       	lsr	r19
    2448:	27 95       	ror	r18
    244a:	36 95       	lsr	r19
    244c:	27 95       	ror	r18
    244e:	80 91 82 01 	lds	r24, 0x0182
    2452:	90 91 83 01 	lds	r25, 0x0183
    2456:	28 17       	cp	r18, r24
    2458:	39 07       	cpc	r19, r25
    245a:	18 f5       	brcc	.+70     	; 0x24a2 <RotateACW+0xb8>
    245c:	80 91 8a 01 	lds	r24, 0x018A
    2460:	90 91 8b 01 	lds	r25, 0x018B
    2464:	9c 01       	movw	r18, r24
    2466:	36 95       	lsr	r19
    2468:	27 95       	ror	r18
    246a:	80 91 82 01 	lds	r24, 0x0182
    246e:	90 91 83 01 	lds	r25, 0x0183
    2472:	28 17       	cp	r18, r24
    2474:	39 07       	cpc	r19, r25
    2476:	a8 f0       	brcs	.+42     	; 0x24a2 <RotateACW+0xb8>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    2482:	83 e0       	ldi	r24, 0x03	; 3
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_HIGH);
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	63 e0       	ldi	r22, 0x03	; 3
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    24a0:	7c c0       	rjmp	.+248    	; 0x259a <RotateACW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed/2))&&(Local_u16Count <= (Global_Speed*3/4))){
    24a2:	80 91 8a 01 	lds	r24, 0x018A
    24a6:	90 91 8b 01 	lds	r25, 0x018B
    24aa:	9c 01       	movw	r18, r24
    24ac:	36 95       	lsr	r19
    24ae:	27 95       	ror	r18
    24b0:	80 91 82 01 	lds	r24, 0x0182
    24b4:	90 91 83 01 	lds	r25, 0x0183
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	50 f5       	brcc	.+84     	; 0x2512 <RotateACW+0x128>
    24be:	20 91 8a 01 	lds	r18, 0x018A
    24c2:	30 91 8b 01 	lds	r19, 0x018B
    24c6:	c9 01       	movw	r24, r18
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	9c 01       	movw	r18, r24
    24d2:	36 95       	lsr	r19
    24d4:	27 95       	ror	r18
    24d6:	36 95       	lsr	r19
    24d8:	27 95       	ror	r18
    24da:	80 91 82 01 	lds	r24, 0x0182
    24de:	90 91 83 01 	lds	r25, 0x0183
    24e2:	28 17       	cp	r18, r24
    24e4:	39 07       	cpc	r19, r25
    24e6:	a8 f0       	brcs	.+42     	; 0x2512 <RotateACW+0x128>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_HIGH);
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	63 e0       	ldi	r22, 0x03	; 3
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2510:	44 c0       	rjmp	.+136    	; 0x259a <RotateACW+0x1b0>
	}
	else if((Local_u16Count > (Global_Speed*3/4))&&(Local_u16Count < (Global_Speed))){
    2512:	20 91 8a 01 	lds	r18, 0x018A
    2516:	30 91 8b 01 	lds	r19, 0x018B
    251a:	c9 01       	movw	r24, r18
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	82 0f       	add	r24, r18
    2522:	93 1f       	adc	r25, r19
    2524:	9c 01       	movw	r18, r24
    2526:	36 95       	lsr	r19
    2528:	27 95       	ror	r18
    252a:	36 95       	lsr	r19
    252c:	27 95       	ror	r18
    252e:	80 91 82 01 	lds	r24, 0x0182
    2532:	90 91 83 01 	lds	r25, 0x0183
    2536:	28 17       	cp	r18, r24
    2538:	39 07       	cpc	r19, r25
    253a:	00 f5       	brcc	.+64     	; 0x257c <RotateACW+0x192>
    253c:	20 91 82 01 	lds	r18, 0x0182
    2540:	30 91 83 01 	lds	r19, 0x0183
    2544:	80 91 8a 01 	lds	r24, 0x018A
    2548:	90 91 8b 01 	lds	r25, 0x018B
    254c:	28 17       	cp	r18, r24
    254e:	39 07       	cpc	r19, r25
    2550:	a8 f4       	brcc	.+42     	; 0x257c <RotateACW+0x192>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_HIGH);
    2552:	83 e0       	ldi	r24, 0x03	; 3
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    257a:	0f c0       	rjmp	.+30     	; 0x259a <RotateACW+0x1b0>
	}
	else if(Local_u16Count == Global_Speed){
    257c:	20 91 82 01 	lds	r18, 0x0182
    2580:	30 91 83 01 	lds	r19, 0x0183
    2584:	80 91 8a 01 	lds	r24, 0x018A
    2588:	90 91 8b 01 	lds	r25, 0x018B
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	21 f4       	brne	.+8      	; 0x259a <RotateACW+0x1b0>
		Local_u16Count = 0;
    2592:	10 92 83 01 	sts	0x0183, r1
    2596:	10 92 82 01 	sts	0x0182, r1
	}

	Local_u16Count++;
    259a:	80 91 82 01 	lds	r24, 0x0182
    259e:	90 91 83 01 	lds	r25, 0x0183
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	90 93 83 01 	sts	0x0183, r25
    25a8:	80 93 82 01 	sts	0x0182, r24
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <STP_voidOff>:

void STP_voidOff(void){
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	Global_direction = STP_OFF;
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	80 93 8c 01 	sts	0x018C, r24
}
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <OFF>:

void OFF(void){
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(STP_PORT, STP_COIL_BLUE,   DIO_LOW);
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_PINK,   DIO_LOW);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_YELLOW, DIO_LOW);
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STP_PORT, STP_COIL_ORANGE, DIO_LOW);
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	63 e0       	ldi	r22, 0x03	; 3
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
}
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <LCD_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	cc 54       	subi	r28, 0x4C	; 76
    260a:	d0 40       	sbci	r29, 0x00	; 0
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	6f ef       	ldi	r22, 0xFF	; 255
    261a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	41 e0       	ldi	r20, 0x01	; 1
    2624:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    2632:	83 e0       	ldi	r24, 0x03	; 3
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
    263c:	fe 01       	movw	r30, r28
    263e:	e7 5b       	subi	r30, 0xB7	; 183
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	ac e0       	ldi	r26, 0x0C	; 12
    2648:	b2 e4       	ldi	r27, 0x42	; 66
    264a:	80 83       	st	Z, r24
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	a2 83       	std	Z+2, r26	; 0x02
    2650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	8e 01       	movw	r16, r28
    2654:	0b 5b       	subi	r16, 0xBB	; 187
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	e7 5b       	subi	r30, 0xB7	; 183
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a ef       	ldi	r20, 0xFA	; 250
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2680:	fe 01       	movw	r30, r28
    2682:	eb 5b       	subi	r30, 0xBB	; 187
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	44 f4       	brge	.+16     	; 0x26ae <LCD_voidInit+0xb2>
		__ticks = 1;
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 5b       	subi	r30, 0xBD	; 189
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	64 c0       	rjmp	.+200    	; 0x2776 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    26ae:	fe 01       	movw	r30, r28
    26b0:	eb 5b       	subi	r30, 0xBB	; 187
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <LCD_voidInit+0xd2>
    26cc:	43 c0       	rjmp	.+134    	; 0x2754 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8e 01       	movw	r16, r28
    26ee:	0d 5b       	subi	r16, 0xBD	; 189
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
    2704:	1f c0       	rjmp	.+62     	; 0x2744 <LCD_voidInit+0x148>
    2706:	fe 01       	movw	r30, r28
    2708:	ef 5b       	subi	r30, 0xBF	; 191
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2714:	fe 01       	movw	r30, r28
    2716:	ef 5b       	subi	r30, 0xBF	; 191
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_voidInit+0x122>
    2722:	fe 01       	movw	r30, r28
    2724:	ef 5b       	subi	r30, 0xBF	; 191
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	de 01       	movw	r26, r28
    272e:	ad 5b       	subi	r26, 0xBD	; 189
    2730:	bf 4f       	sbci	r27, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	ed 5b       	subi	r30, 0xBD	; 189
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	11 96       	adiw	r26, 0x01	; 1
    2740:	9c 93       	st	X, r25
    2742:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	fe 01       	movw	r30, r28
    2746:	ed 5b       	subi	r30, 0xBD	; 189
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	d1 f6       	brne	.-76     	; 0x2706 <LCD_voidInit+0x10a>
    2752:	24 c0       	rjmp	.+72     	; 0x279c <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	8e 01       	movw	r16, r28
    2756:	0d 5b       	subi	r16, 0xBD	; 189
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	eb 5b       	subi	r30, 0xBB	; 187
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	fe 01       	movw	r30, r28
    2778:	ed 5b       	subi	r30, 0xBD	; 189
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	fe 01       	movw	r30, r28
    2782:	ff 96       	adiw	r30, 0x3f	; 63
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
    2788:	fe 01       	movw	r30, r28
    278a:	ff 96       	adiw	r30, 0x3f	; 63
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_voidInit+0x194>
    2794:	fe 01       	movw	r30, r28
    2796:	ff 96       	adiw	r30, 0x3f	; 63
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    279c:	88 e3       	ldi	r24, 0x38	; 56
    279e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	a8 e4       	ldi	r26, 0x48	; 72
    27a8:	b2 e4       	ldi	r27, 0x42	; 66
    27aa:	8b af       	std	Y+59, r24	; 0x3b
    27ac:	9c af       	std	Y+60, r25	; 0x3c
    27ae:	ad af       	std	Y+61, r26	; 0x3d
    27b0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    27b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    27b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ba:	2b ea       	ldi	r18, 0xAB	; 171
    27bc:	3a ea       	ldi	r19, 0xAA	; 170
    27be:	4a e2       	ldi	r20, 0x2A	; 42
    27c0:	50 e4       	ldi	r21, 0x40	; 64
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8f ab       	std	Y+55, r24	; 0x37
    27cc:	98 af       	std	Y+56, r25	; 0x38
    27ce:	a9 af       	std	Y+57, r26	; 0x39
    27d0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    27d2:	6f a9       	ldd	r22, Y+55	; 0x37
    27d4:	78 ad       	ldd	r23, Y+56	; 0x38
    27d6:	89 ad       	ldd	r24, Y+57	; 0x39
    27d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e8       	ldi	r20, 0x80	; 128
    27e0:	5f e3       	ldi	r21, 0x3F	; 63
    27e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	1c f4       	brge	.+6      	; 0x27f0 <LCD_voidInit+0x1f4>
		__ticks = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	8e ab       	std	Y+54, r24	; 0x36
    27ee:	91 c0       	rjmp	.+290    	; 0x2912 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    27f0:	6f a9       	ldd	r22, Y+55	; 0x37
    27f2:	78 ad       	ldd	r23, Y+56	; 0x38
    27f4:	89 ad       	ldd	r24, Y+57	; 0x39
    27f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	53 e4       	ldi	r21, 0x43	; 67
    2800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	0c f0       	brlt	.+2      	; 0x280a <LCD_voidInit+0x20e>
    2808:	7b c0       	rjmp	.+246    	; 0x2900 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    280a:	6b ad       	ldd	r22, Y+59	; 0x3b
    280c:	7c ad       	ldd	r23, Y+60	; 0x3c
    280e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2810:	9e ad       	ldd	r25, Y+62	; 0x3e
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4a e7       	ldi	r20, 0x7A	; 122
    2818:	54 e4       	ldi	r21, 0x44	; 68
    281a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	8a ab       	std	Y+50, r24	; 0x32
    2824:	9b ab       	std	Y+51, r25	; 0x33
    2826:	ac ab       	std	Y+52, r26	; 0x34
    2828:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	6a a9       	ldd	r22, Y+50	; 0x32
    282c:	7b a9       	ldd	r23, Y+51	; 0x33
    282e:	8c a9       	ldd	r24, Y+52	; 0x34
    2830:	9d a9       	ldd	r25, Y+53	; 0x35
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a ef       	ldi	r20, 0xFA	; 250
    2838:	54 e4       	ldi	r21, 0x44	; 68
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8e a7       	std	Y+46, r24	; 0x2e
    2844:	9f a7       	std	Y+47, r25	; 0x2f
    2846:	a8 ab       	std	Y+48, r26	; 0x30
    2848:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    284a:	6e a5       	ldd	r22, Y+46	; 0x2e
    284c:	7f a5       	ldd	r23, Y+47	; 0x2f
    284e:	88 a9       	ldd	r24, Y+48	; 0x30
    2850:	99 a9       	ldd	r25, Y+49	; 0x31
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <LCD_voidInit+0x270>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9d a7       	std	Y+45, r25	; 0x2d
    2868:	8c a7       	std	Y+44, r24	; 0x2c
    286a:	3f c0       	rjmp	.+126    	; 0x28ea <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    286c:	6e a5       	ldd	r22, Y+46	; 0x2e
    286e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2870:	88 a9       	ldd	r24, Y+48	; 0x30
    2872:	99 a9       	ldd	r25, Y+49	; 0x31
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	3f ef       	ldi	r19, 0xFF	; 255
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	57 e4       	ldi	r21, 0x47	; 71
    287c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2880:	18 16       	cp	r1, r24
    2882:	4c f5       	brge	.+82     	; 0x28d6 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	6a a9       	ldd	r22, Y+50	; 0x32
    2886:	7b a9       	ldd	r23, Y+51	; 0x33
    2888:	8c a9       	ldd	r24, Y+52	; 0x34
    288a:	9d a9       	ldd	r25, Y+53	; 0x35
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9d a7       	std	Y+45, r25	; 0x2d
    28aa:	8c a7       	std	Y+44, r24	; 0x2c
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_voidInit+0x2d0>
    28ae:	88 ec       	ldi	r24, 0xC8	; 200
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9b a7       	std	Y+43, r25	; 0x2b
    28b4:	8a a7       	std	Y+42, r24	; 0x2a
    28b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    28b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_voidInit+0x2be>
    28be:	9b a7       	std	Y+43, r25	; 0x2b
    28c0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    28c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9d a7       	std	Y+45, r25	; 0x2d
    28ca:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    28ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	69 f7       	brne	.-38     	; 0x28ae <LCD_voidInit+0x2b2>
    28d4:	24 c0       	rjmp	.+72     	; 0x291e <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    28d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    28da:	88 a9       	ldd	r24, Y+48	; 0x30
    28dc:	99 a9       	ldd	r25, Y+49	; 0x31
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9d a7       	std	Y+45, r25	; 0x2d
    28e8:	8c a7       	std	Y+44, r24	; 0x2c
    28ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    28ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    28ee:	99 a7       	std	Y+41, r25	; 0x29
    28f0:	88 a7       	std	Y+40, r24	; 0x28
    28f2:	88 a5       	ldd	r24, Y+40	; 0x28
    28f4:	99 a5       	ldd	r25, Y+41	; 0x29
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_voidInit+0x2fa>
    28fa:	99 a7       	std	Y+41, r25	; 0x29
    28fc:	88 a7       	std	Y+40, r24	; 0x28
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2900:	6f a9       	ldd	r22, Y+55	; 0x37
    2902:	78 ad       	ldd	r23, Y+56	; 0x38
    2904:	89 ad       	ldd	r24, Y+57	; 0x39
    2906:	9a ad       	ldd	r25, Y+58	; 0x3a
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8e ab       	std	Y+54, r24	; 0x36
    2912:	8e a9       	ldd	r24, Y+54	; 0x36
    2914:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2916:	8f a1       	ldd	r24, Y+39	; 0x27
    2918:	8a 95       	dec	r24
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_voidInit+0x31c>
    291c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    291e:	8f e0       	ldi	r24, 0x0F	; 15
    2920:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a8 e4       	ldi	r26, 0x48	; 72
    292a:	b2 e4       	ldi	r27, 0x42	; 66
    292c:	8b a3       	std	Y+35, r24	; 0x23
    292e:	9c a3       	std	Y+36, r25	; 0x24
    2930:	ad a3       	std	Y+37, r26	; 0x25
    2932:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	2b ea       	ldi	r18, 0xAB	; 171
    293e:	3a ea       	ldi	r19, 0xAA	; 170
    2940:	4a e2       	ldi	r20, 0x2A	; 42
    2942:	50 e4       	ldi	r21, 0x40	; 64
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8f 8f       	std	Y+31, r24	; 0x1f
    294e:	98 a3       	std	Y+32, r25	; 0x20
    2950:	a9 a3       	std	Y+33, r26	; 0x21
    2952:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2954:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2956:	78 a1       	ldd	r23, Y+32	; 0x20
    2958:	89 a1       	ldd	r24, Y+33	; 0x21
    295a:	9a a1       	ldd	r25, Y+34	; 0x22
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	1c f4       	brge	.+6      	; 0x2972 <LCD_voidInit+0x376>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	8e 8f       	std	Y+30, r24	; 0x1e
    2970:	91 c0       	rjmp	.+290    	; 0x2a94 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    2972:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2974:	78 a1       	ldd	r23, Y+32	; 0x20
    2976:	89 a1       	ldd	r24, Y+33	; 0x21
    2978:	9a a1       	ldd	r25, Y+34	; 0x22
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	53 e4       	ldi	r21, 0x43	; 67
    2982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	0c f0       	brlt	.+2      	; 0x298c <LCD_voidInit+0x390>
    298a:	7b c0       	rjmp	.+246    	; 0x2a82 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    298c:	6b a1       	ldd	r22, Y+35	; 0x23
    298e:	7c a1       	ldd	r23, Y+36	; 0x24
    2990:	8d a1       	ldd	r24, Y+37	; 0x25
    2992:	9e a1       	ldd	r25, Y+38	; 0x26
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a e7       	ldi	r20, 0x7A	; 122
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	8a 8f       	std	Y+26, r24	; 0x1a
    29a6:	9b 8f       	std	Y+27, r25	; 0x1b
    29a8:	ac 8f       	std	Y+28, r26	; 0x1c
    29aa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a ef       	ldi	r20, 0xFA	; 250
    29ba:	54 e4       	ldi	r21, 0x44	; 68
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8e 8b       	std	Y+22, r24	; 0x16
    29c6:	9f 8b       	std	Y+23, r25	; 0x17
    29c8:	a8 8f       	std	Y+24, r26	; 0x18
    29ca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    29cc:	6e 89       	ldd	r22, Y+22	; 0x16
    29ce:	7f 89       	ldd	r23, Y+23	; 0x17
    29d0:	88 8d       	ldd	r24, Y+24	; 0x18
    29d2:	99 8d       	ldd	r25, Y+25	; 0x19
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <LCD_voidInit+0x3f2>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9d 8b       	std	Y+21, r25	; 0x15
    29ea:	8c 8b       	std	Y+20, r24	; 0x14
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    29ee:	6e 89       	ldd	r22, Y+22	; 0x16
    29f0:	7f 89       	ldd	r23, Y+23	; 0x17
    29f2:	88 8d       	ldd	r24, Y+24	; 0x18
    29f4:	99 8d       	ldd	r25, Y+25	; 0x19
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9d 8b       	std	Y+21, r25	; 0x15
    2a2c:	8c 8b       	std	Y+20, r24	; 0x14
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <LCD_voidInit+0x452>
    2a30:	88 ec       	ldi	r24, 0xC8	; 200
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9b 8b       	std	Y+19, r25	; 0x13
    2a36:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a38:	8a 89       	ldd	r24, Y+18	; 0x12
    2a3a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_voidInit+0x440>
    2a40:	9b 8b       	std	Y+19, r25	; 0x13
    2a42:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8c 89       	ldd	r24, Y+20	; 0x14
    2a46:	9d 89       	ldd	r25, Y+21	; 0x15
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9d 8b       	std	Y+21, r25	; 0x15
    2a4c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    2a50:	9d 89       	ldd	r25, Y+21	; 0x15
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <LCD_voidInit+0x434>
    2a56:	24 c0       	rjmp	.+72     	; 0x2aa0 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6e 89       	ldd	r22, Y+22	; 0x16
    2a5a:	7f 89       	ldd	r23, Y+23	; 0x17
    2a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    2a5e:	99 8d       	ldd	r25, Y+25	; 0x19
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9d 8b       	std	Y+21, r25	; 0x15
    2a6a:	8c 8b       	std	Y+20, r24	; 0x14
    2a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    2a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    2a70:	99 8b       	std	Y+17, r25	; 0x11
    2a72:	88 8b       	std	Y+16, r24	; 0x10
    2a74:	88 89       	ldd	r24, Y+16	; 0x10
    2a76:	99 89       	ldd	r25, Y+17	; 0x11
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <LCD_voidInit+0x47c>
    2a7c:	99 8b       	std	Y+17, r25	; 0x11
    2a7e:	88 8b       	std	Y+16, r24	; 0x10
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a84:	78 a1       	ldd	r23, Y+32	; 0x20
    2a86:	89 a1       	ldd	r24, Y+33	; 0x21
    2a88:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8e 8f       	std	Y+30, r24	; 0x1e
    2a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	8a 95       	dec	r24
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <LCD_voidInit+0x49e>
    2a9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e4       	ldi	r27, 0x40	; 64
    2aae:	8b 87       	std	Y+11, r24	; 0x0b
    2ab0:	9c 87       	std	Y+12, r25	; 0x0c
    2ab2:	ad 87       	std	Y+13, r26	; 0x0d
    2ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	54 e4       	ldi	r21, 0x44	; 68
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8f 83       	std	Y+7, r24	; 0x07
    2ad0:	98 87       	std	Y+8, r25	; 0x08
    2ad2:	a9 87       	std	Y+9, r26	; 0x09
    2ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad8:	78 85       	ldd	r23, Y+8	; 0x08
    2ada:	89 85       	ldd	r24, Y+9	; 0x09
    2adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <LCD_voidInit+0x4fc>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    2af8:	6f 81       	ldd	r22, Y+7	; 0x07
    2afa:	78 85       	ldd	r23, Y+8	; 0x08
    2afc:	89 85       	ldd	r24, Y+9	; 0x09
    2afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <LCD_voidInit+0x55c>
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_voidInit+0x54a>
    2b4a:	9c 83       	std	Y+4, r25	; 0x04
    2b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <LCD_voidInit+0x53e>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_voidInit+0x586>
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2b8a:	c4 5b       	subi	r28, 0xB4	; 180
    2b8c:	df 4f       	sbci	r29, 0xFF	; 255
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	08 95       	ret

00002ba2 <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	69 97       	sbiw	r28, 0x19	; 25
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd0:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	62 e0       	ldi	r22, 0x02	; 2
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e8       	ldi	r26, 0x80	; 128
    2be4:	bf e3       	ldi	r27, 0x3F	; 63
    2be6:	8d 8b       	std	Y+21, r24	; 0x15
    2be8:	9e 8b       	std	Y+22, r25	; 0x16
    2bea:	af 8b       	std	Y+23, r26	; 0x17
    2bec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bee:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	2b ea       	ldi	r18, 0xAB	; 171
    2bf8:	3a ea       	ldi	r19, 0xAA	; 170
    2bfa:	4a e2       	ldi	r20, 0x2A	; 42
    2bfc:	50 e4       	ldi	r21, 0x40	; 64
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	89 8b       	std	Y+17, r24	; 0x11
    2c08:	9a 8b       	std	Y+18, r25	; 0x12
    2c0a:	ab 8b       	std	Y+19, r26	; 0x13
    2c0c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c0e:	69 89       	ldd	r22, Y+17	; 0x11
    2c10:	7a 89       	ldd	r23, Y+18	; 0x12
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	1c f4       	brge	.+6      	; 0x2c2c <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	88 8b       	std	Y+16, r24	; 0x10
    2c2a:	91 c0       	rjmp	.+290    	; 0x2d4e <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    2c2c:	69 89       	ldd	r22, Y+17	; 0x11
    2c2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c30:	8b 89       	ldd	r24, Y+19	; 0x13
    2c32:	9c 89       	ldd	r25, Y+20	; 0x14
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	53 e4       	ldi	r21, 0x43	; 67
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <LCD_voidSendCommand+0xa4>
    2c44:	7b c0       	rjmp	.+246    	; 0x2d3c <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2c46:	6d 89       	ldd	r22, Y+21	; 0x15
    2c48:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a e7       	ldi	r20, 0x7A	; 122
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8c 87       	std	Y+12, r24	; 0x0c
    2c60:	9d 87       	std	Y+13, r25	; 0x0d
    2c62:	ae 87       	std	Y+14, r26	; 0x0e
    2c64:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c68:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	88 87       	std	Y+8, r24	; 0x08
    2c80:	99 87       	std	Y+9, r25	; 0x09
    2c82:	aa 87       	std	Y+10, r26	; 0x0a
    2c84:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c86:	68 85       	ldd	r22, Y+8	; 0x08
    2c88:	79 85       	ldd	r23, Y+9	; 0x09
    2c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9f 83       	std	Y+7, r25	; 0x07
    2ca4:	8e 83       	std	Y+6, r24	; 0x06
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    2ca8:	68 85       	ldd	r22, Y+8	; 0x08
    2caa:	79 85       	ldd	r23, Y+9	; 0x09
    2cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	4c f5       	brge	.+82     	; 0x2d12 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9f 83       	std	Y+7, r25	; 0x07
    2ce6:	8e 83       	std	Y+6, r24	; 0x06
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <LCD_voidSendCommand+0x166>
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9d 83       	std	Y+5, r25	; 0x05
    2cf0:	8c 83       	std	Y+4, r24	; 0x04
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_voidSendCommand+0x154>
    2cfa:	9d 83       	std	Y+5, r25	; 0x05
    2cfc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2d00:	9f 81       	ldd	r25, Y+7	; 0x07
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9f 83       	std	Y+7, r25	; 0x07
    2d06:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	8e 81       	ldd	r24, Y+6	; 0x06
    2d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <LCD_voidSendCommand+0x148>
    2d10:	24 c0       	rjmp	.+72     	; 0x2d5a <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	68 85       	ldd	r22, Y+8	; 0x08
    2d14:	79 85       	ldd	r23, Y+9	; 0x09
    2d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9f 83       	std	Y+7, r25	; 0x07
    2d24:	8e 83       	std	Y+6, r24	; 0x06
    2d26:	8e 81       	ldd	r24, Y+6	; 0x06
    2d28:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2a:	9b 83       	std	Y+3, r25	; 0x03
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_voidSendCommand+0x190>
    2d36:	9b 83       	std	Y+3, r25	; 0x03
    2d38:	8a 83       	std	Y+2, r24	; 0x02
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d3c:	69 89       	ldd	r22, Y+17	; 0x11
    2d3e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d40:	8b 89       	ldd	r24, Y+19	; 0x13
    2d42:	9c 89       	ldd	r25, Y+20	; 0x14
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	88 8b       	std	Y+16, r24	; 0x10
    2d4e:	88 89       	ldd	r24, Y+16	; 0x10
    2d50:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	8a 95       	dec	r24
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_voidSendCommand+0x1b2>
    2d58:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	62 e0       	ldi	r22, 0x02	; 2
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
}
    2d64:	69 96       	adiw	r28, 0x19	; 25
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	69 97       	sbiw	r28, 0x19	; 25
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	69 8d       	ldd	r22, Y+25	; 0x19
    2da4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	62 e0       	ldi	r22, 0x02	; 2
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e8       	ldi	r26, 0x80	; 128
    2db8:	bf e3       	ldi	r27, 0x3F	; 63
    2dba:	8d 8b       	std	Y+21, r24	; 0x15
    2dbc:	9e 8b       	std	Y+22, r25	; 0x16
    2dbe:	af 8b       	std	Y+23, r26	; 0x17
    2dc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dca:	2b ea       	ldi	r18, 0xAB	; 171
    2dcc:	3a ea       	ldi	r19, 0xAA	; 170
    2dce:	4a e2       	ldi	r20, 0x2A	; 42
    2dd0:	50 e4       	ldi	r21, 0x40	; 64
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	89 8b       	std	Y+17, r24	; 0x11
    2ddc:	9a 8b       	std	Y+18, r25	; 0x12
    2dde:	ab 8b       	std	Y+19, r26	; 0x13
    2de0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2de2:	69 89       	ldd	r22, Y+17	; 0x11
    2de4:	7a 89       	ldd	r23, Y+18	; 0x12
    2de6:	8b 89       	ldd	r24, Y+19	; 0x13
    2de8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	1c f4       	brge	.+6      	; 0x2e00 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	88 8b       	std	Y+16, r24	; 0x10
    2dfe:	91 c0       	rjmp	.+290    	; 0x2f22 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2e00:	69 89       	ldd	r22, Y+17	; 0x11
    2e02:	7a 89       	ldd	r23, Y+18	; 0x12
    2e04:	8b 89       	ldd	r24, Y+19	; 0x13
    2e06:	9c 89       	ldd	r25, Y+20	; 0x14
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	53 e4       	ldi	r21, 0x43	; 67
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	0c f0       	brlt	.+2      	; 0x2e1a <LCD_voidSendChar+0xa4>
    2e18:	7b c0       	rjmp	.+246    	; 0x2f10 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e20:	98 8d       	ldd	r25, Y+24	; 0x18
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	4a e7       	ldi	r20, 0x7A	; 122
    2e28:	54 e4       	ldi	r21, 0x44	; 68
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	8c 87       	std	Y+12, r24	; 0x0c
    2e34:	9d 87       	std	Y+13, r25	; 0x0d
    2e36:	ae 87       	std	Y+14, r26	; 0x0e
    2e38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e40:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a ef       	ldi	r20, 0xFA	; 250
    2e48:	54 e4       	ldi	r21, 0x44	; 68
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	88 87       	std	Y+8, r24	; 0x08
    2e54:	99 87       	std	Y+9, r25	; 0x09
    2e56:	aa 87       	std	Y+10, r26	; 0x0a
    2e58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e5a:	68 85       	ldd	r22, Y+8	; 0x08
    2e5c:	79 85       	ldd	r23, Y+9	; 0x09
    2e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <LCD_voidSendChar+0x106>
		__ticks = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9f 83       	std	Y+7, r25	; 0x07
    2e78:	8e 83       	std	Y+6, r24	; 0x06
    2e7a:	3f c0       	rjmp	.+126    	; 0x2efa <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2e7c:	68 85       	ldd	r22, Y+8	; 0x08
    2e7e:	79 85       	ldd	r23, Y+9	; 0x09
    2e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e82:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	4c f5       	brge	.+82     	; 0x2ee6 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e96:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e98:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9f 83       	std	Y+7, r25	; 0x07
    2eba:	8e 83       	std	Y+6, r24	; 0x06
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <LCD_voidSendChar+0x166>
    2ebe:	88 ec       	ldi	r24, 0xC8	; 200
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9d 83       	std	Y+5, r25	; 0x05
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_voidSendChar+0x154>
    2ece:	9d 83       	std	Y+5, r25	; 0x05
    2ed0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	9f 83       	std	Y+7, r25	; 0x07
    2eda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ede:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <LCD_voidSendChar+0x148>
    2ee4:	24 c0       	rjmp	.+72     	; 0x2f2e <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	68 85       	ldd	r22, Y+8	; 0x08
    2ee8:	79 85       	ldd	r23, Y+9	; 0x09
    2eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9f 83       	std	Y+7, r25	; 0x07
    2ef8:	8e 83       	std	Y+6, r24	; 0x06
    2efa:	8e 81       	ldd	r24, Y+6	; 0x06
    2efc:	9f 81       	ldd	r25, Y+7	; 0x07
    2efe:	9b 83       	std	Y+3, r25	; 0x03
    2f00:	8a 83       	std	Y+2, r24	; 0x02
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	9b 81       	ldd	r25, Y+3	; 0x03
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <LCD_voidSendChar+0x190>
    2f0a:	9b 83       	std	Y+3, r25	; 0x03
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f10:	69 89       	ldd	r22, Y+17	; 0x11
    2f12:	7a 89       	ldd	r23, Y+18	; 0x12
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	88 8b       	std	Y+16, r24	; 0x10
    2f22:	88 89       	ldd	r24, Y+16	; 0x10
    2f24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	8a 95       	dec	r24
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_voidSendChar+0x1b2>
    2f2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
	
}
    2f38:	69 96       	adiw	r28, 0x19	; 25
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <LCD_voidSendString+0x6>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    2f5a:	19 82       	std	Y+1, r1	; 0x01
    2f5c:	0e c0       	rjmp	.+28     	; 0x2f7a <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	9b 81       	ldd	r25, Y+3	; 0x03
    2f68:	fc 01       	movw	r30, r24
    2f6a:	e2 0f       	add	r30, r18
    2f6c:	f3 1f       	adc	r31, r19
    2f6e:	80 81       	ld	r24, Z
    2f70:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	8f 5f       	subi	r24, 0xFF	; 255
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	fc 01       	movw	r30, r24
    2f86:	e2 0f       	add	r30, r18
    2f88:	f3 1f       	adc	r31, r19
    2f8a:	80 81       	ld	r24, Z
    2f8c:	88 23       	and	r24, r24
    2f8e:	39 f7       	brne	.-50     	; 0x2f5e <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <LCD_voidSetLocation+0x6>
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <LCD_voidSetLocation+0x8>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	3c 83       	std	Y+4, r19	; 0x04
    2fb4:	2b 83       	std	Y+3, r18	; 0x03
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fba:	81 30       	cpi	r24, 0x01	; 1
    2fbc:	91 05       	cpc	r25, r1
    2fbe:	31 f0       	breq	.+12     	; 0x2fcc <LCD_voidSetLocation+0x30>
    2fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc4:	22 30       	cpi	r18, 0x02	; 2
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	31 f0       	breq	.+12     	; 0x2fd6 <LCD_voidSetLocation+0x3a>
    2fca:	09 c0       	rjmp	.+18     	; 0x2fde <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	80 58       	subi	r24, 0x80	; 128
    2fd0:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>
    2fd4:	04 c0       	rjmp	.+8      	; 0x2fde <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	80 54       	subi	r24, 0x40	; 64
    2fda:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>

	}
	
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	60 97       	sbiw	r28, 0x10	; 16
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	6d 87       	std	Y+13, r22	; 0x0d
    3006:	7e 87       	std	Y+14, r23	; 0x0e
    3008:	8f 87       	std	Y+15, r24	; 0x0f
    300a:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    300c:	89 e0       	ldi	r24, 0x09	; 9
    300e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	af 85       	ldd	r26, Y+15	; 0x0f
    3016:	b8 89       	ldd	r27, Y+16	; 0x10
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	a1 05       	cpc	r26, r1
    301c:	b1 05       	cpc	r27, r1
    301e:	21 f4       	brne	.+8      	; 0x3028 <LCD_voidSendNumber+0x3c>
    3020:	80 e3       	ldi	r24, 0x30	; 48
    3022:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LCD_voidSendChar>
    3026:	44 c0       	rjmp	.+136    	; 0x30b0 <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    3028:	1c 86       	std	Y+12, r1	; 0x0c
    302a:	2e c0       	rjmp	.+92     	; 0x3088 <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	08 2f       	mov	r16, r24
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	8d 85       	ldd	r24, Y+13	; 0x0d
    3034:	9e 85       	ldd	r25, Y+14	; 0x0e
    3036:	af 85       	ldd	r26, Y+15	; 0x0f
    3038:	b8 89       	ldd	r27, Y+16	; 0x10
    303a:	2a e0       	ldi	r18, 0x0A	; 10
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__udivmodsi4>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	28 2f       	mov	r18, r24
    3050:	20 5d       	subi	r18, 0xD0	; 208
    3052:	ce 01       	movw	r24, r28
    3054:	02 96       	adiw	r24, 0x02	; 2
    3056:	fc 01       	movw	r30, r24
    3058:	e0 0f       	add	r30, r16
    305a:	f1 1f       	adc	r31, r17
    305c:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    305e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3060:	9e 85       	ldd	r25, Y+14	; 0x0e
    3062:	af 85       	ldd	r26, Y+15	; 0x0f
    3064:	b8 89       	ldd	r27, Y+16	; 0x10
    3066:	2a e0       	ldi	r18, 0x0A	; 10
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__udivmodsi4>
    3076:	da 01       	movw	r26, r20
    3078:	c9 01       	movw	r24, r18
    307a:	8d 87       	std	Y+13, r24	; 0x0d
    307c:	9e 87       	std	Y+14, r25	; 0x0e
    307e:	af 87       	std	Y+15, r26	; 0x0f
    3080:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	81 50       	subi	r24, 0x01	; 1
    3086:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    3088:	8d 85       	ldd	r24, Y+13	; 0x0d
    308a:	9e 85       	ldd	r25, Y+14	; 0x0e
    308c:	af 85       	ldd	r26, Y+15	; 0x0f
    308e:	b8 89       	ldd	r27, Y+16	; 0x10
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	a1 05       	cpc	r26, r1
    3094:	b1 05       	cpc	r27, r1
    3096:	51 f6       	brne	.-108    	; 0x302c <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9c 01       	movw	r18, r24
    30a0:	2f 5f       	subi	r18, 0xFF	; 255
    30a2:	3f 4f       	sbci	r19, 0xFF	; 255
    30a4:	ce 01       	movw	r24, r28
    30a6:	02 96       	adiw	r24, 0x02	; 2
    30a8:	82 0f       	add	r24, r18
    30aa:	93 1f       	adc	r25, r19
    30ac:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <LCD_voidSendString>
	}
}
    30b0:	60 96       	adiw	r28, 0x10	; 16
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	08 95       	ret

000030c6 <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	6c 97       	sbiw	r28, 0x1c	; 28
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	8a 8f       	std	Y+26, r24	; 0x1a
    30dc:	7c 8f       	std	Y+28, r23	; 0x1c
    30de:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    30e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	08 96       	adiw	r24, 0x08	; 8
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_voidSendCommand>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 e2       	ldi	r26, 0x20	; 32
    30fe:	b2 e4       	ldi	r27, 0x42	; 66
    3100:	8d 8b       	std	Y+21, r24	; 0x15
    3102:	9e 8b       	std	Y+22, r25	; 0x16
    3104:	af 8b       	std	Y+23, r26	; 0x17
    3106:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	2b ea       	ldi	r18, 0xAB	; 171
    3112:	3a ea       	ldi	r19, 0xAA	; 170
    3114:	4a e2       	ldi	r20, 0x2A	; 42
    3116:	50 e4       	ldi	r21, 0x40	; 64
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	89 8b       	std	Y+17, r24	; 0x11
    3122:	9a 8b       	std	Y+18, r25	; 0x12
    3124:	ab 8b       	std	Y+19, r26	; 0x13
    3126:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3128:	69 89       	ldd	r22, Y+17	; 0x11
    312a:	7a 89       	ldd	r23, Y+18	; 0x12
    312c:	8b 89       	ldd	r24, Y+19	; 0x13
    312e:	9c 89       	ldd	r25, Y+20	; 0x14
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e8       	ldi	r20, 0x80	; 128
    3136:	5f e3       	ldi	r21, 0x3F	; 63
    3138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313c:	88 23       	and	r24, r24
    313e:	1c f4       	brge	.+6      	; 0x3146 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	88 8b       	std	Y+16, r24	; 0x10
    3144:	91 c0       	rjmp	.+290    	; 0x3268 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    3146:	69 89       	ldd	r22, Y+17	; 0x11
    3148:	7a 89       	ldd	r23, Y+18	; 0x12
    314a:	8b 89       	ldd	r24, Y+19	; 0x13
    314c:	9c 89       	ldd	r25, Y+20	; 0x14
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	53 e4       	ldi	r21, 0x43	; 67
    3156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	0c f0       	brlt	.+2      	; 0x3160 <LCD_voidDrawSpecialChar+0x9a>
    315e:	7b c0       	rjmp	.+246    	; 0x3256 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    3160:	6d 89       	ldd	r22, Y+21	; 0x15
    3162:	7e 89       	ldd	r23, Y+22	; 0x16
    3164:	8f 89       	ldd	r24, Y+23	; 0x17
    3166:	98 8d       	ldd	r25, Y+24	; 0x18
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a e7       	ldi	r20, 0x7A	; 122
    316e:	54 e4       	ldi	r21, 0x44	; 68
    3170:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	8c 87       	std	Y+12, r24	; 0x0c
    317a:	9d 87       	std	Y+13, r25	; 0x0d
    317c:	ae 87       	std	Y+14, r26	; 0x0e
    317e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3180:	6c 85       	ldd	r22, Y+12	; 0x0c
    3182:	7d 85       	ldd	r23, Y+13	; 0x0d
    3184:	8e 85       	ldd	r24, Y+14	; 0x0e
    3186:	9f 85       	ldd	r25, Y+15	; 0x0f
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	4a ef       	ldi	r20, 0xFA	; 250
    318e:	54 e4       	ldi	r21, 0x44	; 68
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	88 87       	std	Y+8, r24	; 0x08
    319a:	99 87       	std	Y+9, r25	; 0x09
    319c:	aa 87       	std	Y+10, r26	; 0x0a
    319e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31a0:	68 85       	ldd	r22, Y+8	; 0x08
    31a2:	79 85       	ldd	r23, Y+9	; 0x09
    31a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e8       	ldi	r20, 0x80	; 128
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b4:	88 23       	and	r24, r24
    31b6:	2c f4       	brge	.+10     	; 0x31c2 <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9f 83       	std	Y+7, r25	; 0x07
    31be:	8e 83       	std	Y+6, r24	; 0x06
    31c0:	3f c0       	rjmp	.+126    	; 0x3240 <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    31c2:	68 85       	ldd	r22, Y+8	; 0x08
    31c4:	79 85       	ldd	r23, Y+9	; 0x09
    31c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	3f ef       	ldi	r19, 0xFF	; 255
    31ce:	4f e7       	ldi	r20, 0x7F	; 127
    31d0:	57 e4       	ldi	r21, 0x47	; 71
    31d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d6:	18 16       	cp	r1, r24
    31d8:	4c f5       	brge	.+82     	; 0x322c <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31da:	6c 85       	ldd	r22, Y+12	; 0x0c
    31dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    31de:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e2       	ldi	r20, 0x20	; 32
    31e8:	51 e4       	ldi	r21, 0x41	; 65
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9f 83       	std	Y+7, r25	; 0x07
    3200:	8e 83       	std	Y+6, r24	; 0x06
    3202:	0f c0       	rjmp	.+30     	; 0x3222 <LCD_voidDrawSpecialChar+0x15c>
    3204:	88 ec       	ldi	r24, 0xC8	; 200
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9d 83       	std	Y+5, r25	; 0x05
    320a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    320c:	8c 81       	ldd	r24, Y+4	; 0x04
    320e:	9d 81       	ldd	r25, Y+5	; 0x05
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <LCD_voidDrawSpecialChar+0x14a>
    3214:	9d 83       	std	Y+5, r25	; 0x05
    3216:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3218:	8e 81       	ldd	r24, Y+6	; 0x06
    321a:	9f 81       	ldd	r25, Y+7	; 0x07
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	9f 83       	std	Y+7, r25	; 0x07
    3220:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3222:	8e 81       	ldd	r24, Y+6	; 0x06
    3224:	9f 81       	ldd	r25, Y+7	; 0x07
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	69 f7       	brne	.-38     	; 0x3204 <LCD_voidDrawSpecialChar+0x13e>
    322a:	24 c0       	rjmp	.+72     	; 0x3274 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322c:	68 85       	ldd	r22, Y+8	; 0x08
    322e:	79 85       	ldd	r23, Y+9	; 0x09
    3230:	8a 85       	ldd	r24, Y+10	; 0x0a
    3232:	9b 85       	ldd	r25, Y+11	; 0x0b
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9f 83       	std	Y+7, r25	; 0x07
    323e:	8e 83       	std	Y+6, r24	; 0x06
    3240:	8e 81       	ldd	r24, Y+6	; 0x06
    3242:	9f 81       	ldd	r25, Y+7	; 0x07
    3244:	9b 83       	std	Y+3, r25	; 0x03
    3246:	8a 83       	std	Y+2, r24	; 0x02
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <LCD_voidDrawSpecialChar+0x186>
    3250:	9b 83       	std	Y+3, r25	; 0x03
    3252:	8a 83       	std	Y+2, r24	; 0x02
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3256:	69 89       	ldd	r22, Y+17	; 0x11
    3258:	7a 89       	ldd	r23, Y+18	; 0x12
    325a:	8b 89       	ldd	r24, Y+19	; 0x13
    325c:	9c 89       	ldd	r25, Y+20	; 0x14
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	88 8b       	std	Y+16, r24	; 0x10
    3268:	88 89       	ldd	r24, Y+16	; 0x10
    326a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	8a 95       	dec	r24
    3270:	f1 f7       	brne	.-4      	; 0x326e <LCD_voidDrawSpecialChar+0x1a8>
    3272:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    3274:	19 8e       	std	Y+25, r1	; 0x19
    3276:	0e c0       	rjmp	.+28     	; 0x3294 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    3278:	89 8d       	ldd	r24, Y+25	; 0x19
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3282:	fc 01       	movw	r30, r24
    3284:	e2 0f       	add	r30, r18
    3286:	f3 1f       	adc	r31, r19
    3288:	80 81       	ld	r24, Z
    328a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    328e:	89 8d       	ldd	r24, Y+25	; 0x19
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	89 8f       	std	Y+25, r24	; 0x19
    3294:	89 8d       	ldd	r24, Y+25	; 0x19
    3296:	88 30       	cpi	r24, 0x08	; 8
    3298:	78 f3       	brcs	.-34     	; 0x3278 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    329a:	6c 96       	adiw	r28, 0x1c	; 28
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LCD_voidSendChar>
}
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <KPD_voidInit>:

u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};     // rows -> output
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};	// columns -> input


void KPD_voidInit(void){
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	0f 92       	push	r0
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    32d0:	19 82       	std	Y+1, r1	; 0x01
    32d2:	20 c0       	rjmp	.+64     	; 0x3314 <KPD_voidInit+0x4e>
		if (Local_u8Count < 4) {
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	84 30       	cpi	r24, 0x04	; 4
    32d8:	68 f4       	brcc	.+26     	; 0x32f4 <KPD_voidInit+0x2e>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_OUTPUT);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	fc 01       	movw	r30, r24
    32e2:	e8 58       	subi	r30, 0x88	; 136
    32e4:	fe 4f       	sbci	r31, 0xFE	; 254
    32e6:	90 81       	ld	r25, Z
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	69 2f       	mov	r22, r25
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
    32f2:	0d c0       	rjmp	.+26     	; 0x330e <KPD_voidInit+0x48>

		} else {
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	04 97       	sbiw	r24, 0x04	; 4
    32fc:	fc 01       	movw	r30, r24
    32fe:	e4 58       	subi	r30, 0x84	; 132
    3300:	fe 4f       	sbci	r31, 0xFE	; 254
    3302:	90 81       	ld	r25, Z
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	69 2f       	mov	r22, r25
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>


void KPD_voidInit(void){

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	8f 5f       	subi	r24, 0xFF	; 255
    3312:	89 83       	std	Y+1, r24	; 0x01
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	88 30       	cpi	r24, 0x08	; 8
    3318:	e8 f2       	brcs	.-70     	; 0x32d4 <KPD_voidInit+0xe>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
		}

	}

	DIO_voidSetPortValue(KPD_PORT, 0xff);
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	6f ef       	ldi	r22, 0xFF	; 255
    331e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>

}
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	63 97       	sbiw	r28, 0x13	; 19
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
    333e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;
    3340:	8f ef       	ldi	r24, 0xFF	; 255
    3342:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    3344:	1b 8a       	std	Y+19, r1	; 0x13
    3346:	dd c0       	rjmp	.+442    	; 0x3502 <KPD_u8GetPressedKey+0x1d8>
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    3348:	8b 89       	ldd	r24, Y+19	; 0x13
    334a:	88 2f       	mov	r24, r24
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	fc 01       	movw	r30, r24
    3350:	e8 58       	subi	r30, 0x88	; 136
    3352:	fe 4f       	sbci	r31, 0xFE	; 254
    3354:	90 81       	ld	r25, Z
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	69 2f       	mov	r22, r25
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    3360:	1a 8a       	std	Y+18, r1	; 0x12
    3362:	b9 c0       	rjmp	.+370    	; 0x34d6 <KPD_u8GetPressedKey+0x1ac>
			/* check if any button was pressed*/
			Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3364:	8a 89       	ldd	r24, Y+18	; 0x12
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	fc 01       	movw	r30, r24
    336c:	e4 58       	subi	r30, 0x84	; 132
    336e:	fe 4f       	sbci	r31, 0xFE	; 254
    3370:	90 81       	ld	r25, Z
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	69 2f       	mov	r22, r25
    3376:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    337a:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8Pressed == 0){
    337c:	89 89       	ldd	r24, Y+17	; 0x11
    337e:	88 23       	and	r24, r24
    3380:	09 f0       	breq	.+2      	; 0x3384 <KPD_u8GetPressedKey+0x5a>
    3382:	a6 c0       	rjmp	.+332    	; 0x34d0 <KPD_u8GetPressedKey+0x1a6>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a8 ec       	ldi	r26, 0xC8	; 200
    338a:	b1 e4       	ldi	r27, 0x41	; 65
    338c:	8b 87       	std	Y+11, r24	; 0x0b
    338e:	9c 87       	std	Y+12, r25	; 0x0c
    3390:	ad 87       	std	Y+13, r26	; 0x0d
    3392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	6b 85       	ldd	r22, Y+11	; 0x0b
    3396:	7c 85       	ldd	r23, Y+12	; 0x0c
    3398:	8d 85       	ldd	r24, Y+13	; 0x0d
    339a:	9e 85       	ldd	r25, Y+14	; 0x0e
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a ef       	ldi	r20, 0xFA	; 250
    33a2:	54 e4       	ldi	r21, 0x44	; 68
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	8f 83       	std	Y+7, r24	; 0x07
    33ae:	98 87       	std	Y+8, r25	; 0x08
    33b0:	a9 87       	std	Y+9, r26	; 0x09
    33b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b4:	6f 81       	ldd	r22, Y+7	; 0x07
    33b6:	78 85       	ldd	r23, Y+8	; 0x08
    33b8:	89 85       	ldd	r24, Y+9	; 0x09
    33ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c8:	88 23       	and	r24, r24
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <KPD_u8GetPressedKey+0xac>
		__ticks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
    33d4:	3f c0       	rjmp	.+126    	; 0x3454 <KPD_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    33d6:	6f 81       	ldd	r22, Y+7	; 0x07
    33d8:	78 85       	ldd	r23, Y+8	; 0x08
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	4c f5       	brge	.+82     	; 0x3440 <KPD_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <KPD_u8GetPressedKey+0x10c>
    3418:	88 ec       	ldi	r24, 0xC8	; 200
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	9c 83       	std	Y+4, r25	; 0x04
    341e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	9c 81       	ldd	r25, Y+4	; 0x04
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <KPD_u8GetPressedKey+0xfa>
    3428:	9c 83       	std	Y+4, r25	; 0x04
    342a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	69 f7       	brne	.-38     	; 0x3418 <KPD_u8GetPressedKey+0xee>
    343e:	14 c0       	rjmp	.+40     	; 0x3468 <KPD_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <KPD_u8GetPressedKey+0x136>
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
				/* waite for debouncing*/
				_delay_ms(25);
				/* checking for noise*/
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    3468:	8a 89       	ldd	r24, Y+18	; 0x12
    346a:	88 2f       	mov	r24, r24
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	fc 01       	movw	r30, r24
    3470:	e4 58       	subi	r30, 0x84	; 132
    3472:	fe 4f       	sbci	r31, 0xFE	; 254
    3474:	90 81       	ld	r25, Z
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	69 2f       	mov	r22, r25
    347a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    347e:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8Pressed == 0){
    3480:	89 89       	ldd	r24, Y+17	; 0x11
    3482:	88 23       	and	r24, r24
    3484:	29 f5       	brne	.+74     	; 0x34d0 <KPD_u8GetPressedKey+0x1a6>
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];
    3486:	8b 89       	ldd	r24, Y+19	; 0x13
    3488:	48 2f       	mov	r20, r24
    348a:	50 e0       	ldi	r21, 0x00	; 0
    348c:	8a 89       	ldd	r24, Y+18	; 0x12
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	ca 01       	movw	r24, r20
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	82 0f       	add	r24, r18
    349e:	93 1f       	adc	r25, r19
    34a0:	fc 01       	movw	r30, r24
    34a2:	e8 59       	subi	r30, 0x98	; 152
    34a4:	fe 4f       	sbci	r31, 0xFE	; 254
    34a6:	80 81       	ld	r24, Z
    34a8:	8f 87       	std	Y+15, r24	; 0x0f
    34aa:	0c c0       	rjmp	.+24     	; 0x34c4 <KPD_u8GetPressedKey+0x19a>

					/* handling long press*/
					while(Local_u8Pressed == 0){
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    34ac:	8a 89       	ldd	r24, Y+18	; 0x12
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	fc 01       	movw	r30, r24
    34b4:	e4 58       	subi	r30, 0x84	; 132
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	90 81       	ld	r25, Z
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	69 2f       	mov	r22, r25
    34be:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <DIO_u8GetPinValue>
    34c2:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
				if(Local_u8Pressed == 0){
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];

					/* handling long press*/
					while(Local_u8Pressed == 0){
    34c4:	89 89       	ldd	r24, Y+17	; 0x11
    34c6:	88 23       	and	r24, r24
    34c8:	89 f3       	breq	.-30     	; 0x34ac <KPD_u8GetPressedKey+0x182>
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
					}
					Local_u8Flag =1;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	88 8b       	std	Y+16, r24	; 0x10
    34ce:	07 c0       	rjmp	.+14     	; 0x34de <KPD_u8GetPressedKey+0x1b4>

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    34d0:	8a 89       	ldd	r24, Y+18	; 0x12
    34d2:	8f 5f       	subi	r24, 0xFF	; 255
    34d4:	8a 8b       	std	Y+18, r24	; 0x12
    34d6:	8a 89       	ldd	r24, Y+18	; 0x12
    34d8:	84 30       	cpi	r24, 0x04	; 4
    34da:	08 f4       	brcc	.+2      	; 0x34de <KPD_u8GetPressedKey+0x1b4>
    34dc:	43 cf       	rjmp	.-378    	; 0x3364 <KPD_u8GetPressedKey+0x3a>
					break;
				}
			}
		}

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    34de:	8b 89       	ldd	r24, Y+19	; 0x13
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	fc 01       	movw	r30, r24
    34e6:	e8 58       	subi	r30, 0x88	; 136
    34e8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ea:	90 81       	ld	r25, Z
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	69 2f       	mov	r22, r25
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
		if (Local_u8Flag == 1) {break;}
    34f6:	88 89       	ldd	r24, Y+16	; 0x10
    34f8:	81 30       	cpi	r24, 0x01	; 1
    34fa:	39 f0       	breq	.+14     	; 0x350a <KPD_u8GetPressedKey+0x1e0>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    34fc:	8b 89       	ldd	r24, Y+19	; 0x13
    34fe:	8f 5f       	subi	r24, 0xFF	; 255
    3500:	8b 8b       	std	Y+19, r24	; 0x13
    3502:	8b 89       	ldd	r24, Y+19	; 0x13
    3504:	84 30       	cpi	r24, 0x04	; 4
    3506:	08 f4       	brcc	.+2      	; 0x350a <KPD_u8GetPressedKey+0x1e0>
    3508:	1f cf       	rjmp	.-450    	; 0x3348 <KPD_u8GetPressedKey+0x1e>

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
		if (Local_u8Flag == 1) {break;}
	}

	return Local_u8ReturnedVal;
    350a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    350c:	63 96       	adiw	r28, 0x13	; 19
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret

0000351e <EEPROM_VidWriteDataByte>:
#define uniquAdderess		0x50		// 0b01010000
/***********************************************/


void EEPROM_VidWriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8Data) // 0b01010011
{
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	61 97       	sbiw	r28, 0x11	; 17
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	98 8b       	std	Y+16, r25	; 0x10
    3534:	8f 87       	std	Y+15, r24	; 0x0f
    3536:	69 8b       	std	Y+17, r22	; 0x11
	/* Start condition */
	TWI_voidStartCondition();
    3538:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/* Send Byte Address with write operation */
	TWI_voidSlaveAddressWrite(uniquAdderess|(A2<<2)|(Copy_u16ByteAddress>>8));
    353c:	8f 85       	ldd	r24, Y+15	; 0x0f
    353e:	98 89       	ldd	r25, Y+16	; 0x10
    3540:	89 2f       	mov	r24, r25
    3542:	99 27       	eor	r25, r25
    3544:	80 65       	ori	r24, 0x50	; 80
    3546:	0e 94 96 0c 	call	0x192c	; 0x192c <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    354a:	8f 85       	ldd	r24, Y+15	; 0x0f
    354c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/*Send Data*/
	TWI_voidMasterSendData(Copy_u8Data);
    3550:	89 89       	ldd	r24, Y+17	; 0x11
    3552:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/* stop condition */
	TWI_voidStopCondition();
    3556:	0e 94 81 0c 	call	0x1902	; 0x1902 <TWI_voidStopCondition>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	a0 e2       	ldi	r26, 0x20	; 32
    3560:	b1 e4       	ldi	r27, 0x41	; 65
    3562:	8b 87       	std	Y+11, r24	; 0x0b
    3564:	9c 87       	std	Y+12, r25	; 0x0c
    3566:	ad 87       	std	Y+13, r26	; 0x0d
    3568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    356a:	6b 85       	ldd	r22, Y+11	; 0x0b
    356c:	7c 85       	ldd	r23, Y+12	; 0x0c
    356e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3570:	9e 85       	ldd	r25, Y+14	; 0x0e
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	4a ef       	ldi	r20, 0xFA	; 250
    3578:	54 e4       	ldi	r21, 0x44	; 68
    357a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	8f 83       	std	Y+7, r24	; 0x07
    3584:	98 87       	std	Y+8, r25	; 0x08
    3586:	a9 87       	std	Y+9, r26	; 0x09
    3588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    358a:	6f 81       	ldd	r22, Y+7	; 0x07
    358c:	78 85       	ldd	r23, Y+8	; 0x08
    358e:	89 85       	ldd	r24, Y+9	; 0x09
    3590:	9a 85       	ldd	r25, Y+10	; 0x0a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e8       	ldi	r20, 0x80	; 128
    3598:	5f e3       	ldi	r21, 0x3F	; 63
    359a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359e:	88 23       	and	r24, r24
    35a0:	2c f4       	brge	.+10     	; 0x35ac <EEPROM_VidWriteDataByte+0x8e>
		__ticks = 1;
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	3f c0       	rjmp	.+126    	; 0x362a <EEPROM_VidWriteDataByte+0x10c>
	else if (__tmp > 65535)
    35ac:	6f 81       	ldd	r22, Y+7	; 0x07
    35ae:	78 85       	ldd	r23, Y+8	; 0x08
    35b0:	89 85       	ldd	r24, Y+9	; 0x09
    35b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	3f ef       	ldi	r19, 0xFF	; 255
    35b8:	4f e7       	ldi	r20, 0x7F	; 127
    35ba:	57 e4       	ldi	r21, 0x47	; 71
    35bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c0:	18 16       	cp	r1, r24
    35c2:	4c f5       	brge	.+82     	; 0x3616 <EEPROM_VidWriteDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e2       	ldi	r20, 0x20	; 32
    35d2:	51 e4       	ldi	r21, 0x41	; 65
    35d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	9e 83       	std	Y+6, r25	; 0x06
    35ea:	8d 83       	std	Y+5, r24	; 0x05
    35ec:	0f c0       	rjmp	.+30     	; 0x360c <EEPROM_VidWriteDataByte+0xee>
    35ee:	88 ec       	ldi	r24, 0xC8	; 200
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9c 83       	std	Y+4, r25	; 0x04
    35f4:	8b 83       	std	Y+3, r24	; 0x03
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	9c 81       	ldd	r25, Y+4	; 0x04
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	f1 f7       	brne	.-4      	; 0x35fa <EEPROM_VidWriteDataByte+0xdc>
    35fe:	9c 83       	std	Y+4, r25	; 0x04
    3600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3602:	8d 81       	ldd	r24, Y+5	; 0x05
    3604:	9e 81       	ldd	r25, Y+6	; 0x06
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	9e 83       	std	Y+6, r25	; 0x06
    360a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360c:	8d 81       	ldd	r24, Y+5	; 0x05
    360e:	9e 81       	ldd	r25, Y+6	; 0x06
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	69 f7       	brne	.-38     	; 0x35ee <EEPROM_VidWriteDataByte+0xd0>
    3614:	14 c0       	rjmp	.+40     	; 0x363e <EEPROM_VidWriteDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3616:	6f 81       	ldd	r22, Y+7	; 0x07
    3618:	78 85       	ldd	r23, Y+8	; 0x08
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	9e 83       	std	Y+6, r25	; 0x06
    3628:	8d 83       	std	Y+5, r24	; 0x05
    362a:	8d 81       	ldd	r24, Y+5	; 0x05
    362c:	9e 81       	ldd	r25, Y+6	; 0x06
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	89 83       	std	Y+1, r24	; 0x01
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	9a 81       	ldd	r25, Y+2	; 0x02
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	f1 f7       	brne	.-4      	; 0x3636 <EEPROM_VidWriteDataByte+0x118>
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01

	/* delay 5 ms for rewrite */
	_delay_ms(10);
}
    363e:	61 96       	adiw	r28, 0x11	; 17
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress)
{
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <EEPROM_u8ReadDataByte+0x6>
    3656:	0f 92       	push	r0
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	9b 83       	std	Y+3, r25	; 0x03
    365e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8data;
	/* Start condition */
	TWI_voidStartCondition();
    3660:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/*Send Byte Address with Write operation*/
	TWI_voidSlaveAddressWrite((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	9b 81       	ldd	r25, Y+3	; 0x03
    3668:	89 2f       	mov	r24, r25
    366a:	99 27       	eor	r25, r25
    366c:	80 65       	ori	r24, 0x50	; 80
    366e:	0e 94 96 0c 	call	0x192c	; 0x192c <TWI_voidSlaveAddressWrite>

	/*Send rest of address*/
	TWI_voidMasterSendData((u8)Copy_u16ByteAddress);
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <TWI_voidMasterSendData>

	/*Send Repeat start condition*/
	TWI_voidStartCondition();
    3678:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_voidStartCondition>

	/*Send Byte Address with Read operation*/
	TWI_voidSlaveAddressRead((uniquAdderess)|(A2<<2)|(Copy_u16ByteAddress>>8));
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	9b 81       	ldd	r25, Y+3	; 0x03
    3680:	89 2f       	mov	r24, r25
    3682:	99 27       	eor	r25, r25
    3684:	80 65       	ori	r24, 0x50	; 80
    3686:	0e 94 bf 0c 	call	0x197e	; 0x197e <TWI_voidSlaveAddressRead>

	Local_u8data = TWI_u8MasterReceiveData();
    368a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TWI_u8MasterReceiveData>
    368e:	89 83       	std	Y+1, r24	; 0x01

	/* stop condition */
	TWI_voidStopCondition();
    3690:	0e 94 81 0c 	call	0x1902	; 0x1902 <TWI_voidStopCondition>

	return Local_u8data;
    3694:	89 81       	ldd	r24, Y+1	; 0x01

}
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <SSD_voidInit>:
#include "../../MCAL//DIO/DIO.h"
#include "SSD.h"



void SSD_voidInit(void){
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SSD_PORT,DIO_OUTPUT_PORT);
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	6f ef       	ldi	r22, 0xFF	; 255
    36ae:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_voidSetPortDirection>
}
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <SSD_voidKPDToSSD>:

void SSD_voidKPDToSSD(u8 Copy_u8Char){
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <SSD_voidKPDToSSD+0x6>
    36be:	0f 92       	push	r0
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Char){
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	28 2f       	mov	r18, r24
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	3b 83       	std	Y+3, r19	; 0x03
    36ce:	2a 83       	std	Y+2, r18	; 0x02
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	9b 81       	ldd	r25, Y+3	; 0x03
    36d4:	85 33       	cpi	r24, 0x35	; 53
    36d6:	91 05       	cpc	r25, r1
    36d8:	09 f4       	brne	.+2      	; 0x36dc <SSD_voidKPDToSSD+0x24>
    36da:	60 c0       	rjmp	.+192    	; 0x379c <SSD_voidKPDToSSD+0xe4>
    36dc:	2a 81       	ldd	r18, Y+2	; 0x02
    36de:	3b 81       	ldd	r19, Y+3	; 0x03
    36e0:	26 33       	cpi	r18, 0x36	; 54
    36e2:	31 05       	cpc	r19, r1
    36e4:	0c f5       	brge	.+66     	; 0x3728 <SSD_voidKPDToSSD+0x70>
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ea:	82 33       	cpi	r24, 0x32	; 50
    36ec:	91 05       	cpc	r25, r1
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <SSD_voidKPDToSSD+0x3a>
    36f0:	46 c0       	rjmp	.+140    	; 0x377e <SSD_voidKPDToSSD+0xc6>
    36f2:	2a 81       	ldd	r18, Y+2	; 0x02
    36f4:	3b 81       	ldd	r19, Y+3	; 0x03
    36f6:	23 33       	cpi	r18, 0x33	; 51
    36f8:	31 05       	cpc	r19, r1
    36fa:	5c f4       	brge	.+22     	; 0x3712 <SSD_voidKPDToSSD+0x5a>
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3700:	80 33       	cpi	r24, 0x30	; 48
    3702:	91 05       	cpc	r25, r1
    3704:	91 f1       	breq	.+100    	; 0x376a <SSD_voidKPDToSSD+0xb2>
    3706:	2a 81       	ldd	r18, Y+2	; 0x02
    3708:	3b 81       	ldd	r19, Y+3	; 0x03
    370a:	21 33       	cpi	r18, 0x31	; 49
    370c:	31 05       	cpc	r19, r1
    370e:	91 f1       	breq	.+100    	; 0x3774 <SSD_voidKPDToSSD+0xbc>
    3710:	63 c0       	rjmp	.+198    	; 0x37d8 <SSD_voidKPDToSSD+0x120>
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	9b 81       	ldd	r25, Y+3	; 0x03
    3716:	83 33       	cpi	r24, 0x33	; 51
    3718:	91 05       	cpc	r25, r1
    371a:	b1 f1       	breq	.+108    	; 0x3788 <SSD_voidKPDToSSD+0xd0>
    371c:	2a 81       	ldd	r18, Y+2	; 0x02
    371e:	3b 81       	ldd	r19, Y+3	; 0x03
    3720:	24 33       	cpi	r18, 0x34	; 52
    3722:	31 05       	cpc	r19, r1
    3724:	b1 f1       	breq	.+108    	; 0x3792 <SSD_voidKPDToSSD+0xda>
    3726:	58 c0       	rjmp	.+176    	; 0x37d8 <SSD_voidKPDToSSD+0x120>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	88 33       	cpi	r24, 0x38	; 56
    372e:	91 05       	cpc	r25, r1
    3730:	09 f4       	brne	.+2      	; 0x3734 <SSD_voidKPDToSSD+0x7c>
    3732:	43 c0       	rjmp	.+134    	; 0x37ba <SSD_voidKPDToSSD+0x102>
    3734:	2a 81       	ldd	r18, Y+2	; 0x02
    3736:	3b 81       	ldd	r19, Y+3	; 0x03
    3738:	29 33       	cpi	r18, 0x39	; 57
    373a:	31 05       	cpc	r19, r1
    373c:	5c f4       	brge	.+22     	; 0x3754 <SSD_voidKPDToSSD+0x9c>
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	86 33       	cpi	r24, 0x36	; 54
    3744:	91 05       	cpc	r25, r1
    3746:	79 f1       	breq	.+94     	; 0x37a6 <SSD_voidKPDToSSD+0xee>
    3748:	2a 81       	ldd	r18, Y+2	; 0x02
    374a:	3b 81       	ldd	r19, Y+3	; 0x03
    374c:	27 33       	cpi	r18, 0x37	; 55
    374e:	31 05       	cpc	r19, r1
    3750:	79 f1       	breq	.+94     	; 0x37b0 <SSD_voidKPDToSSD+0xf8>
    3752:	42 c0       	rjmp	.+132    	; 0x37d8 <SSD_voidKPDToSSD+0x120>
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	9b 81       	ldd	r25, Y+3	; 0x03
    3758:	89 33       	cpi	r24, 0x39	; 57
    375a:	91 05       	cpc	r25, r1
    375c:	99 f1       	breq	.+102    	; 0x37c4 <SSD_voidKPDToSSD+0x10c>
    375e:	2a 81       	ldd	r18, Y+2	; 0x02
    3760:	3b 81       	ldd	r19, Y+3	; 0x03
    3762:	23 34       	cpi	r18, 0x43	; 67
    3764:	31 05       	cpc	r19, r1
    3766:	99 f1       	breq	.+102    	; 0x37ce <SSD_voidKPDToSSD+0x116>
    3768:	37 c0       	rjmp	.+110    	; 0x37d8 <SSD_voidKPDToSSD+0x120>
	case '0': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	6f e3       	ldi	r22, 0x3F	; 63
    376e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3772:	36 c0       	rjmp	.+108    	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '1': DIO_voidSetPortValue(SSD_PORT,ONE); break;
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	66 e0       	ldi	r22, 0x06	; 6
    3778:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    377c:	31 c0       	rjmp	.+98     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '2': DIO_voidSetPortValue(SSD_PORT,TWO); break;
    377e:	83 e0       	ldi	r24, 0x03	; 3
    3780:	6b e5       	ldi	r22, 0x5B	; 91
    3782:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3786:	2c c0       	rjmp	.+88     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '3': DIO_voidSetPortValue(SSD_PORT,THREE); break;
    3788:	83 e0       	ldi	r24, 0x03	; 3
    378a:	6f e4       	ldi	r22, 0x4F	; 79
    378c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    3790:	27 c0       	rjmp	.+78     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '4': DIO_voidSetPortValue(SSD_PORT,FOUR); break;
    3792:	83 e0       	ldi	r24, 0x03	; 3
    3794:	66 e6       	ldi	r22, 0x66	; 102
    3796:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    379a:	22 c0       	rjmp	.+68     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '5': DIO_voidSetPortValue(SSD_PORT,FIVE); break;
    379c:	83 e0       	ldi	r24, 0x03	; 3
    379e:	6d e6       	ldi	r22, 0x6D	; 109
    37a0:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37a4:	1d c0       	rjmp	.+58     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '6': DIO_voidSetPortValue(SSD_PORT,SIX); break;
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	6d e7       	ldi	r22, 0x7D	; 125
    37aa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37ae:	18 c0       	rjmp	.+48     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '7': DIO_voidSetPortValue(SSD_PORT,SEVEN); break;
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	67 e0       	ldi	r22, 0x07	; 7
    37b4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37b8:	13 c0       	rjmp	.+38     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '8': DIO_voidSetPortValue(SSD_PORT,EIGHT); break;
    37ba:	83 e0       	ldi	r24, 0x03	; 3
    37bc:	6f e7       	ldi	r22, 0x7F	; 127
    37be:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37c2:	0e c0       	rjmp	.+28     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case '9': DIO_voidSetPortValue(SSD_PORT,NINE); break;
    37c4:	83 e0       	ldi	r24, 0x03	; 3
    37c6:	6f e6       	ldi	r22, 0x6F	; 111
    37c8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37cc:	09 c0       	rjmp	.+18     	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	case 'C': DIO_voidSetPortValue(SSD_PORT,ZERO); break;
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	6f e3       	ldi	r22, 0x3F	; 63
    37d2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
    37d6:	04 c0       	rjmp	.+8      	; 0x37e0 <SSD_voidKPDToSSD+0x128>
	default : DIO_voidSetPortValue(SSD_PORT,0b01001001); break;
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	69 e4       	ldi	r22, 0x49	; 73
    37dc:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_voidSetPortValue>
	}
}
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <main>:
#include "MCAL/TIMER0/TIM0.h"
#include "MCAL/SPI/SPI.h"



int main(void){
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	ad 97       	sbiw	r28, 0x2d	; 45
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_INPUT);	// ss
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	64 e0       	ldi	r22, 0x04	; 4
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN5, DIO_INPUT);	// MOSI
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	65 e0       	ldi	r22, 0x05	; 5
    380e:	40 e0       	ldi	r20, 0x00	; 0
    3810:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);	// MISO
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	66 e0       	ldi	r22, 0x06	; 6
    3818:	41 e0       	ldi	r20, 0x01	; 1
    381a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, DIO_INPUT);	// CK
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	67 e0       	ldi	r22, 0x07	; 7
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	a8 e4       	ldi	r26, 0x48	; 72
    382e:	b3 e4       	ldi	r27, 0x43	; 67
    3830:	89 8f       	std	Y+25, r24	; 0x19
    3832:	9a 8f       	std	Y+26, r25	; 0x1a
    3834:	ab 8f       	std	Y+27, r26	; 0x1b
    3836:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3838:	69 8d       	ldd	r22, Y+25	; 0x19
    383a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    383c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    383e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	4a ef       	ldi	r20, 0xFA	; 250
    3846:	54 e4       	ldi	r21, 0x44	; 68
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	8d 8b       	std	Y+21, r24	; 0x15
    3852:	9e 8b       	std	Y+22, r25	; 0x16
    3854:	af 8b       	std	Y+23, r26	; 0x17
    3856:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3858:	6d 89       	ldd	r22, Y+21	; 0x15
    385a:	7e 89       	ldd	r23, Y+22	; 0x16
    385c:	8f 89       	ldd	r24, Y+23	; 0x17
    385e:	98 8d       	ldd	r25, Y+24	; 0x18
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e8       	ldi	r20, 0x80	; 128
    3866:	5f e3       	ldi	r21, 0x3F	; 63
    3868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    386c:	88 23       	and	r24, r24
    386e:	2c f4       	brge	.+10     	; 0x387a <main+0x8e>
		__ticks = 1;
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9c 8b       	std	Y+20, r25	; 0x14
    3876:	8b 8b       	std	Y+19, r24	; 0x13
    3878:	3f c0       	rjmp	.+126    	; 0x38f8 <main+0x10c>
	else if (__tmp > 65535)
    387a:	6d 89       	ldd	r22, Y+21	; 0x15
    387c:	7e 89       	ldd	r23, Y+22	; 0x16
    387e:	8f 89       	ldd	r24, Y+23	; 0x17
    3880:	98 8d       	ldd	r25, Y+24	; 0x18
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	3f ef       	ldi	r19, 0xFF	; 255
    3886:	4f e7       	ldi	r20, 0x7F	; 127
    3888:	57 e4       	ldi	r21, 0x47	; 71
    388a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    388e:	18 16       	cp	r1, r24
    3890:	4c f5       	brge	.+82     	; 0x38e4 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3892:	69 8d       	ldd	r22, Y+25	; 0x19
    3894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	40 e2       	ldi	r20, 0x20	; 32
    38a0:	51 e4       	ldi	r21, 0x41	; 65
    38a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9c 8b       	std	Y+20, r25	; 0x14
    38b8:	8b 8b       	std	Y+19, r24	; 0x13
    38ba:	0f c0       	rjmp	.+30     	; 0x38da <main+0xee>
    38bc:	88 ec       	ldi	r24, 0xC8	; 200
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9a 8b       	std	Y+18, r25	; 0x12
    38c2:	89 8b       	std	Y+17, r24	; 0x11
    38c4:	89 89       	ldd	r24, Y+17	; 0x11
    38c6:	9a 89       	ldd	r25, Y+18	; 0x12
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <main+0xdc>
    38cc:	9a 8b       	std	Y+18, r25	; 0x12
    38ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d0:	8b 89       	ldd	r24, Y+19	; 0x13
    38d2:	9c 89       	ldd	r25, Y+20	; 0x14
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	9c 8b       	std	Y+20, r25	; 0x14
    38d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38da:	8b 89       	ldd	r24, Y+19	; 0x13
    38dc:	9c 89       	ldd	r25, Y+20	; 0x14
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	69 f7       	brne	.-38     	; 0x38bc <main+0xd0>
    38e2:	14 c0       	rjmp	.+40     	; 0x390c <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e4:	6d 89       	ldd	r22, Y+21	; 0x15
    38e6:	7e 89       	ldd	r23, Y+22	; 0x16
    38e8:	8f 89       	ldd	r24, Y+23	; 0x17
    38ea:	98 8d       	ldd	r25, Y+24	; 0x18
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9c 8b       	std	Y+20, r25	; 0x14
    38f6:	8b 8b       	std	Y+19, r24	; 0x13
    38f8:	8b 89       	ldd	r24, Y+19	; 0x13
    38fa:	9c 89       	ldd	r25, Y+20	; 0x14
    38fc:	98 8b       	std	Y+16, r25	; 0x10
    38fe:	8f 87       	std	Y+15, r24	; 0x0f
    3900:	8f 85       	ldd	r24, Y+15	; 0x0f
    3902:	98 89       	ldd	r25, Y+16	; 0x10
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	f1 f7       	brne	.-4      	; 0x3904 <main+0x118>
    3908:	98 8b       	std	Y+16, r25	; 0x10
    390a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	SPI_voidInit();
    390c:	0e 94 b0 09 	call	0x1360	; 0x1360 <SPI_voidInit>
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	a8 e4       	ldi	r26, 0x48	; 72
    3916:	b3 e4       	ldi	r27, 0x43	; 67
    3918:	8b 87       	std	Y+11, r24	; 0x0b
    391a:	9c 87       	std	Y+12, r25	; 0x0c
    391c:	ad 87       	std	Y+13, r26	; 0x0d
    391e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3920:	6b 85       	ldd	r22, Y+11	; 0x0b
    3922:	7c 85       	ldd	r23, Y+12	; 0x0c
    3924:	8d 85       	ldd	r24, Y+13	; 0x0d
    3926:	9e 85       	ldd	r25, Y+14	; 0x0e
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	4a ef       	ldi	r20, 0xFA	; 250
    392e:	54 e4       	ldi	r21, 0x44	; 68
    3930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	8f 83       	std	Y+7, r24	; 0x07
    393a:	98 87       	std	Y+8, r25	; 0x08
    393c:	a9 87       	std	Y+9, r26	; 0x09
    393e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3940:	6f 81       	ldd	r22, Y+7	; 0x07
    3942:	78 85       	ldd	r23, Y+8	; 0x08
    3944:	89 85       	ldd	r24, Y+9	; 0x09
    3946:	9a 85       	ldd	r25, Y+10	; 0x0a
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e8       	ldi	r20, 0x80	; 128
    394e:	5f e3       	ldi	r21, 0x3F	; 63
    3950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3954:	88 23       	and	r24, r24
    3956:	2c f4       	brge	.+10     	; 0x3962 <main+0x176>
		__ticks = 1;
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	3f c0       	rjmp	.+126    	; 0x39e0 <main+0x1f4>
	else if (__tmp > 65535)
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	3f ef       	ldi	r19, 0xFF	; 255
    396e:	4f e7       	ldi	r20, 0x7F	; 127
    3970:	57 e4       	ldi	r21, 0x47	; 71
    3972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3976:	18 16       	cp	r1, r24
    3978:	4c f5       	brge	.+82     	; 0x39cc <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397a:	6b 85       	ldd	r22, Y+11	; 0x0b
    397c:	7c 85       	ldd	r23, Y+12	; 0x0c
    397e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3980:	9e 85       	ldd	r25, Y+14	; 0x0e
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9e 83       	std	Y+6, r25	; 0x06
    39a0:	8d 83       	std	Y+5, r24	; 0x05
    39a2:	0f c0       	rjmp	.+30     	; 0x39c2 <main+0x1d6>
    39a4:	88 ec       	ldi	r24, 0xC8	; 200
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	9c 83       	std	Y+4, r25	; 0x04
    39aa:	8b 83       	std	Y+3, r24	; 0x03
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	9c 81       	ldd	r25, Y+4	; 0x04
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0x1c4>
    39b4:	9c 83       	std	Y+4, r25	; 0x04
    39b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c2:	8d 81       	ldd	r24, Y+5	; 0x05
    39c4:	9e 81       	ldd	r25, Y+6	; 0x06
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	69 f7       	brne	.-38     	; 0x39a4 <main+0x1b8>
    39ca:	14 c0       	rjmp	.+40     	; 0x39f4 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39cc:	6f 81       	ldd	r22, Y+7	; 0x07
    39ce:	78 85       	ldd	r23, Y+8	; 0x08
    39d0:	89 85       	ldd	r24, Y+9	; 0x09
    39d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9e 83       	std	Y+6, r25	; 0x06
    39de:	8d 83       	std	Y+5, r24	; 0x05
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	9a 83       	std	Y+2, r25	; 0x02
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <main+0x200>
    39f0:	9a 83       	std	Y+2, r25	; 0x02
    39f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

	DIO_voidSetPinDirection(DIO_PORTC, DIO_PIN0, DIO_OUTPUT);
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	60 e0       	ldi	r22, 0x00	; 0
    39f8:	41 e0       	ldi	r20, 0x01	; 1
    39fa:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>

	/* ADC */
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_DIV_64);
    3a08:	86 e0       	ldi	r24, 0x06	; 6
    3a0a:	0e 94 2b 10 	call	0x2056	; 0x2056 <ADC_voidInit>
	STP_voidInit();
    3a0e:	0e 94 a4 10 	call	0x2148	; 0x2148 <STP_voidInit>
	u16 Local_u16DigitalVlaueTEMP, Local_u16AnaloglValueTEMP;



	while(1){
		u8 Local_u8TempFlag = 'z';
    3a12:	8a e7       	ldi	r24, 0x7A	; 122
    3a14:	8f 8f       	std	Y+31, r24	; 0x1f
		u8 Local_u8NightLightFlag = 'z';
    3a16:	8a e7       	ldi	r24, 0x7A	; 122
    3a18:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_u8SPIDataReceived = SPI_u8ReceiveData();
    3a1a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SPI_u8ReceiveData>
    3a1e:	8d 8f       	std	Y+29, r24	; 0x1d

		/* TEMP Sensor (always on) */
		Local_u16DigitalVlaueTEMP = ADC_u16GetDigitalValue(ADC_Channel_1);
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	0e 94 60 10 	call	0x20c0	; 0x20c0 <ADC_u16GetDigitalValue>
    3a26:	9b a3       	std	Y+35, r25	; 0x23
    3a28:	8a a3       	std	Y+34, r24	; 0x22
		Local_u16AnaloglValueTEMP = (Local_u16DigitalVlaueTEMP * 5000UL)/1024;
    3a2a:	8a a1       	ldd	r24, Y+34	; 0x22
    3a2c:	9b a1       	ldd	r25, Y+35	; 0x23
    3a2e:	cc 01       	movw	r24, r24
    3a30:	a0 e0       	ldi	r26, 0x00	; 0
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	28 e8       	ldi	r18, 0x88	; 136
    3a36:	33 e1       	ldi	r19, 0x13	; 19
    3a38:	40 e0       	ldi	r20, 0x00	; 0
    3a3a:	50 e0       	ldi	r21, 0x00	; 0
    3a3c:	bc 01       	movw	r22, r24
    3a3e:	cd 01       	movw	r24, r26
    3a40:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsi3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	07 2e       	mov	r0, r23
    3a4a:	7a e0       	ldi	r23, 0x0A	; 10
    3a4c:	b6 95       	lsr	r27
    3a4e:	a7 95       	ror	r26
    3a50:	97 95       	ror	r25
    3a52:	87 95       	ror	r24
    3a54:	7a 95       	dec	r23
    3a56:	d1 f7       	brne	.-12     	; 0x3a4c <main+0x260>
    3a58:	70 2d       	mov	r23, r0
    3a5a:	99 a3       	std	Y+33, r25	; 0x21
    3a5c:	88 a3       	std	Y+32, r24	; 0x20

		/* fire alarm (always on)*/
		if(Local_u16AnaloglValueTEMP >= 570){
    3a5e:	88 a1       	ldd	r24, Y+32	; 0x20
    3a60:	99 a1       	ldd	r25, Y+33	; 0x21
    3a62:	22 e0       	ldi	r18, 0x02	; 2
    3a64:	8a 33       	cpi	r24, 0x3A	; 58
    3a66:	92 07       	cpc	r25, r18
    3a68:	30 f0       	brcs	.+12     	; 0x3a76 <main+0x28a>
			Local_u8TempFlag = 'A';
    3a6a:	81 e4       	ldi	r24, 0x41	; 65
    3a6c:	8f 8f       	std	Y+31, r24	; 0x1f
			Local_u8NightLightFlag = 'A';
    3a6e:	81 e4       	ldi	r24, 0x41	; 65
    3a70:	8e 8f       	std	Y+30, r24	; 0x1e
			//SPI_voidSalveSendData('l'); //l for alarm
			Local_u8SPIDataReceived = 'x'; //x is arbitrary constant
    3a72:	88 e7       	ldi	r24, 0x78	; 120
    3a74:	8d 8f       	std	Y+29, r24	; 0x1d
		}

		if(Local_u8SPIDataReceived == 'c'){ //received correct login
    3a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a78:	83 36       	cpi	r24, 0x63	; 99
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <main+0x292>
    3a7c:	6b c0       	rjmp	.+214    	; 0x3b54 <main+0x368>


			/* LDR */
			Local_u16DigitalVlaueLDR = ADC_u16GetDigitalValue(ADC_Channel_0);
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	0e 94 60 10 	call	0x20c0	; 0x20c0 <ADC_u16GetDigitalValue>
    3a84:	9f a3       	std	Y+39, r25	; 0x27
    3a86:	8e a3       	std	Y+38, r24	; 0x26
			Local_u16AnaloglValueLDR = (Local_u16DigitalVlaueLDR * 5000UL)/1024;
    3a88:	8e a1       	ldd	r24, Y+38	; 0x26
    3a8a:	9f a1       	ldd	r25, Y+39	; 0x27
    3a8c:	cc 01       	movw	r24, r24
    3a8e:	a0 e0       	ldi	r26, 0x00	; 0
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	28 e8       	ldi	r18, 0x88	; 136
    3a94:	33 e1       	ldi	r19, 0x13	; 19
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__mulsi3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	07 2e       	mov	r0, r23
    3aa8:	7a e0       	ldi	r23, 0x0A	; 10
    3aaa:	b6 95       	lsr	r27
    3aac:	a7 95       	ror	r26
    3aae:	97 95       	ror	r25
    3ab0:	87 95       	ror	r24
    3ab2:	7a 95       	dec	r23
    3ab4:	d1 f7       	brne	.-12     	; 0x3aaa <main+0x2be>
    3ab6:	70 2d       	mov	r23, r0
    3ab8:	9d a3       	std	Y+37, r25	; 0x25
    3aba:	8c a3       	std	Y+36, r24	; 0x24

			/* NIGHT LIGTH */
			if(Local_u16AnaloglValueLDR <= 1500){
    3abc:	8c a1       	ldd	r24, Y+36	; 0x24
    3abe:	9d a1       	ldd	r25, Y+37	; 0x25
    3ac0:	35 e0       	ldi	r19, 0x05	; 5
    3ac2:	8d 3d       	cpi	r24, 0xDD	; 221
    3ac4:	93 07       	cpc	r25, r19
    3ac6:	40 f4       	brcc	.+16     	; 0x3ad8 <main+0x2ec>
				DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_LOW);
    3ac8:	82 e0       	ldi	r24, 0x02	; 2
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
				Local_u8NightLightFlag = '0';
    3ad2:	80 e3       	ldi	r24, 0x30	; 48
    3ad4:	8e 8f       	std	Y+30, r24	; 0x1e
    3ad6:	0d c0       	rjmp	.+26     	; 0x3af2 <main+0x306>
			}
			else if(Local_u16AnaloglValueLDR > 1500 ){
    3ad8:	8c a1       	ldd	r24, Y+36	; 0x24
    3ada:	9d a1       	ldd	r25, Y+37	; 0x25
    3adc:	25 e0       	ldi	r18, 0x05	; 5
    3ade:	8d 3d       	cpi	r24, 0xDD	; 221
    3ae0:	92 07       	cpc	r25, r18
    3ae2:	38 f0       	brcs	.+14     	; 0x3af2 <main+0x306>
				DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_HIGH);
    3ae4:	82 e0       	ldi	r24, 0x02	; 2
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
				Local_u8NightLightFlag = '1';
    3aee:	81 e3       	ldi	r24, 0x31	; 49
    3af0:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			/* AC Unit */
			if(Local_u16AnaloglValueTEMP <= 200){
    3af2:	88 a1       	ldd	r24, Y+32	; 0x20
    3af4:	99 a1       	ldd	r25, Y+33	; 0x21
    3af6:	89 3c       	cpi	r24, 0xC9	; 201
    3af8:	91 05       	cpc	r25, r1
    3afa:	38 f4       	brcc	.+14     	; 0x3b0a <main+0x31e>
				STP_voidRotate(STP_SPEED_1,STP_DIRECTION_CW);
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	61 e0       	ldi	r22, 0x01	; 1
    3b00:	0e 94 cc 10 	call	0x2198	; 0x2198 <STP_voidRotate>
				Local_u8TempFlag = '1';
    3b04:	81 e3       	ldi	r24, 0x31	; 49
    3b06:	8f 8f       	std	Y+31, r24	; 0x1f
    3b08:	2c c0       	rjmp	.+88     	; 0x3b62 <main+0x376>
			}
			else if((Local_u16AnaloglValueTEMP > 200)&&(Local_u16AnaloglValueTEMP <= 300)){
    3b0a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b0c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b0e:	89 3c       	cpi	r24, 0xC9	; 201
    3b10:	91 05       	cpc	r25, r1
    3b12:	68 f0       	brcs	.+26     	; 0x3b2e <main+0x342>
    3b14:	88 a1       	ldd	r24, Y+32	; 0x20
    3b16:	99 a1       	ldd	r25, Y+33	; 0x21
    3b18:	31 e0       	ldi	r19, 0x01	; 1
    3b1a:	8d 32       	cpi	r24, 0x2D	; 45
    3b1c:	93 07       	cpc	r25, r19
    3b1e:	38 f4       	brcc	.+14     	; 0x3b2e <main+0x342>
				STP_voidRotate(STP_SPEED_2,STP_DIRECTION_CW);
    3b20:	82 e0       	ldi	r24, 0x02	; 2
    3b22:	61 e0       	ldi	r22, 0x01	; 1
    3b24:	0e 94 cc 10 	call	0x2198	; 0x2198 <STP_voidRotate>
				Local_u8TempFlag = '2';
    3b28:	82 e3       	ldi	r24, 0x32	; 50
    3b2a:	8f 8f       	std	Y+31, r24	; 0x1f
    3b2c:	1a c0       	rjmp	.+52     	; 0x3b62 <main+0x376>
			}
			else if((Local_u16AnaloglValueTEMP > 300)&&(Local_u16AnaloglValueTEMP < 570)){
    3b2e:	88 a1       	ldd	r24, Y+32	; 0x20
    3b30:	99 a1       	ldd	r25, Y+33	; 0x21
    3b32:	21 e0       	ldi	r18, 0x01	; 1
    3b34:	8d 32       	cpi	r24, 0x2D	; 45
    3b36:	92 07       	cpc	r25, r18
    3b38:	a0 f0       	brcs	.+40     	; 0x3b62 <main+0x376>
    3b3a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b3c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b3e:	32 e0       	ldi	r19, 0x02	; 2
    3b40:	8a 33       	cpi	r24, 0x3A	; 58
    3b42:	93 07       	cpc	r25, r19
    3b44:	70 f4       	brcc	.+28     	; 0x3b62 <main+0x376>
				STP_voidRotate(STP_SPEED_3, STP_DIRECTION_CW);
    3b46:	83 e0       	ldi	r24, 0x03	; 3
    3b48:	61 e0       	ldi	r22, 0x01	; 1
    3b4a:	0e 94 cc 10 	call	0x2198	; 0x2198 <STP_voidRotate>
				Local_u8TempFlag = '3';
    3b4e:	83 e3       	ldi	r24, 0x33	; 51
    3b50:	8f 8f       	std	Y+31, r24	; 0x1f
    3b52:	07 c0       	rjmp	.+14     	; 0x3b62 <main+0x376>
			}
			else{
				//
			}
		}else{ //wrong password
			DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_LOW); //NIGHT_LIGTH off
    3b54:	82 e0       	ldi	r24, 0x02	; 2
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_voidSetPinValue>
			STP_voidOff();										//AC unit off
    3b5e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <STP_voidOff>
		}

		switch(Local_u8NightLightFlag){
    3b62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	3d a7       	std	Y+45, r19	; 0x2d
    3b6a:	2c a7       	std	Y+44, r18	; 0x2c
    3b6c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b6e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b70:	81 33       	cpi	r24, 0x31	; 49
    3b72:	91 05       	cpc	r25, r1
    3b74:	81 f1       	breq	.+96     	; 0x3bd6 <main+0x3ea>
    3b76:	2c a5       	ldd	r18, Y+44	; 0x2c
    3b78:	3d a5       	ldd	r19, Y+45	; 0x2d
    3b7a:	21 34       	cpi	r18, 0x41	; 65
    3b7c:	31 05       	cpc	r19, r1
    3b7e:	31 f0       	breq	.+12     	; 0x3b8c <main+0x3a0>
    3b80:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b82:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b84:	80 33       	cpi	r24, 0x30	; 48
    3b86:	91 05       	cpc	r25, r1
    3b88:	29 f0       	breq	.+10     	; 0x3b94 <main+0x3a8>
    3b8a:	43 cf       	rjmp	.-378    	; 0x3a12 <main+0x226>
			case 'A':
				SPI_voidSalveSendData('A');
    3b8c:	81 e4       	ldi	r24, 0x41	; 65
    3b8e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3b92:	3f cf       	rjmp	.-386    	; 0x3a12 <main+0x226>
			break;
			case '0':
				switch(Local_u8TempFlag){
    3b94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b96:	28 2f       	mov	r18, r24
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	3b a7       	std	Y+43, r19	; 0x2b
    3b9c:	2a a7       	std	Y+42, r18	; 0x2a
    3b9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ba0:	9b a5       	ldd	r25, Y+43	; 0x2b
    3ba2:	82 33       	cpi	r24, 0x32	; 50
    3ba4:	91 05       	cpc	r25, r1
    3ba6:	79 f0       	breq	.+30     	; 0x3bc6 <main+0x3da>
    3ba8:	2a a5       	ldd	r18, Y+42	; 0x2a
    3baa:	3b a5       	ldd	r19, Y+43	; 0x2b
    3bac:	23 33       	cpi	r18, 0x33	; 51
    3bae:	31 05       	cpc	r19, r1
    3bb0:	71 f0       	breq	.+28     	; 0x3bce <main+0x3e2>
    3bb2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3bb4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3bb6:	81 33       	cpi	r24, 0x31	; 49
    3bb8:	91 05       	cpc	r25, r1
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <main+0x3d2>
    3bbc:	2a cf       	rjmp	.-428    	; 0x3a12 <main+0x226>
					case '1': SPI_voidSalveSendData('1'); break;
    3bbe:	81 e3       	ldi	r24, 0x31	; 49
    3bc0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3bc4:	26 cf       	rjmp	.-436    	; 0x3a12 <main+0x226>
					case '2': SPI_voidSalveSendData('2'); break;
    3bc6:	82 e3       	ldi	r24, 0x32	; 50
    3bc8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3bcc:	22 cf       	rjmp	.-444    	; 0x3a12 <main+0x226>
					case '3': SPI_voidSalveSendData('3'); break;
    3bce:	83 e3       	ldi	r24, 0x33	; 51
    3bd0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3bd4:	1e cf       	rjmp	.-452    	; 0x3a12 <main+0x226>
				}
			break;
			case '1':
				switch(Local_u8TempFlag){
    3bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bd8:	28 2f       	mov	r18, r24
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	39 a7       	std	Y+41, r19	; 0x29
    3bde:	28 a7       	std	Y+40, r18	; 0x28
    3be0:	88 a5       	ldd	r24, Y+40	; 0x28
    3be2:	99 a5       	ldd	r25, Y+41	; 0x29
    3be4:	82 33       	cpi	r24, 0x32	; 50
    3be6:	91 05       	cpc	r25, r1
    3be8:	79 f0       	breq	.+30     	; 0x3c08 <main+0x41c>
    3bea:	28 a5       	ldd	r18, Y+40	; 0x28
    3bec:	39 a5       	ldd	r19, Y+41	; 0x29
    3bee:	23 33       	cpi	r18, 0x33	; 51
    3bf0:	31 05       	cpc	r19, r1
    3bf2:	71 f0       	breq	.+28     	; 0x3c10 <main+0x424>
    3bf4:	88 a5       	ldd	r24, Y+40	; 0x28
    3bf6:	99 a5       	ldd	r25, Y+41	; 0x29
    3bf8:	81 33       	cpi	r24, 0x31	; 49
    3bfa:	91 05       	cpc	r25, r1
    3bfc:	09 f0       	breq	.+2      	; 0x3c00 <main+0x414>
    3bfe:	09 cf       	rjmp	.-494    	; 0x3a12 <main+0x226>
					case '1': SPI_voidSalveSendData('4'); break;
    3c00:	84 e3       	ldi	r24, 0x34	; 52
    3c02:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3c06:	05 cf       	rjmp	.-502    	; 0x3a12 <main+0x226>
					case '2': SPI_voidSalveSendData('5'); break;
    3c08:	85 e3       	ldi	r24, 0x35	; 53
    3c0a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3c0e:	01 cf       	rjmp	.-510    	; 0x3a12 <main+0x226>
					case '3': SPI_voidSalveSendData('6'); break;
    3c10:	86 e3       	ldi	r24, 0x36	; 54
    3c12:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <SPI_voidSalveSendData>
    3c16:	fd ce       	rjmp	.-518    	; 0x3a12 <main+0x226>

00003c18 <__mulsi3>:
    3c18:	62 9f       	mul	r22, r18
    3c1a:	d0 01       	movw	r26, r0
    3c1c:	73 9f       	mul	r23, r19
    3c1e:	f0 01       	movw	r30, r0
    3c20:	82 9f       	mul	r24, r18
    3c22:	e0 0d       	add	r30, r0
    3c24:	f1 1d       	adc	r31, r1
    3c26:	64 9f       	mul	r22, r20
    3c28:	e0 0d       	add	r30, r0
    3c2a:	f1 1d       	adc	r31, r1
    3c2c:	92 9f       	mul	r25, r18
    3c2e:	f0 0d       	add	r31, r0
    3c30:	83 9f       	mul	r24, r19
    3c32:	f0 0d       	add	r31, r0
    3c34:	74 9f       	mul	r23, r20
    3c36:	f0 0d       	add	r31, r0
    3c38:	65 9f       	mul	r22, r21
    3c3a:	f0 0d       	add	r31, r0
    3c3c:	99 27       	eor	r25, r25
    3c3e:	72 9f       	mul	r23, r18
    3c40:	b0 0d       	add	r27, r0
    3c42:	e1 1d       	adc	r30, r1
    3c44:	f9 1f       	adc	r31, r25
    3c46:	63 9f       	mul	r22, r19
    3c48:	b0 0d       	add	r27, r0
    3c4a:	e1 1d       	adc	r30, r1
    3c4c:	f9 1f       	adc	r31, r25
    3c4e:	bd 01       	movw	r22, r26
    3c50:	cf 01       	movw	r24, r30
    3c52:	11 24       	eor	r1, r1
    3c54:	08 95       	ret

00003c56 <__udivmodsi4>:
    3c56:	a1 e2       	ldi	r26, 0x21	; 33
    3c58:	1a 2e       	mov	r1, r26
    3c5a:	aa 1b       	sub	r26, r26
    3c5c:	bb 1b       	sub	r27, r27
    3c5e:	fd 01       	movw	r30, r26
    3c60:	0d c0       	rjmp	.+26     	; 0x3c7c <__udivmodsi4_ep>

00003c62 <__udivmodsi4_loop>:
    3c62:	aa 1f       	adc	r26, r26
    3c64:	bb 1f       	adc	r27, r27
    3c66:	ee 1f       	adc	r30, r30
    3c68:	ff 1f       	adc	r31, r31
    3c6a:	a2 17       	cp	r26, r18
    3c6c:	b3 07       	cpc	r27, r19
    3c6e:	e4 07       	cpc	r30, r20
    3c70:	f5 07       	cpc	r31, r21
    3c72:	20 f0       	brcs	.+8      	; 0x3c7c <__udivmodsi4_ep>
    3c74:	a2 1b       	sub	r26, r18
    3c76:	b3 0b       	sbc	r27, r19
    3c78:	e4 0b       	sbc	r30, r20
    3c7a:	f5 0b       	sbc	r31, r21

00003c7c <__udivmodsi4_ep>:
    3c7c:	66 1f       	adc	r22, r22
    3c7e:	77 1f       	adc	r23, r23
    3c80:	88 1f       	adc	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	1a 94       	dec	r1
    3c86:	69 f7       	brne	.-38     	; 0x3c62 <__udivmodsi4_loop>
    3c88:	60 95       	com	r22
    3c8a:	70 95       	com	r23
    3c8c:	80 95       	com	r24
    3c8e:	90 95       	com	r25
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	bd 01       	movw	r22, r26
    3c96:	cf 01       	movw	r24, r30
    3c98:	08 95       	ret

00003c9a <__prologue_saves__>:
    3c9a:	2f 92       	push	r2
    3c9c:	3f 92       	push	r3
    3c9e:	4f 92       	push	r4
    3ca0:	5f 92       	push	r5
    3ca2:	6f 92       	push	r6
    3ca4:	7f 92       	push	r7
    3ca6:	8f 92       	push	r8
    3ca8:	9f 92       	push	r9
    3caa:	af 92       	push	r10
    3cac:	bf 92       	push	r11
    3cae:	cf 92       	push	r12
    3cb0:	df 92       	push	r13
    3cb2:	ef 92       	push	r14
    3cb4:	ff 92       	push	r15
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	ca 1b       	sub	r28, r26
    3cc4:	db 0b       	sbc	r29, r27
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	cd bf       	out	0x3d, r28	; 61
    3cd0:	09 94       	ijmp

00003cd2 <__epilogue_restores__>:
    3cd2:	2a 88       	ldd	r2, Y+18	; 0x12
    3cd4:	39 88       	ldd	r3, Y+17	; 0x11
    3cd6:	48 88       	ldd	r4, Y+16	; 0x10
    3cd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cda:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cde:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ce0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ce2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ce4:	b9 84       	ldd	r11, Y+9	; 0x09
    3ce6:	c8 84       	ldd	r12, Y+8	; 0x08
    3ce8:	df 80       	ldd	r13, Y+7	; 0x07
    3cea:	ee 80       	ldd	r14, Y+6	; 0x06
    3cec:	fd 80       	ldd	r15, Y+5	; 0x05
    3cee:	0c 81       	ldd	r16, Y+4	; 0x04
    3cf0:	1b 81       	ldd	r17, Y+3	; 0x03
    3cf2:	aa 81       	ldd	r26, Y+2	; 0x02
    3cf4:	b9 81       	ldd	r27, Y+1	; 0x01
    3cf6:	ce 0f       	add	r28, r30
    3cf8:	d1 1d       	adc	r29, r1
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	ed 01       	movw	r28, r26
    3d06:	08 95       	ret

00003d08 <_exit>:
    3d08:	f8 94       	cli

00003d0a <__stop_program>:
    3d0a:	ff cf       	rjmp	.-2      	; 0x3d0a <__stop_program>
